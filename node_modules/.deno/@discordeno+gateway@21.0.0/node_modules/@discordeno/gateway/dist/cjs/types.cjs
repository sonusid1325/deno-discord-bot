"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ShardSocketCloseCodes: function() {
        return ShardSocketCloseCodes;
    },
    ShardState: function() {
        return ShardState;
    },
    TransportCompression: function() {
        return TransportCompression;
    }
});
var ShardState = /*#__PURE__*/ function(ShardState) {
    /** Shard is fully connected to the gateway and receiving events from Discord. */ ShardState[ShardState["Connected"] = 0] = "Connected";
    /** Shard started to connect to the gateway. This is only used if the shard is not currently trying to identify or resume. */ ShardState[ShardState["Connecting"] = 1] = "Connecting";
    /** Shard got disconnected and reconnection actions have been started. */ ShardState[ShardState["Disconnected"] = 2] = "Disconnected";
    /** The shard is connected to the gateway but only heartbeating. At this state the shard has not been identified with discord. */ ShardState[ShardState["Unidentified"] = 3] = "Unidentified";
    /** Shard is trying to identify with the gateway to create a new session. */ ShardState[ShardState["Identifying"] = 4] = "Identifying";
    /** Shard is trying to resume a session with the gateway. */ ShardState[ShardState["Resuming"] = 5] = "Resuming";
    /** Shard got shut down studied or due to a not (self) fixable error and may not attempt to reconnect on its own. */ ShardState[ShardState["Offline"] = 6] = "Offline";
    return ShardState;
}({});
var TransportCompression = /*#__PURE__*/ function(TransportCompression) {
    /**
   * ZLib-Stream Transport Compression.
   *
   * @remarks
   * Uses `node:zlib` to decompress the payloads
   *
   * @see https://discord.com/developers/docs/topics/gateway#zlibstream
   */ TransportCompression["zlib"] = "zlib-stream";
    /**
   * ZStd-Stream Transport Compression.
   *
   * @remarks
   * Uses `fzstd` to decompress the payloads. `fzstd` is an optional dependency, it is required to be installed for this compression.
   *
   * @see https://discord.com/developers/docs/topics/gateway#zstdstream
   */ TransportCompression["zstd"] = "zstd-stream";
    return TransportCompression;
}({});
var ShardSocketCloseCodes = /*#__PURE__*/ function(ShardSocketCloseCodes) {
    /** A regular Shard shutdown. */ ShardSocketCloseCodes[ShardSocketCloseCodes["Shutdown"] = 3000] = "Shutdown";
    /** A resume has been requested and therefore the old connection needs to be closed. */ ShardSocketCloseCodes[ShardSocketCloseCodes["ResumeClosingOldConnection"] = 3024] = "ResumeClosingOldConnection";
    /**
   * Did not receive a heartbeat ACK in time.
   * Closing the shard and creating a new session.
   */ ShardSocketCloseCodes[ShardSocketCloseCodes["ZombiedConnection"] = 3010] = "ZombiedConnection";
    /** Discordeno's gateway tests hae been finished, therefore the Shard can be turned off. */ ShardSocketCloseCodes[ShardSocketCloseCodes["TestingFinished"] = 3064] = "TestingFinished";
    /** Special close code reserved for Discordeno's zero-downtime resharding system. */ ShardSocketCloseCodes[ShardSocketCloseCodes["Resharded"] = 3065] = "Resharded";
    /** Shard is re-identifying therefore the old connection needs to be closed. */ ShardSocketCloseCodes[ShardSocketCloseCodes["ReIdentifying"] = 3066] = "ReIdentifying";
    return ShardSocketCloseCodes;
}({});

//# sourceMappingURL=data:application/json;base64,