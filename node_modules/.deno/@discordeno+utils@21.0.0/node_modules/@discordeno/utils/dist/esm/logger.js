import { bgBrightMagenta, black, bold, cyan, gray, italic, red, yellow } from './colors.js';
export var LogLevels = /*#__PURE__*/ function(LogLevels) {
    LogLevels[LogLevels["Debug"] = 0] = "Debug";
    LogLevels[LogLevels["Info"] = 1] = "Info";
    LogLevels[LogLevels["Warn"] = 2] = "Warn";
    LogLevels[LogLevels["Error"] = 3] = "Error";
    LogLevels[LogLevels["Fatal"] = 4] = "Fatal";
    return LogLevels;
}({});
export var LogDepth = /*#__PURE__*/ function(LogDepth) {
    LogDepth[LogDepth["Minimal"] = 0] = "Minimal";
    LogDepth[LogDepth["Full"] = 1] = "Full";
    return LogDepth;
}({});
const prefixes = new Map([
    [
        0,
        'DEBUG'
    ],
    [
        1,
        'INFO'
    ],
    [
        2,
        'WARN'
    ],
    [
        3,
        'ERROR'
    ],
    [
        4,
        'FATAL'
    ]
]);
const noColor = (msg)=>msg;
const colorFunctions = new Map([
    [
        0,
        gray
    ],
    [
        1,
        cyan
    ],
    [
        2,
        yellow
    ],
    [
        3,
        (str)=>red(str)
    ],
    [
        4,
        (str)=>red(bold(italic(str)))
    ]
]);
export function createLogger({ logLevel = 1, name } = {}) {
    let depth = 0;
    function log(level, ...args) {
        if (level < logLevel) return;
        let color = colorFunctions.get(level);
        if (!color) color = noColor;
        const date = new Date();
        const log1 = [
            bgBrightMagenta(black(`[${date.toLocaleDateString()} ${date.toLocaleTimeString()}]`)),
            color(prefixes.get(level) ?? 'DEBUG'),
            name ? `${name} >` : '>',
            ...args
        ];
        switch(level){
            case 0:
                return console.debug(...log1);
            case 1:
                return console.info(...log1);
            case 2:
                return console.warn(...log1);
            case 3:
                return console.error(...log1);
            case 4:
                return console.error(...log1);
            default:
                return console.log(...log1);
        }
    }
    function setLevel(level) {
        logLevel = level;
    }
    function setDepth(level) {
        depth = level;
    }
    function debug(...args) {
        if (0 === depth) log(0, args[0]);
        else log(0, ...args);
    }
    function info(...args) {
        if (0 === depth) log(1, args[0]);
        else log(1, ...args);
    }
    function warn(...args) {
        if (0 === depth) log(2, args[0]);
        else log(2, ...args);
    }
    function error(...args) {
        if (0 === depth) log(3, args[0]);
        else log(3, ...args);
    }
    function fatal(...args) {
        if (0 === depth) log(4, args[0]);
        else log(4, ...args);
    }
    return {
        log,
        setDepth,
        setLevel,
        debug,
        info,
        warn,
        error,
        fatal
    };
}
export const logger = createLogger({
    name: 'Discordeno'
});
export default logger;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmdCcmlnaHRNYWdlbnRhLCBibGFjaywgYm9sZCwgY3lhbiwgZ3JheSwgaXRhbGljLCByZWQsIHllbGxvdyB9IGZyb20gJy4vY29sb3JzLmpzJ1xuXG5leHBvcnQgZW51bSBMb2dMZXZlbHMge1xuICBEZWJ1ZyxcbiAgSW5mbyxcbiAgV2FybixcbiAgRXJyb3IsXG4gIEZhdGFsLFxufVxuXG5leHBvcnQgZW51bSBMb2dEZXB0aCB7XG4gIE1pbmltYWwsXG4gIEZ1bGwsXG59XG5cbmNvbnN0IHByZWZpeGVzID0gbmV3IE1hcDxMb2dMZXZlbHMsIHN0cmluZz4oW1xuICBbTG9nTGV2ZWxzLkRlYnVnLCAnREVCVUcnXSxcbiAgW0xvZ0xldmVscy5JbmZvLCAnSU5GTyddLFxuICBbTG9nTGV2ZWxzLldhcm4sICdXQVJOJ10sXG4gIFtMb2dMZXZlbHMuRXJyb3IsICdFUlJPUiddLFxuICBbTG9nTGV2ZWxzLkZhdGFsLCAnRkFUQUwnXSxcbl0pXG5cbmNvbnN0IG5vQ29sb3I6IChzdHI6IHN0cmluZykgPT4gc3RyaW5nID0gKG1zZykgPT4gbXNnXG5jb25zdCBjb2xvckZ1bmN0aW9ucyA9IG5ldyBNYXA8TG9nTGV2ZWxzLCAoc3RyOiBzdHJpbmcpID0+IHN0cmluZz4oW1xuICBbTG9nTGV2ZWxzLkRlYnVnLCBncmF5XSxcbiAgW0xvZ0xldmVscy5JbmZvLCBjeWFuXSxcbiAgW0xvZ0xldmVscy5XYXJuLCB5ZWxsb3ddLFxuICBbTG9nTGV2ZWxzLkVycm9yLCAoc3RyOiBzdHJpbmcpID0+IHJlZChzdHIpXSxcbiAgW0xvZ0xldmVscy5GYXRhbCwgKHN0cjogc3RyaW5nKSA9PiByZWQoYm9sZChpdGFsaWMoc3RyKSkpXSxcbl0pXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dnZXIoe1xuICBsb2dMZXZlbCA9IExvZ0xldmVscy5JbmZvLFxuICBuYW1lLFxufToge1xuICBsb2dMZXZlbD86IExvZ0xldmVsc1xuICBuYW1lPzogc3RyaW5nXG59ID0ge30pIHtcbiAgbGV0IGRlcHRoID0gTG9nRGVwdGguTWluaW1hbFxuXG4gIGZ1bmN0aW9uIGxvZyhsZXZlbDogTG9nTGV2ZWxzLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGlmIChsZXZlbCA8IGxvZ0xldmVsKSByZXR1cm5cblxuICAgIGxldCBjb2xvciA9IGNvbG9yRnVuY3Rpb25zLmdldChsZXZlbClcbiAgICBpZiAoIWNvbG9yKSBjb2xvciA9IG5vQ29sb3JcblxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXG4gICAgY29uc3QgbG9nID0gW1xuICAgICAgYmdCcmlnaHRNYWdlbnRhKGJsYWNrKGBbJHtkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpfSAke2RhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCl9XWApKSxcbiAgICAgIGNvbG9yKHByZWZpeGVzLmdldChsZXZlbCkgPz8gJ0RFQlVHJyksXG4gICAgICBuYW1lID8gYCR7bmFtZX0gPmAgOiAnPicsXG4gICAgICAuLi5hcmdzLFxuICAgIF1cblxuICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgIGNhc2UgTG9nTGV2ZWxzLkRlYnVnOlxuICAgICAgICByZXR1cm4gY29uc29sZS5kZWJ1ZyguLi5sb2cpXG4gICAgICBjYXNlIExvZ0xldmVscy5JbmZvOlxuICAgICAgICByZXR1cm4gY29uc29sZS5pbmZvKC4uLmxvZylcbiAgICAgIGNhc2UgTG9nTGV2ZWxzLldhcm46XG4gICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oLi4ubG9nKVxuICAgICAgY2FzZSBMb2dMZXZlbHMuRXJyb3I6XG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKC4uLmxvZylcbiAgICAgIGNhc2UgTG9nTGV2ZWxzLkZhdGFsOlxuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvciguLi5sb2cpXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY29uc29sZS5sb2coLi4ubG9nKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExldmVsKGxldmVsOiBMb2dMZXZlbHMpIHtcbiAgICBsb2dMZXZlbCA9IGxldmVsXG4gIH1cblxuICBmdW5jdGlvbiBzZXREZXB0aChsZXZlbDogTG9nRGVwdGgpIHtcbiAgICBkZXB0aCA9IGxldmVsXG4gIH1cblxuICBmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzOiBhbnlbXSkge1xuICAgIGlmIChMb2dEZXB0aC5NaW5pbWFsID09PSBkZXB0aCkgbG9nKExvZ0xldmVscy5EZWJ1ZywgYXJnc1swXSlcbiAgICBlbHNlIGxvZyhMb2dMZXZlbHMuRGVidWcsIC4uLmFyZ3MpXG4gIH1cblxuICBmdW5jdGlvbiBpbmZvKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgaWYgKExvZ0RlcHRoLk1pbmltYWwgPT09IGRlcHRoKSBsb2coTG9nTGV2ZWxzLkluZm8sIGFyZ3NbMF0pXG4gICAgZWxzZSBsb2coTG9nTGV2ZWxzLkluZm8sIC4uLmFyZ3MpXG4gIH1cblxuICBmdW5jdGlvbiB3YXJuKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgaWYgKExvZ0RlcHRoLk1pbmltYWwgPT09IGRlcHRoKSBsb2coTG9nTGV2ZWxzLldhcm4sIGFyZ3NbMF0pXG4gICAgZWxzZSBsb2coTG9nTGV2ZWxzLldhcm4sIC4uLmFyZ3MpXG4gIH1cblxuICBmdW5jdGlvbiBlcnJvciguLi5hcmdzOiBhbnlbXSkge1xuICAgIGlmIChMb2dEZXB0aC5NaW5pbWFsID09PSBkZXB0aCkgbG9nKExvZ0xldmVscy5FcnJvciwgYXJnc1swXSlcbiAgICBlbHNlIGxvZyhMb2dMZXZlbHMuRXJyb3IsIC4uLmFyZ3MpXG4gIH1cblxuICBmdW5jdGlvbiBmYXRhbCguLi5hcmdzOiBhbnlbXSkge1xuICAgIGlmIChMb2dEZXB0aC5NaW5pbWFsID09PSBkZXB0aCkgbG9nKExvZ0xldmVscy5GYXRhbCwgYXJnc1swXSlcbiAgICBlbHNlIGxvZyhMb2dMZXZlbHMuRmF0YWwsIC4uLmFyZ3MpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxvZyxcbiAgICBzZXREZXB0aCxcbiAgICBzZXRMZXZlbCxcbiAgICBkZWJ1ZyxcbiAgICBpbmZvLFxuICAgIHdhcm4sXG4gICAgZXJyb3IsXG4gICAgZmF0YWwsXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcih7IG5hbWU6ICdEaXNjb3JkZW5vJyB9KVxuZXhwb3J0IGRlZmF1bHQgbG9nZ2VyXG4iXSwibmFtZXMiOlsiYmdCcmlnaHRNYWdlbnRhIiwiYmxhY2siLCJib2xkIiwiY3lhbiIsImdyYXkiLCJpdGFsaWMiLCJyZWQiLCJ5ZWxsb3ciLCJMb2dMZXZlbHMiLCJMb2dEZXB0aCIsInByZWZpeGVzIiwiTWFwIiwibm9Db2xvciIsIm1zZyIsImNvbG9yRnVuY3Rpb25zIiwic3RyIiwiY3JlYXRlTG9nZ2VyIiwibG9nTGV2ZWwiLCJuYW1lIiwiZGVwdGgiLCJsb2ciLCJsZXZlbCIsImFyZ3MiLCJjb2xvciIsImdldCIsImRhdGUiLCJEYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiY29uc29sZSIsImRlYnVnIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsInNldExldmVsIiwic2V0RGVwdGgiLCJmYXRhbCIsImxvZ2dlciJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsZUFBZSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxNQUFNLFFBQVEsY0FBYTtBQUUzRixPQUFPLElBQUEsQUFBS0MsbUNBQUFBOzs7Ozs7V0FBQUE7TUFNWDtBQUVELE9BQU8sSUFBQSxBQUFLQyxrQ0FBQUE7OztXQUFBQTtNQUdYO0FBRUQsTUFBTUMsV0FBVyxJQUFJQyxJQUF1QjtJQUMxQzs7UUFBa0I7S0FBUTtJQUMxQjs7UUFBaUI7S0FBTztJQUN4Qjs7UUFBaUI7S0FBTztJQUN4Qjs7UUFBa0I7S0FBUTtJQUMxQjs7UUFBa0I7S0FBUTtDQUMzQjtBQUVELE1BQU1DLFVBQW1DLENBQUNDLE1BQVFBO0FBQ2xELE1BQU1DLGlCQUFpQixJQUFJSCxJQUF3QztJQUNqRTs7UUFBa0JQO0tBQUs7SUFDdkI7O1FBQWlCRDtLQUFLO0lBQ3RCOztRQUFpQkk7S0FBTztJQUN4Qjs7UUFBa0IsQ0FBQ1EsTUFBZ0JULElBQUlTO0tBQUs7SUFDNUM7O1FBQWtCLENBQUNBLE1BQWdCVCxJQUFJSixLQUFLRyxPQUFPVTtLQUFPO0NBQzNEO0FBRUQsT0FBTyxTQUFTQyxhQUFhLEVBQzNCQyxZQUF5QixFQUN6QkMsSUFBSSxFQUlMLEdBQUcsQ0FBQyxDQUFDO0lBQ0osSUFBSUM7SUFFSixTQUFTQyxJQUFJQyxLQUFnQixFQUFFLEdBQUdDLElBQVc7UUFDM0MsSUFBSUQsUUFBUUosVUFBVTtRQUV0QixJQUFJTSxRQUFRVCxlQUFlVSxHQUFHLENBQUNIO1FBQy9CLElBQUksQ0FBQ0UsT0FBT0EsUUFBUVg7UUFFcEIsTUFBTWEsT0FBTyxJQUFJQztRQUNqQixNQUFNTixPQUFNO1lBQ1ZwQixnQkFBZ0JDLE1BQU0sQ0FBQyxDQUFDLEVBQUV3QixLQUFLRSxrQkFBa0IsR0FBRyxDQUFDLEVBQUVGLEtBQUtHLGtCQUFrQixHQUFHLENBQUMsQ0FBQztZQUNuRkwsTUFBTWIsU0FBU2MsR0FBRyxDQUFDSCxVQUFVO1lBQzdCSCxPQUFPLEdBQUdBLEtBQUssRUFBRSxDQUFDLEdBQUc7ZUFDbEJJO1NBQ0o7UUFFRCxPQUFRRDtZQUNOO2dCQUNFLE9BQU9RLFFBQVFDLEtBQUssSUFBSVY7WUFDMUI7Z0JBQ0UsT0FBT1MsUUFBUUUsSUFBSSxJQUFJWDtZQUN6QjtnQkFDRSxPQUFPUyxRQUFRRyxJQUFJLElBQUlaO1lBQ3pCO2dCQUNFLE9BQU9TLFFBQVFJLEtBQUssSUFBSWI7WUFDMUI7Z0JBQ0UsT0FBT1MsUUFBUUksS0FBSyxJQUFJYjtZQUMxQjtnQkFDRSxPQUFPUyxRQUFRVCxHQUFHLElBQUlBO1FBQzFCO0lBQ0Y7SUFFQSxTQUFTYyxTQUFTYixLQUFnQjtRQUNoQ0osV0FBV0k7SUFDYjtJQUVBLFNBQVNjLFNBQVNkLEtBQWU7UUFDL0JGLFFBQVFFO0lBQ1Y7SUFFQSxTQUFTUyxNQUFNLEdBQUdSLElBQVc7UUFDM0IsSUFBSWIsTUFBcUJVLE9BQU9DLE9BQXFCRSxJQUFJLENBQUMsRUFBRTthQUN2REYsVUFBd0JFO0lBQy9CO0lBRUEsU0FBU1MsS0FBSyxHQUFHVCxJQUFXO1FBQzFCLElBQUliLE1BQXFCVSxPQUFPQyxPQUFvQkUsSUFBSSxDQUFDLEVBQUU7YUFDdERGLFVBQXVCRTtJQUM5QjtJQUVBLFNBQVNVLEtBQUssR0FBR1YsSUFBVztRQUMxQixJQUFJYixNQUFxQlUsT0FBT0MsT0FBb0JFLElBQUksQ0FBQyxFQUFFO2FBQ3RERixVQUF1QkU7SUFDOUI7SUFFQSxTQUFTVyxNQUFNLEdBQUdYLElBQVc7UUFDM0IsSUFBSWIsTUFBcUJVLE9BQU9DLE9BQXFCRSxJQUFJLENBQUMsRUFBRTthQUN2REYsVUFBd0JFO0lBQy9CO0lBRUEsU0FBU2MsTUFBTSxHQUFHZCxJQUFXO1FBQzNCLElBQUliLE1BQXFCVSxPQUFPQyxPQUFxQkUsSUFBSSxDQUFDLEVBQUU7YUFDdkRGLFVBQXdCRTtJQUMvQjtJQUVBLE9BQU87UUFDTEY7UUFDQWU7UUFDQUQ7UUFDQUo7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUc7SUFDRjtBQUNGO0FBRUEsT0FBTyxNQUFNQyxTQUFTckIsYUFBYTtJQUFFRSxNQUFNO0FBQWEsR0FBRTtBQUMxRCxlQUFlbUIsT0FBTSJ9