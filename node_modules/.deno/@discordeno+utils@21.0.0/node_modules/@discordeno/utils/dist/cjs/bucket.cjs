"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LeakyBucket", {
    enumerable: true,
    get: function() {
        return LeakyBucket;
    }
});
const _logger = /*#__PURE__*/ _interop_require_default(require("./logger.cjs"));
const _utils = require("./utils.cjs");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let LeakyBucket = class LeakyBucket {
    constructor(options){
        /** The amount of requests that have been used up already. */ this.used = 0;
        /** The queue of requests to acquire an available request. Mapped by <shardId, resolve()> */ this.queue = [];
        /** Whether or not the queue is already processing. */ this.processing = false;
        this.max = options?.max ?? 1;
        this.refillAmount = options?.refillAmount ? options.refillAmount > this.max ? this.max : options.refillAmount : 1;
        this.refillInterval = options?.refillInterval ?? 5000;
        this.logger = options?.logger ?? _logger.default;
    }
    /** The amount of requests that still remain. */ get remaining() {
        return this.max < this.used ? 0 : this.max - this.used;
    }
    /** Refills the bucket as needed. */ refillBucket() {
        this.logger.debug(`[LeakyBucket] Timeout for leaky bucket requests executed. Refilling bucket.`);
        // Lower the used amount by the refill amount
        this.used = this.refillAmount > this.used ? 0 : this.used - this.refillAmount;
        // Reset the refillsAt timestamp since it just got refilled
        this.refillsAt = undefined;
        // Reset the timeoutId
        clearTimeout(this.timeoutId);
        this.timeoutId = undefined;
        if (this.used > 0) {
            this.timeoutId = setTimeout(()=>{
                this.refillBucket();
            }, this.refillInterval);
            this.refillsAt = Date.now() + this.refillInterval;
        }
    }
    /** Begin processing the queue. */ async processQueue() {
        this.logger.debug('[LeakyBucket] Processing queue');
        // There is already a queue that is processing
        if (this.processing) return this.logger.debug('[LeakyBucket] Queue is already processing.');
        this.processing = true;
        // Begin going through the queue.
        while(this.queue.length){
            if (this.remaining) {
                this.logger.debug(`[LeakyBucket] Processing queue. Remaining: ${this.remaining} Length: ${this.queue.length}`);
                // Resolves the promise allowing the paused execution of this request to resolve and continue.
                this.queue.shift()?.();
                // A request can be made
                this.used++;
                // Create a new timeout for this request if none exists.
                if (!this.timeoutId) {
                    this.logger.debug(`[LeakyBucket] Creating new timeout for leaky bucket requests.`);
                    this.timeoutId = setTimeout(()=>{
                        this.refillBucket();
                    }, this.refillInterval);
                    // Set the time for when this refill will occur.
                    this.refillsAt = Date.now() + this.refillInterval;
                }
            } else if (this.refillsAt) {
                const now = Date.now();
                // If there is time left until next refill, just delay execution.
                if (this.refillsAt > now) {
                    this.logger.debug(`[LeakyBucket] Delaying execution of leaky bucket requests for ${this.refillsAt - now}ms`);
                    await (0, _utils.delay)(this.refillsAt - now);
                    this.logger.debug(`[LeakyBucket] Resuming execution`);
                } else {
                    this.logger.debug(`[LeakyBucket] Delaying execution of leaky bucket requests for 1000ms`);
                    await (0, _utils.delay)(1000);
                }
            }
        }
        // Loop has ended mark false so it can restart later when needed
        this.processing = false;
    }
    /** Pauses the execution until the request is available to be made. */ async acquire(highPriority) {
        return await new Promise((resolve)=>{
            // High priority requests get added to the start of the queue
            if (highPriority) this.queue.unshift(resolve);
            else this.queue.push(resolve);
            // Each request should trigger the queue to be processed.
            void this.processQueue();
        });
    }
};

//# sourceMappingURL=data:application/json;base64,