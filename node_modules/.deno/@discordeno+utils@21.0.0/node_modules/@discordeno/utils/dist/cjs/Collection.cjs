"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Collection", {
    enumerable: true,
    get: function() {
        return Collection;
    }
});
let Collection = class Collection extends Map {
    constructor(entries, options){
        super(entries ?? []);
        this.maxSize = options?.maxSize;
        if (!options?.sweeper) return;
        this.startSweeper(options.sweeper);
    }
    startSweeper(options) {
        if (this.sweeper?.intervalId) clearInterval(this.sweeper.intervalId);
        this.sweeper = options;
        this.sweeper.intervalId = setInterval(()=>{
            this.forEach((value, key)=>{
                if (!this.sweeper?.filter(value, key, options.bot)) return;
                this.delete(key);
                return key;
            });
        }, options.interval);
        return this.sweeper.intervalId;
    }
    stopSweeper() {
        return clearInterval(this.sweeper?.intervalId);
    }
    changeSweeperInterval(newInterval) {
        if (this.sweeper == null) return;
        this.startSweeper({
            filter: this.sweeper.filter,
            interval: newInterval
        });
    }
    changeSweeperFilter(newFilter) {
        if (this.sweeper == null) return;
        this.startSweeper({
            filter: newFilter,
            interval: this.sweeper.interval
        });
    }
    /** Add an item to the collection. Makes sure not to go above the maxSize. */ set(key, value) {
        // When this collection is maxSized make sure we can add first
        if ((this.maxSize !== undefined || this.maxSize === 0) && this.size >= this.maxSize) {
            return this;
        }
        return super.set(key, value);
    }
    /** Add an item to the collection, no matter what the maxSize is. */ forceSet(key, value) {
        return super.set(key, value);
    }
    /** Convert the collection to an array. */ array() {
        return [
            ...this.values()
        ];
    }
    /** Retrieve the value of the first element in this collection. */ first() {
        return this.values().next().value;
    }
    /** Retrieve the value of the last element in this collection. */ last() {
        return [
            ...this.values()
        ][this.size - 1];
    }
    /** Retrieve the value of a random element in this collection. */ random() {
        const array = [
            ...this.values()
        ];
        return array[Math.floor(Math.random() * array.length)];
    }
    /** Find a specific element in this collection. */ find(callback) {
        for (const key of this.keys()){
            const value = this.get(key);
            if (callback(value, key)) return value;
        }
    // If nothing matched
    }
    /** Find all elements in this collection that match the given pattern. */ filter(callback) {
        const relevant = new Collection();
        this.forEach((value, key)=>{
            if (callback(value, key)) relevant.set(key, value);
        });
        return relevant;
    }
    /** Converts the collection into an array by running a callback on all items in the collection. */ map(callback) {
        const results = [];
        for (const key of this.keys()){
            const value = this.get(key);
            results.push(callback(value, key));
        }
        return results;
    }
    /** Check if one of the items in the collection matches the pattern. */ some(callback) {
        for (const key of this.keys()){
            const value = this.get(key);
            if (callback(value, key)) return true;
        }
        return false;
    }
    /** Check if all of the items in the collection matches the pattern. */ every(callback) {
        for (const key of this.keys()){
            const value = this.get(key);
            if (!callback(value, key)) return false;
        }
        return true;
    }
    /** Runs a callback on all items in the collection, merging them into a single value. */ reduce(callback, initialValue) {
        let accumulator = initialValue;
        for (const key of this.keys()){
            const value = this.get(key);
            accumulator = callback(accumulator, value, key);
        }
        return accumulator;
    }
};

//# sourceMappingURL=data:application/json;base64,