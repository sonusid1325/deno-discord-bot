export var PresenceStatus = /*#__PURE__*/ function(PresenceStatus) {
    PresenceStatus[PresenceStatus["online"] = 0] = "online";
    PresenceStatus[PresenceStatus["dnd"] = 1] = "dnd";
    PresenceStatus[PresenceStatus["idle"] = 2] = "idle";
    PresenceStatus[PresenceStatus["offline"] = 3] = "offline";
    return PresenceStatus;
}({});
/** https://discord.com/developers/docs/resources/user#user-object-premium-types */ export var PremiumTypes = /*#__PURE__*/ function(PremiumTypes) {
    PremiumTypes[PremiumTypes["None"] = 0] = "None";
    PremiumTypes[PremiumTypes["NitroClassic"] = 1] = "NitroClassic";
    PremiumTypes[PremiumTypes["Nitro"] = 2] = "Nitro";
    PremiumTypes[PremiumTypes["NitroBasic"] = 3] = "NitroBasic";
    return PremiumTypes;
}({});
/** https://discord.com/developers/docs/resources/user#user-object-user-flags */ export var UserFlags = /*#__PURE__*/ function(UserFlags) {
    UserFlags[UserFlags["DiscordEmployee"] = 1] = "DiscordEmployee";
    UserFlags[UserFlags["PartneredServerOwner"] = 2] = "PartneredServerOwner";
    UserFlags[UserFlags["HypeSquadEventsMember"] = 4] = "HypeSquadEventsMember";
    UserFlags[UserFlags["BugHunterLevel1"] = 8] = "BugHunterLevel1";
    UserFlags[UserFlags["HouseBravery"] = 64] = "HouseBravery";
    UserFlags[UserFlags["HouseBrilliance"] = 128] = "HouseBrilliance";
    UserFlags[UserFlags["HouseBalance"] = 256] = "HouseBalance";
    UserFlags[UserFlags["EarlySupporter"] = 512] = "EarlySupporter";
    UserFlags[UserFlags["TeamUser"] = 1024] = "TeamUser";
    UserFlags[UserFlags["BugHunterLevel2"] = 16384] = "BugHunterLevel2";
    UserFlags[UserFlags["VerifiedBot"] = 65536] = "VerifiedBot";
    UserFlags[UserFlags["EarlyVerifiedBotDeveloper"] = 131072] = "EarlyVerifiedBotDeveloper";
    UserFlags[UserFlags["DiscordCertifiedModerator"] = 262144] = "DiscordCertifiedModerator";
    UserFlags[UserFlags["BotHttpInteractions"] = 524288] = "BotHttpInteractions";
    UserFlags[UserFlags["ActiveDeveloper"] = 4194304] = "ActiveDeveloper";
    return UserFlags;
}({});
export var MemberFlags = /*#__PURE__*/ function(MemberFlags) {
    /**
   * Member has left and rejoined the guild
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[MemberFlags["DidRejoin"] = 1] = "DidRejoin";
    /**
   * Member has completed onboarding
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[MemberFlags["CompletedOnboarding"] = 2] = "CompletedOnboarding";
    /** Member is exempt from guild verification requirements */ MemberFlags[MemberFlags["BypassesVerification"] = 4] = "BypassesVerification";
    /**
   * Member has started onboarding
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[MemberFlags["StartedOnboarding"] = 8] = "StartedOnboarding";
    /**
   * Member is a guest and can only access the voice channel they were invited to
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[MemberFlags["IsGuest"] = 16] = "IsGuest";
    /**
   * Member has started Server Guide new member actions
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[MemberFlags["StartedHomeActions"] = 32] = "StartedHomeActions";
    /**
   * Member has completed Server Guide new member actions
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[MemberFlags["CompletedHomeActions"] = 64] = "CompletedHomeActions";
    /**
   * Member's username, display name, or nickname is blocked by AutoMod
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[MemberFlags["AutomodQuarantinedUsername"] = 128] = "AutomodQuarantinedUsername";
    /**
   * Member has dismissed the DM settings upsell
   *
   * @remarks
   * This value is not editable
   */ MemberFlags[MemberFlags["DmSettingsUpsellAcknowledged"] = 512] = "DmSettingsUpsellAcknowledged";
    return MemberFlags;
}({});
/** https://discord.com/developers/docs/resources/channel#channels-resource */ export var ChannelFlags = /*#__PURE__*/ function(ChannelFlags) {
    ChannelFlags[ChannelFlags["None"] = 0] = "None";
    /** this thread is pinned to the top of its parent `GUILD_FORUM` channel */ ChannelFlags[ChannelFlags["Pinned"] = 2] = "Pinned";
    /** Whether a tag is required to be specified when creating a thread in a `GUILD_FORUM` or a GUILD_MEDIA channel. Tags are specified in the `applied_tags` field. */ ChannelFlags[ChannelFlags["RequireTag"] = 16] = "RequireTag";
    /** When set hides the embedded media download options. Available only for media channels. */ ChannelFlags[ChannelFlags["HideMediaDownloadOptions"] = 32768] = "HideMediaDownloadOptions";
    return ChannelFlags;
}({});
/** https://discord.com/developers/docs/topics/permissions#role-object-role-flags */ export var RoleFlags = /*#__PURE__*/ function(RoleFlags) {
    RoleFlags[RoleFlags["None"] = 0] = "None";
    /** Role can be selected by members in an onboarding prompt */ RoleFlags[RoleFlags["InPrompt"] = 1] = "InPrompt";
    return RoleFlags;
}({});
export var AttachmentFlags = /*#__PURE__*/ function(AttachmentFlags) {
    AttachmentFlags[AttachmentFlags["None"] = 0] = "None";
    /** This attachment has been edited using the remix feature on mobile */ AttachmentFlags[AttachmentFlags["IsRemix"] = 4] = "IsRemix";
    return AttachmentFlags;
}({});
/** https://discord.com/developers/docs/monetization/skus#sku-object-sku-flags */ export var SkuFlags = /*#__PURE__*/ function(SkuFlags) {
    /** SKU is available for purchase */ SkuFlags[SkuFlags["Available"] = 4] = "Available";
    /** Recurring SKU that can be purchased by a user and applied to a single server. Grants access to every user in that server. */ SkuFlags[SkuFlags["GuildSubscription"] = 128] = "GuildSubscription";
    /** Recurring SKU purchased by a user for themselves. Grants access to the purchasing user in every server. */ SkuFlags[SkuFlags["UserSubscription"] = 256] = "UserSubscription";
    return SkuFlags;
}({});
/** https://discord.com/developers/docs/resources/channel#message-object-message-flags */ export var MessageFlags = /*#__PURE__*/ function(MessageFlags) {
    /** This message has been published to subscribed channels (via Channel Following) */ MessageFlags[MessageFlags["Crossposted"] = 1] = "Crossposted";
    /** This message originated from a message in another channel (via Channel Following) */ MessageFlags[MessageFlags["IsCrosspost"] = 2] = "IsCrosspost";
    /** Do not include any embeds when serializing this message */ MessageFlags[MessageFlags["SuppressEmbeds"] = 4] = "SuppressEmbeds";
    /** The source message for this crosspost has been deleted (via Channel Following) */ MessageFlags[MessageFlags["SourceMessageDeleted"] = 8] = "SourceMessageDeleted";
    /** This message came from the urgent message system */ MessageFlags[MessageFlags["Urgent"] = 16] = "Urgent";
    /** This message has an associated thread, with the same id as the message */ MessageFlags[MessageFlags["HasThread"] = 32] = "HasThread";
    /** This message is only visible to the user who invoked the Interaction */ MessageFlags[MessageFlags["Ephemeral"] = 64] = "Ephemeral";
    /** This message is an Interaction Response and the bot is "thinking" */ MessageFlags[MessageFlags["Loading"] = 128] = "Loading";
    /** This message failed to mention some roles and add their members to the thread */ MessageFlags[MessageFlags["FailedToMentionSomeRolesInThread"] = 256] = "FailedToMentionSomeRolesInThread";
    /** This message will not trigger push and desktop notifications */ MessageFlags[MessageFlags["SuppressNotifications"] = 4096] = "SuppressNotifications";
    /** This message is a voice message */ MessageFlags[MessageFlags["IsVoiceMessage"] = 8192] = "IsVoiceMessage";
    return MessageFlags;
}({});
/** https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-flags */ export var ActivityFlags = /*#__PURE__*/ function(ActivityFlags) {
    ActivityFlags[ActivityFlags["Instance"] = 1] = "Instance";
    ActivityFlags[ActivityFlags["Join"] = 2] = "Join";
    ActivityFlags[ActivityFlags["Spectate"] = 4] = "Spectate";
    ActivityFlags[ActivityFlags["JoinRequest"] = 8] = "JoinRequest";
    ActivityFlags[ActivityFlags["Sync"] = 16] = "Sync";
    ActivityFlags[ActivityFlags["Play"] = 32] = "Play";
    ActivityFlags[ActivityFlags["PartyPrivacyFriends"] = 64] = "PartyPrivacyFriends";
    ActivityFlags[ActivityFlags["PartyPrivacyVoiceChannel"] = 128] = "PartyPrivacyVoiceChannel";
    ActivityFlags[ActivityFlags["Embedded"] = 256] = "Embedded";
    return ActivityFlags;
}({});
/** https://discord.com/developers/docs/resources/guild#integration-object-integration-expire-behaviors */ export var IntegrationExpireBehaviors = /*#__PURE__*/ function(IntegrationExpireBehaviors) {
    IntegrationExpireBehaviors[IntegrationExpireBehaviors["RemoveRole"] = 0] = "RemoveRole";
    IntegrationExpireBehaviors[IntegrationExpireBehaviors["Kick"] = 1] = "Kick";
    return IntegrationExpireBehaviors;
}({});
/** https://discord.com/developers/docs/topics/teams#data-models-membership-state-enum */ export var TeamMembershipStates = /*#__PURE__*/ function(TeamMembershipStates) {
    TeamMembershipStates[TeamMembershipStates["Invited"] = 1] = "Invited";
    TeamMembershipStates[TeamMembershipStates["Accepted"] = 2] = "Accepted";
    return TeamMembershipStates;
}({});
/** https://discord.com/developers/docs/topics/oauth2#application-application-flags */ export var ApplicationFlags = /*#__PURE__*/ function(ApplicationFlags) {
    /** Indicates if an app uses the Auto Moderation API. */ ApplicationFlags[ApplicationFlags["ApplicationAutoModerationRuleCreateBadge"] = 64] = "ApplicationAutoModerationRuleCreateBadge";
    /** Intent required for bots in **100 or more servers** to receive 'presence_update' events */ ApplicationFlags[ApplicationFlags["GatewayPresence"] = 4096] = "GatewayPresence";
    /** Intent required for bots in under 100 servers to receive 'presence_update' events */ ApplicationFlags[ApplicationFlags["GatewayPresenceLimited"] = 8192] = "GatewayPresenceLimited";
    /** Intent required for bots in **100 or more servers** to receive member-related events like 'guild_member_add'. */ ApplicationFlags[ApplicationFlags["GatewayGuildMembers"] = 16384] = "GatewayGuildMembers";
    /** Intent required for bots in under 100 servers to receive member-related events like 'guild_member_add'.  */ ApplicationFlags[ApplicationFlags["GatewayGuildMembersLimited"] = 32768] = "GatewayGuildMembersLimited";
    /** Indicates unusual growth of an app that prevents verification */ ApplicationFlags[ApplicationFlags["VerificationPendingGuildLimit"] = 65536] = "VerificationPendingGuildLimit";
    /** Indicates if an app is embedded within the Discord client (currently unavailable publicly) */ ApplicationFlags[ApplicationFlags["Embedded"] = 131072] = "Embedded";
    /** Intent required for bots in **100 or more servers** to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055) */ ApplicationFlags[ApplicationFlags["GatewayMessageContent"] = 262144] = "GatewayMessageContent";
    /** Intent required for bots in under 100 servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055), found in Bot Settings */ ApplicationFlags[ApplicationFlags["GatewayMessageContentLimited"] = 524288] = "GatewayMessageContentLimited";
    /** Indicates if an app has registered global application commands */ ApplicationFlags[ApplicationFlags["ApplicationCommandBadge"] = 8388608] = "ApplicationCommandBadge";
    return ApplicationFlags;
}({});
/** https://discord.com/developers/docs/interactions/message-components#component-types */ export var MessageComponentTypes = /*#__PURE__*/ function(MessageComponentTypes) {
    /** A container for other components */ MessageComponentTypes[MessageComponentTypes["ActionRow"] = 1] = "ActionRow";
    /** A button object */ MessageComponentTypes[MessageComponentTypes["Button"] = 2] = "Button";
    /** A select menu for picking from choices */ MessageComponentTypes[MessageComponentTypes["SelectMenu"] = 3] = "SelectMenu";
    /** A text input object */ MessageComponentTypes[MessageComponentTypes["InputText"] = 4] = "InputText";
    /** Select menu for users */ MessageComponentTypes[MessageComponentTypes["SelectMenuUsers"] = 5] = "SelectMenuUsers";
    /** Select menu for roles */ MessageComponentTypes[MessageComponentTypes["SelectMenuRoles"] = 6] = "SelectMenuRoles";
    /** Select menu for users and roles */ MessageComponentTypes[MessageComponentTypes["SelectMenuUsersAndRoles"] = 7] = "SelectMenuUsersAndRoles";
    /** Select menu for channels */ MessageComponentTypes[MessageComponentTypes["SelectMenuChannels"] = 8] = "SelectMenuChannels";
    return MessageComponentTypes;
}({});
export var TextStyles = /*#__PURE__*/ function(TextStyles) {
    /** Intended for short single-line text */ TextStyles[TextStyles["Short"] = 1] = "Short";
    /** Intended for much longer inputs */ TextStyles[TextStyles["Paragraph"] = 2] = "Paragraph";
    return TextStyles;
}({});
/** https://discord.com/developers/docs/interactions/message-components#buttons-button-styles */ export var ButtonStyles = /*#__PURE__*/ function(ButtonStyles) {
    /** A blurple button */ ButtonStyles[ButtonStyles["Primary"] = 1] = "Primary";
    /** A grey button */ ButtonStyles[ButtonStyles["Secondary"] = 2] = "Secondary";
    /** A green button */ ButtonStyles[ButtonStyles["Success"] = 3] = "Success";
    /** A red button */ ButtonStyles[ButtonStyles["Danger"] = 4] = "Danger";
    /** A button that navigates to a URL */ ButtonStyles[ButtonStyles["Link"] = 5] = "Link";
    /** A blurple button to show a Premium item in the shop */ ButtonStyles[ButtonStyles["Premium"] = 6] = "Premium";
    return ButtonStyles;
}({});
/** https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types */ export var AllowedMentionsTypes = /*#__PURE__*/ function(AllowedMentionsTypes) {
    /** Controls role mentions */ AllowedMentionsTypes["RoleMentions"] = "roles";
    /** Controls user mentions */ AllowedMentionsTypes["UserMentions"] = "users";
    /** Controls \@everyone and \@here mentions */ AllowedMentionsTypes["EveryoneMentions"] = "everyone";
    return AllowedMentionsTypes;
}({});
/** https://discord.com/developers/docs/resources/webhook#webhook-object-webhook-types */ export var WebhookTypes = /*#__PURE__*/ function(WebhookTypes) {
    /** Incoming Webhooks can post messages to channels with a generated token */ WebhookTypes[WebhookTypes["Incoming"] = 1] = "Incoming";
    /** Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels */ WebhookTypes[WebhookTypes["ChannelFollower"] = 2] = "ChannelFollower";
    /** Application webhooks are webhooks used with Interactions */ WebhookTypes[WebhookTypes["Application"] = 3] = "Application";
    return WebhookTypes;
}({});
/** https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level */ export var DefaultMessageNotificationLevels = /*#__PURE__*/ function(DefaultMessageNotificationLevels) {
    /** Members will receive notifications for all messages by default */ DefaultMessageNotificationLevels[DefaultMessageNotificationLevels["AllMessages"] = 0] = "AllMessages";
    /** Members will receive notifications only for messages that \@mention them by default */ DefaultMessageNotificationLevels[DefaultMessageNotificationLevels["OnlyMentions"] = 1] = "OnlyMentions";
    return DefaultMessageNotificationLevels;
}({});
/** https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level */ export var ExplicitContentFilterLevels = /*#__PURE__*/ function(ExplicitContentFilterLevels) {
    /** Media content will not be scanned */ ExplicitContentFilterLevels[ExplicitContentFilterLevels["Disabled"] = 0] = "Disabled";
    /** Media content sent by members without roles will be scanned */ ExplicitContentFilterLevels[ExplicitContentFilterLevels["MembersWithoutRoles"] = 1] = "MembersWithoutRoles";
    /** Media content sent by all members will be scanned */ ExplicitContentFilterLevels[ExplicitContentFilterLevels["AllMembers"] = 2] = "AllMembers";
    return ExplicitContentFilterLevels;
}({});
/** https://discord.com/developers/docs/resources/guild#guild-object-verification-level */ export var VerificationLevels = /*#__PURE__*/ function(VerificationLevels) {
    /** Unrestricted */ VerificationLevels[VerificationLevels["None"] = 0] = "None";
    /** Must have verified email on account */ VerificationLevels[VerificationLevels["Low"] = 1] = "Low";
    /** Must be registered on Discord for longer than 5 minutes */ VerificationLevels[VerificationLevels["Medium"] = 2] = "Medium";
    /** Must be a member of the server for longer than 10 minutes */ VerificationLevels[VerificationLevels["High"] = 3] = "High";
    /** Must have a verified phone number */ VerificationLevels[VerificationLevels["VeryHigh"] = 4] = "VeryHigh";
    return VerificationLevels;
}({});
/** https://discord.com/developers/docs/resources/guild#guild-object-guild-features */ export var GuildFeatures = /*#__PURE__*/ function(GuildFeatures) {
    /** Guild has access to set an invite splash background */ GuildFeatures["InviteSplash"] = "INVITE_SPLASH";
    /** Guild has access to set 384 kbps bitrate in voice (previously VIP voice servers) */ GuildFeatures["VipRegions"] = "VIP_REGIONS";
    /** Guild has access to set a vanity URL */ GuildFeatures["VanityUrl"] = "VANITY_URL";
    /** Guild is verified */ GuildFeatures["Verified"] = "VERIFIED";
    /** Guild is partnered */ GuildFeatures["Partnered"] = "PARTNERED";
    /** Guild can enable welcome screen, Membership Screening, stage channels and discovery, and receives community updates */ GuildFeatures["Community"] = "COMMUNITY";
    /** Guild has enabled monetization. */ GuildFeatures["CreatorMonetizableProvisional"] = "CREATOR_MONETIZABLE_PROVISIONAL";
    /** Guild has enabled the role subscription promo page. */ GuildFeatures["CreatorStorePage"] = "CREATOR_STORE_PAGE";
    /** Guild has been set as a support server on the App Directory */ GuildFeatures["DeveloperSupportServer"] = "DEVELOPER_SUPPORT_SERVER";
    /** Guild has access to create news channels */ GuildFeatures["News"] = "NEWS";
    /** Guild is able to be discovered in the directory */ GuildFeatures["Discoverable"] = "DISCOVERABLE";
    /** Guild is able to be featured in the directory */ GuildFeatures["Featurable"] = "FEATURABLE";
    /** Guild has access to set an animated guild icon */ GuildFeatures["AnimatedIcon"] = "ANIMATED_ICON";
    /** Guild has access to set a guild banner image */ GuildFeatures["Banner"] = "BANNER";
    /** Guild has enabled the welcome screen */ GuildFeatures["WelcomeScreenEnabled"] = "WELCOME_SCREEN_ENABLED";
    /** Guild has enabled [Membership Screening](https://discord.com/developers/docs/resources/guild#membership-screening-object) */ GuildFeatures["MemberVerificationGateEnabled"] = "MEMBER_VERIFICATION_GATE_ENABLED";
    /** Guild has increased custom soundboard sound slots. */ GuildFeatures["MoreSoundboard"] = "MORE_SOUNDBOARD";
    /** Guild can be previewed before joining via Membership Screening or the directory */ GuildFeatures["PreviewEnabled"] = "PREVIEW_ENABLED";
    /** Guild has enabled ticketed events */ GuildFeatures["TicketedEventsEnabled"] = "TICKETED_EVENTS_ENABLED";
    /** Guild has increased custom sticker slots */ GuildFeatures["MoreStickers"] = "MORE_STICKERS";
    /** Guild is able to set role icons */ GuildFeatures["RoleIcons"] = "ROLE_ICONS";
    /** Guild has role subscriptions that can be purchased. */ GuildFeatures["RoleSubscriptionsAvailableForPurchase"] = "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE";
    /** Guild has enabled role subscriptions. */ GuildFeatures["RoleSubscriptionsEnabled"] = "ROLE_SUBSCRIPTIONS_ENABLED";
    /** Guild has created soundboard sounds. */ GuildFeatures["Soundboard"] = "SOUNDBOARD";
    /** Guild has set up auto moderation rules */ GuildFeatures["AutoModeration"] = "AUTO_MODERATION";
    /** Guild has paused invites, preventing new users from joining */ GuildFeatures["InvitesDisabled"] = "INVITES_DISABLED";
    /** Guild has access to set an animated guild banner image */ GuildFeatures["AnimatedBanner"] = "ANIMATED_BANNER";
    /** Guild has disabled alerts for join raids in the configured safety alerts channel */ GuildFeatures["RaidAlertsDisabled"] = "RAID_ALERTS_DISABLED";
    /** Guild is using the old permissions configuration behavior */ GuildFeatures["ApplicationCommandPermissionsV2"] = "APPLICATION_COMMAND_PERMISSIONS_V2";
    return GuildFeatures;
}({});
/** https://discord.com/developers/docs/resources/guild#guild-object-mfa-level */ export var MfaLevels = /*#__PURE__*/ function(MfaLevels) {
    /** Guild has no MFA/2FA requirement for moderation actions */ MfaLevels[MfaLevels["None"] = 0] = "None";
    /** Guild has a 2FA requirement for moderation actions */ MfaLevels[MfaLevels["Elevated"] = 1] = "Elevated";
    return MfaLevels;
}({});
/** https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags */ export var SystemChannelFlags = /*#__PURE__*/ function(SystemChannelFlags) {
    /** Suppress member join notifications */ SystemChannelFlags[SystemChannelFlags["SuppressJoinNotifications"] = 1] = "SuppressJoinNotifications";
    /** Suppress server boost notifications */ SystemChannelFlags[SystemChannelFlags["SuppressPremiumSubscriptions"] = 2] = "SuppressPremiumSubscriptions";
    /** Suppress server setup tips */ SystemChannelFlags[SystemChannelFlags["SuppressGuildReminderNotifications"] = 4] = "SuppressGuildReminderNotifications";
    /** Hide member join sticker reply buttons */ SystemChannelFlags[SystemChannelFlags["SuppressJoinNotificationReplies"] = 8] = "SuppressJoinNotificationReplies";
    return SystemChannelFlags;
}({});
/** https://discord.com/developers/docs/resources/guild#guild-object-premium-tier */ export var PremiumTiers = /*#__PURE__*/ function(PremiumTiers) {
    /** Guild has not unlocked any Server Boost perks */ PremiumTiers[PremiumTiers["None"] = 0] = "None";
    /** Guild has unlocked Server Boost level 1 perks */ PremiumTiers[PremiumTiers["Tier1"] = 1] = "Tier1";
    /** Guild has unlocked Server Boost level 2 perks */ PremiumTiers[PremiumTiers["Tier2"] = 2] = "Tier2";
    /** Guild has unlocked Server Boost level 3 perks */ PremiumTiers[PremiumTiers["Tier3"] = 3] = "Tier3";
    return PremiumTiers;
}({});
/** https://discord.com/developers/docs/resources/guild#guild-object-guild-nsfw-level */ export var GuildNsfwLevel = /*#__PURE__*/ function(GuildNsfwLevel) {
    GuildNsfwLevel[GuildNsfwLevel["Default"] = 0] = "Default";
    GuildNsfwLevel[GuildNsfwLevel["Explicit"] = 1] = "Explicit";
    GuildNsfwLevel[GuildNsfwLevel["Safe"] = 2] = "Safe";
    GuildNsfwLevel[GuildNsfwLevel["AgeRestricted"] = 3] = "AgeRestricted";
    return GuildNsfwLevel;
}({});
/** https://discord.com/developers/docs/resources/channel#channel-object-channel-types */ export var ChannelTypes = /*#__PURE__*/ function(ChannelTypes) {
    /** A text channel within a server */ ChannelTypes[ChannelTypes["GuildText"] = 0] = "GuildText";
    /** A direct message between users */ ChannelTypes[ChannelTypes["DM"] = 1] = "DM";
    /** A voice channel within a server */ ChannelTypes[ChannelTypes["GuildVoice"] = 2] = "GuildVoice";
    /** A direct message between multiple users */ ChannelTypes[ChannelTypes["GroupDm"] = 3] = "GroupDm";
    /** An organizational category that contains up to 50 channels */ ChannelTypes[ChannelTypes["GuildCategory"] = 4] = "GuildCategory";
    /** A channel that users can follow and crosspost into their own server */ ChannelTypes[ChannelTypes["GuildAnnouncement"] = 5] = "GuildAnnouncement";
    /** A temporary sub-channel within a GUILD_ANNOUNCEMENT channel */ ChannelTypes[ChannelTypes["AnnouncementThread"] = 10] = "AnnouncementThread";
    /** A temporary sub-channel within a GUILD_TEXT or GUILD_FORUM channel */ ChannelTypes[ChannelTypes["PublicThread"] = 11] = "PublicThread";
    /** A temporary sub-channel within a GUILD_TEXT channel that is only viewable by those invited and those with the MANAGE_THREADS permission */ ChannelTypes[ChannelTypes["PrivateThread"] = 12] = "PrivateThread";
    /** A voice channel for hosting events with an audience */ ChannelTypes[ChannelTypes["GuildStageVoice"] = 13] = "GuildStageVoice";
    /** A channel in a hub containing the listed servers */ ChannelTypes[ChannelTypes["GuildDirectory"] = 14] = "GuildDirectory";
    /** A channel which can only contains threads */ ChannelTypes[ChannelTypes["GuildForum"] = 15] = "GuildForum";
    /** Channel that can only contain threads, similar to GUILD_FORUM channels */ ChannelTypes[ChannelTypes["GuildMedia"] = 16] = "GuildMedia";
    return ChannelTypes;
}({});
export var OverwriteTypes = /*#__PURE__*/ function(OverwriteTypes) {
    OverwriteTypes[OverwriteTypes["Role"] = 0] = "Role";
    OverwriteTypes[OverwriteTypes["Member"] = 1] = "Member";
    return OverwriteTypes;
}({});
export var VideoQualityModes = /*#__PURE__*/ function(VideoQualityModes) {
    /** Discord chooses the quality for optimal performance */ VideoQualityModes[VideoQualityModes["Auto"] = 1] = "Auto";
    /** 720p */ VideoQualityModes[VideoQualityModes["Full"] = 2] = "Full";
    return VideoQualityModes;
}({});
/** https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-types */ export var ActivityTypes = /*#__PURE__*/ function(ActivityTypes) {
    ActivityTypes[ActivityTypes["Playing"] = 0] = "Playing";
    ActivityTypes[ActivityTypes["Streaming"] = 1] = "Streaming";
    ActivityTypes[ActivityTypes["Listening"] = 2] = "Listening";
    ActivityTypes[ActivityTypes["Watching"] = 3] = "Watching";
    ActivityTypes[ActivityTypes["Custom"] = 4] = "Custom";
    ActivityTypes[ActivityTypes["Competing"] = 5] = "Competing";
    return ActivityTypes;
}({});
/** https://discord.com/developers/docs/resources/channel#message-object-message-types */ export var MessageTypes = /*#__PURE__*/ function(MessageTypes) {
    MessageTypes[MessageTypes["Default"] = 0] = "Default";
    MessageTypes[MessageTypes["RecipientAdd"] = 1] = "RecipientAdd";
    MessageTypes[MessageTypes["RecipientRemove"] = 2] = "RecipientRemove";
    MessageTypes[MessageTypes["Call"] = 3] = "Call";
    MessageTypes[MessageTypes["ChannelNameChange"] = 4] = "ChannelNameChange";
    MessageTypes[MessageTypes["ChannelIconChange"] = 5] = "ChannelIconChange";
    MessageTypes[MessageTypes["ChannelPinnedMessage"] = 6] = "ChannelPinnedMessage";
    MessageTypes[MessageTypes["UserJoin"] = 7] = "UserJoin";
    MessageTypes[MessageTypes["GuildBoost"] = 8] = "GuildBoost";
    MessageTypes[MessageTypes["GuildBoostTier1"] = 9] = "GuildBoostTier1";
    MessageTypes[MessageTypes["GuildBoostTier2"] = 10] = "GuildBoostTier2";
    MessageTypes[MessageTypes["GuildBoostTier3"] = 11] = "GuildBoostTier3";
    MessageTypes[MessageTypes["ChannelFollowAdd"] = 12] = "ChannelFollowAdd";
    MessageTypes[MessageTypes["GuildDiscoveryDisqualified"] = 14] = "GuildDiscoveryDisqualified";
    MessageTypes[MessageTypes["GuildDiscoveryRequalified"] = 15] = "GuildDiscoveryRequalified";
    MessageTypes[MessageTypes["GuildDiscoveryGracePeriodInitialWarning"] = 16] = "GuildDiscoveryGracePeriodInitialWarning";
    MessageTypes[MessageTypes["GuildDiscoveryGracePeriodFinalWarning"] = 17] = "GuildDiscoveryGracePeriodFinalWarning";
    MessageTypes[MessageTypes["ThreadCreated"] = 18] = "ThreadCreated";
    MessageTypes[MessageTypes["Reply"] = 19] = "Reply";
    MessageTypes[MessageTypes["ChatInputCommand"] = 20] = "ChatInputCommand";
    MessageTypes[MessageTypes["ThreadStarterMessage"] = 21] = "ThreadStarterMessage";
    MessageTypes[MessageTypes["GuildInviteReminder"] = 22] = "GuildInviteReminder";
    MessageTypes[MessageTypes["ContextMenuCommand"] = 23] = "ContextMenuCommand";
    MessageTypes[MessageTypes["AutoModerationAction"] = 24] = "AutoModerationAction";
    MessageTypes[MessageTypes["RoleSubscriptionPurchase"] = 25] = "RoleSubscriptionPurchase";
    MessageTypes[MessageTypes["InteractionPremiumUpsell"] = 26] = "InteractionPremiumUpsell";
    MessageTypes[MessageTypes["StageStart"] = 27] = "StageStart";
    MessageTypes[MessageTypes["StageEnd"] = 28] = "StageEnd";
    MessageTypes[MessageTypes["StageSpeaker"] = 29] = "StageSpeaker";
    MessageTypes[MessageTypes["StageTopic"] = 31] = "StageTopic";
    MessageTypes[MessageTypes["GuildApplicationPremiumSubscription"] = 32] = "GuildApplicationPremiumSubscription";
    MessageTypes[MessageTypes["GuildIncidentAlertModeEnabled"] = 36] = "GuildIncidentAlertModeEnabled";
    MessageTypes[MessageTypes["GuildIncidentAlertModeDisabled"] = 37] = "GuildIncidentAlertModeDisabled";
    MessageTypes[MessageTypes["GuildIncidentReportRaid"] = 38] = "GuildIncidentReportRaid";
    MessageTypes[MessageTypes["GuildIncidentReportFalseAlarm"] = 39] = "GuildIncidentReportFalseAlarm";
    MessageTypes[MessageTypes["PurchaseNotification"] = 44] = "PurchaseNotification";
    MessageTypes[MessageTypes["PollResult"] = 46] = "PollResult";
    return MessageTypes;
}({});
/** https://discord.com/developers/docs/resources/channel#message-object-message-activity-types */ export var MessageActivityTypes = /*#__PURE__*/ function(MessageActivityTypes) {
    MessageActivityTypes[MessageActivityTypes["Join"] = 1] = "Join";
    MessageActivityTypes[MessageActivityTypes["Spectate"] = 2] = "Spectate";
    MessageActivityTypes[MessageActivityTypes["Listen"] = 3] = "Listen";
    MessageActivityTypes[MessageActivityTypes["JoinRequest"] = 5] = "JoinRequest";
    return MessageActivityTypes;
}({});
/** https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-types */ export var StickerTypes = /*#__PURE__*/ function(StickerTypes) {
    /** an official sticker in a pack */ StickerTypes[StickerTypes["Standard"] = 1] = "Standard";
    /** a sticker uploaded to a guild for the guild's members */ StickerTypes[StickerTypes["Guild"] = 2] = "Guild";
    return StickerTypes;
}({});
/** https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types */ export var StickerFormatTypes = /*#__PURE__*/ function(StickerFormatTypes) {
    StickerFormatTypes[StickerFormatTypes["Png"] = 1] = "Png";
    StickerFormatTypes[StickerFormatTypes["APng"] = 2] = "APng";
    StickerFormatTypes[StickerFormatTypes["Lottie"] = 3] = "Lottie";
    StickerFormatTypes[StickerFormatTypes["Gif"] = 4] = "Gif";
    return StickerFormatTypes;
}({});
/** https://discord.com/developers/docs/interactions/slash-commands#interaction-interactiontype */ export var InteractionTypes = /*#__PURE__*/ function(InteractionTypes) {
    InteractionTypes[InteractionTypes["Ping"] = 1] = "Ping";
    InteractionTypes[InteractionTypes["ApplicationCommand"] = 2] = "ApplicationCommand";
    InteractionTypes[InteractionTypes["MessageComponent"] = 3] = "MessageComponent";
    InteractionTypes[InteractionTypes["ApplicationCommandAutocomplete"] = 4] = "ApplicationCommandAutocomplete";
    InteractionTypes[InteractionTypes["ModalSubmit"] = 5] = "ModalSubmit";
    return InteractionTypes;
}({});
/** https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoptiontype */ export var ApplicationCommandOptionTypes = /*#__PURE__*/ function(ApplicationCommandOptionTypes) {
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["SubCommand"] = 1] = "SubCommand";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["SubCommandGroup"] = 2] = "SubCommandGroup";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["String"] = 3] = "String";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Integer"] = 4] = "Integer";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Boolean"] = 5] = "Boolean";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["User"] = 6] = "User";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Channel"] = 7] = "Channel";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Role"] = 8] = "Role";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Mentionable"] = 9] = "Mentionable";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Number"] = 10] = "Number";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Attachment"] = 11] = "Attachment";
    return ApplicationCommandOptionTypes;
}({});
/** https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events */ export var AuditLogEvents = /*#__PURE__*/ function(AuditLogEvents) {
    /** Server settings were updated */ AuditLogEvents[AuditLogEvents["GuildUpdate"] = 1] = "GuildUpdate";
    /** Channel was created */ AuditLogEvents[AuditLogEvents["ChannelCreate"] = 10] = "ChannelCreate";
    /** Channel settings were updated */ AuditLogEvents[AuditLogEvents["ChannelUpdate"] = 11] = "ChannelUpdate";
    /** Channel was deleted */ AuditLogEvents[AuditLogEvents["ChannelDelete"] = 12] = "ChannelDelete";
    /** Permission overwrite was added to a channel */ AuditLogEvents[AuditLogEvents["ChannelOverwriteCreate"] = 13] = "ChannelOverwriteCreate";
    /** Permission overwrite was updated for a channel */ AuditLogEvents[AuditLogEvents["ChannelOverwriteUpdate"] = 14] = "ChannelOverwriteUpdate";
    /** Permission overwrite was deleted from a channel */ AuditLogEvents[AuditLogEvents["ChannelOverwriteDelete"] = 15] = "ChannelOverwriteDelete";
    /** Member was removed from server */ AuditLogEvents[AuditLogEvents["MemberKick"] = 20] = "MemberKick";
    /** Members were pruned from server */ AuditLogEvents[AuditLogEvents["MemberPrune"] = 21] = "MemberPrune";
    /** Member was banned from server */ AuditLogEvents[AuditLogEvents["MemberBanAdd"] = 22] = "MemberBanAdd";
    /** Server ban was lifted for a member */ AuditLogEvents[AuditLogEvents["MemberBanRemove"] = 23] = "MemberBanRemove";
    /** Member was updated in server */ AuditLogEvents[AuditLogEvents["MemberUpdate"] = 24] = "MemberUpdate";
    /** Member was added or removed from a role */ AuditLogEvents[AuditLogEvents["MemberRoleUpdate"] = 25] = "MemberRoleUpdate";
    /** Member was moved to a different voice channel */ AuditLogEvents[AuditLogEvents["MemberMove"] = 26] = "MemberMove";
    /** Member was disconnected from a voice channel */ AuditLogEvents[AuditLogEvents["MemberDisconnect"] = 27] = "MemberDisconnect";
    /** Bot user was added to server */ AuditLogEvents[AuditLogEvents["BotAdd"] = 28] = "BotAdd";
    /** Role was created */ AuditLogEvents[AuditLogEvents["RoleCreate"] = 30] = "RoleCreate";
    /** Role was edited */ AuditLogEvents[AuditLogEvents["RoleUpdate"] = 31] = "RoleUpdate";
    /** Role was deleted */ AuditLogEvents[AuditLogEvents["RoleDelete"] = 32] = "RoleDelete";
    /** Server invite was created */ AuditLogEvents[AuditLogEvents["InviteCreate"] = 40] = "InviteCreate";
    /** Server invite was updated */ AuditLogEvents[AuditLogEvents["InviteUpdate"] = 41] = "InviteUpdate";
    /** Server invite was deleted */ AuditLogEvents[AuditLogEvents["InviteDelete"] = 42] = "InviteDelete";
    /** Webhook was created */ AuditLogEvents[AuditLogEvents["WebhookCreate"] = 50] = "WebhookCreate";
    /** Webhook properties or channel were updated */ AuditLogEvents[AuditLogEvents["WebhookUpdate"] = 51] = "WebhookUpdate";
    /** Webhook was deleted */ AuditLogEvents[AuditLogEvents["WebhookDelete"] = 52] = "WebhookDelete";
    /** Emoji was created */ AuditLogEvents[AuditLogEvents["EmojiCreate"] = 60] = "EmojiCreate";
    /** Emoji name was updated */ AuditLogEvents[AuditLogEvents["EmojiUpdate"] = 61] = "EmojiUpdate";
    /** Emoji was deleted */ AuditLogEvents[AuditLogEvents["EmojiDelete"] = 62] = "EmojiDelete";
    /** Single message was deleted */ AuditLogEvents[AuditLogEvents["MessageDelete"] = 72] = "MessageDelete";
    /** Multiple messages were deleted */ AuditLogEvents[AuditLogEvents["MessageBulkDelete"] = 73] = "MessageBulkDelete";
    /** Messaged was pinned to a channel */ AuditLogEvents[AuditLogEvents["MessagePin"] = 74] = "MessagePin";
    /** Message was unpinned from a channel */ AuditLogEvents[AuditLogEvents["MessageUnpin"] = 75] = "MessageUnpin";
    /** App was added to server */ AuditLogEvents[AuditLogEvents["IntegrationCreate"] = 80] = "IntegrationCreate";
    /** App was updated (as an example, its scopes were updated) */ AuditLogEvents[AuditLogEvents["IntegrationUpdate"] = 81] = "IntegrationUpdate";
    /** App was removed from server */ AuditLogEvents[AuditLogEvents["IntegrationDelete"] = 82] = "IntegrationDelete";
    /** Stage instance was created (stage channel becomes live) */ AuditLogEvents[AuditLogEvents["StageInstanceCreate"] = 83] = "StageInstanceCreate";
    /** Stage instace details were updated */ AuditLogEvents[AuditLogEvents["StageInstanceUpdate"] = 84] = "StageInstanceUpdate";
    /** Stage instance was deleted (stage channel no longer live) */ AuditLogEvents[AuditLogEvents["StageInstanceDelete"] = 85] = "StageInstanceDelete";
    /** Sticker was created */ AuditLogEvents[AuditLogEvents["StickerCreate"] = 90] = "StickerCreate";
    /** Sticker details were updated */ AuditLogEvents[AuditLogEvents["StickerUpdate"] = 91] = "StickerUpdate";
    /** Sticker was deleted */ AuditLogEvents[AuditLogEvents["StickerDelete"] = 92] = "StickerDelete";
    /** Event was created */ AuditLogEvents[AuditLogEvents["GuildScheduledEventCreate"] = 100] = "GuildScheduledEventCreate";
    /** Event was updated */ AuditLogEvents[AuditLogEvents["GuildScheduledEventUpdate"] = 101] = "GuildScheduledEventUpdate";
    /** Event was cancelled */ AuditLogEvents[AuditLogEvents["GuildScheduledEventDelete"] = 102] = "GuildScheduledEventDelete";
    /** Thread was created in a channel */ AuditLogEvents[AuditLogEvents["ThreadCreate"] = 110] = "ThreadCreate";
    /** Thread was updated */ AuditLogEvents[AuditLogEvents["ThreadUpdate"] = 111] = "ThreadUpdate";
    /** Thread was deleted */ AuditLogEvents[AuditLogEvents["ThreadDelete"] = 112] = "ThreadDelete";
    /** Permissions were updated for a command */ AuditLogEvents[AuditLogEvents["ApplicationCommandPermissionUpdate"] = 121] = "ApplicationCommandPermissionUpdate";
    /** Soundboard sound was created */ AuditLogEvents[AuditLogEvents["SoundboardSoundCreate"] = 130] = "SoundboardSoundCreate";
    /** Soundboard sound was updated */ AuditLogEvents[AuditLogEvents["SoundboardSoundUpdate"] = 131] = "SoundboardSoundUpdate";
    /** Soundboard sound was deleted */ AuditLogEvents[AuditLogEvents["SoundboardSoundDelete"] = 132] = "SoundboardSoundDelete";
    /** Auto moderation rule was created */ AuditLogEvents[AuditLogEvents["AutoModerationRuleCreate"] = 140] = "AutoModerationRuleCreate";
    /** Auto moderation rule was updated */ AuditLogEvents[AuditLogEvents["AutoModerationRuleUpdate"] = 141] = "AutoModerationRuleUpdate";
    /** Auto moderation rule was deleted */ AuditLogEvents[AuditLogEvents["AutoModerationRuleDelete"] = 142] = "AutoModerationRuleDelete";
    /** Message was blocked by AutoMod according to a rule. */ AuditLogEvents[AuditLogEvents["AutoModerationBlockMessage"] = 143] = "AutoModerationBlockMessage";
    /** Message was flagged by AutoMod */ AuditLogEvents[AuditLogEvents["AudoModerationFlagMessage"] = 144] = "AudoModerationFlagMessage";
    /** Member was timed out by AutoMod */ AuditLogEvents[AuditLogEvents["AutoModerationMemberTimedOut"] = 145] = "AutoModerationMemberTimedOut";
    /** Creator monetization request was created */ AuditLogEvents[AuditLogEvents["CreatorMonetizationRequestCreated"] = 150] = "CreatorMonetizationRequestCreated";
    /** Creator monetization terms were accepted */ AuditLogEvents[AuditLogEvents["CreatorMonetizationTermsAccepted"] = 151] = "CreatorMonetizationTermsAccepted";
    /** Guild Onboarding Question was created */ AuditLogEvents[AuditLogEvents["OnBoardingPromptCreate"] = 163] = "OnBoardingPromptCreate";
    /** Guild Onboarding Question was updated */ AuditLogEvents[AuditLogEvents["OnBoardingPromptUpdate"] = 164] = "OnBoardingPromptUpdate";
    /** Guild Onboarding Question was deleted */ AuditLogEvents[AuditLogEvents["OnBoardingPromptDelete"] = 165] = "OnBoardingPromptDelete";
    /** Guild Onboarding was created */ AuditLogEvents[AuditLogEvents["OnBoardingCreate"] = 166] = "OnBoardingCreate";
    /** Guild Onboarding was updated */ AuditLogEvents[AuditLogEvents["OnBoardingUpdate"] = 167] = "OnBoardingUpdate";
    /** Guild Server Guide was created */ AuditLogEvents[AuditLogEvents["HomeSettingsCreate"] = 190] = "HomeSettingsCreate";
    /** Guild Server Guide was updated */ AuditLogEvents[AuditLogEvents["HomeSettingsUpdate"] = 191] = "HomeSettingsUpdate";
    return AuditLogEvents;
}({});
export var ScheduledEventPrivacyLevel = /*#__PURE__*/ function(ScheduledEventPrivacyLevel) {
    /** the scheduled event is only accessible to guild members */ ScheduledEventPrivacyLevel[ScheduledEventPrivacyLevel["GuildOnly"] = 2] = "GuildOnly";
    return ScheduledEventPrivacyLevel;
}({});
export var ScheduledEventEntityType = /*#__PURE__*/ function(ScheduledEventEntityType) {
    ScheduledEventEntityType[ScheduledEventEntityType["StageInstance"] = 1] = "StageInstance";
    ScheduledEventEntityType[ScheduledEventEntityType["Voice"] = 2] = "Voice";
    ScheduledEventEntityType[ScheduledEventEntityType["External"] = 3] = "External";
    return ScheduledEventEntityType;
}({});
export var ScheduledEventStatus = /*#__PURE__*/ function(ScheduledEventStatus) {
    ScheduledEventStatus[ScheduledEventStatus["Scheduled"] = 1] = "Scheduled";
    ScheduledEventStatus[ScheduledEventStatus["Active"] = 2] = "Active";
    ScheduledEventStatus[ScheduledEventStatus["Completed"] = 3] = "Completed";
    ScheduledEventStatus[ScheduledEventStatus["Canceled"] = 4] = "Canceled";
    return ScheduledEventStatus;
}({});
/** https://discord.com/developers/docs/resources/invite#invite-object-target-user-types */ export var TargetTypes = /*#__PURE__*/ function(TargetTypes) {
    TargetTypes[TargetTypes["Stream"] = 1] = "Stream";
    TargetTypes[TargetTypes["EmbeddedApplication"] = 2] = "EmbeddedApplication";
    return TargetTypes;
}({});
export var ApplicationCommandTypes = /*#__PURE__*/ function(ApplicationCommandTypes) {
    /** A text-based command that shows up when a user types `/` */ ApplicationCommandTypes[ApplicationCommandTypes["ChatInput"] = 1] = "ChatInput";
    /** A UI-based command that shows up when you right click or tap on a user */ ApplicationCommandTypes[ApplicationCommandTypes["User"] = 2] = "User";
    /** A UI-based command that shows up when you right click or tap on a message */ ApplicationCommandTypes[ApplicationCommandTypes["Message"] = 3] = "Message";
    /** A UI-based command that represents the primary way to invoke an app's Activity */ ApplicationCommandTypes[ApplicationCommandTypes["PrimaryEntryPoint"] = 4] = "PrimaryEntryPoint";
    return ApplicationCommandTypes;
}({});
export var ApplicationCommandPermissionTypes = /*#__PURE__*/ function(ApplicationCommandPermissionTypes) {
    ApplicationCommandPermissionTypes[ApplicationCommandPermissionTypes["Role"] = 1] = "Role";
    ApplicationCommandPermissionTypes[ApplicationCommandPermissionTypes["User"] = 2] = "User";
    ApplicationCommandPermissionTypes[ApplicationCommandPermissionTypes["Channel"] = 3] = "Channel";
    return ApplicationCommandPermissionTypes;
}({});
/** https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags */ export const BitwisePermissionFlags = {
    /** Allows creation of instant invites */ CREATE_INSTANT_INVITE: 1n << 0n,
    /** Allows kicking members */ KICK_MEMBERS: 1n << 1n,
    /** Allows banning members */ BAN_MEMBERS: 1n << 2n,
    /** Allows all permissions and bypasses channel permission overwrites */ ADMINISTRATOR: 1n << 3n,
    /** Allows management and editing of channels */ MANAGE_CHANNELS: 1n << 4n,
    /** Allows management and editing of the guild */ MANAGE_GUILD: 1n << 5n,
    /** Allows for the addition of reactions to messages */ ADD_REACTIONS: 1n << 6n,
    /** Allows for viewing of audit logs */ VIEW_AUDIT_LOG: 1n << 7n,
    /** Allows for using priority speaker in a voice channel */ PRIORITY_SPEAKER: 1n << 8n,
    /** Allows the user to go live */ STREAM: 1n << 9n,
    /** Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels */ VIEW_CHANNEL: 1n << 10n,
    /** Allows for sending messages in a channel. (does not allow sending messages in threads) */ SEND_MESSAGES: 1n << 11n,
    /** Allows for sending of /tts messages */ SEND_TTS_MESSAGES: 1n << 12n,
    /** Allows for deletion of other users messages */ MANAGE_MESSAGES: 1n << 13n,
    /** Links sent by users with this permission will be auto-embedded */ EMBED_LINKS: 1n << 14n,
    /** Allows for uploading images and files */ ATTACH_FILES: 1n << 15n,
    /** Allows for reading of message history */ READ_MESSAGE_HISTORY: 1n << 16n,
    /** Allows for using the \@everyone tag to notify all users in a channel, and the \@here tag to notify all online users in a channel */ MENTION_EVERYONE: 1n << 17n,
    /** Allows the usage of custom emojis from other servers */ USE_EXTERNAL_EMOJIS: 1n << 18n,
    /** Allows for viewing guild insights */ VIEW_GUILD_INSIGHTS: 1n << 19n,
    /** Allows for joining of a voice channel */ CONNECT: 1n << 20n,
    /** Allows for speaking in a voice channel */ SPEAK: 1n << 21n,
    /** Allows for muting members in a voice channel */ MUTE_MEMBERS: 1n << 22n,
    /** Allows for deafening of members in a voice channel */ DEAFEN_MEMBERS: 1n << 23n,
    /** Allows for moving of members between voice channels */ MOVE_MEMBERS: 1n << 24n,
    /** Allows for using voice-activity-detection in a voice channel */ USE_VAD: 1n << 25n,
    /** Allows for modification of own nickname */ CHANGE_NICKNAME: 1n << 26n,
    /** Allows for modification of other users nicknames */ MANAGE_NICKNAMES: 1n << 27n,
    /** Allows management and editing of roles */ MANAGE_ROLES: 1n << 28n,
    /** Allows management and editing of webhooks */ MANAGE_WEBHOOKS: 1n << 29n,
    /** Allows for editing and deleting emojis, stickers, and soundboard sounds created by all users */ MANAGE_GUILD_EXPRESSIONS: 1n << 30n,
    /** Allows members to use application commands in text channels */ USE_SLASH_COMMANDS: 1n << 31n,
    /** Allows for requesting to speak in stage channels. */ REQUEST_TO_SPEAK: 1n << 32n,
    /** Allows for editing and deleting scheduled events created by all users */ MANAGE_EVENTS: 1n << 33n,
    /** Allows for deleting and archiving threads, and viewing all private threads */ MANAGE_THREADS: 1n << 34n,
    /** Allows for creating public and announcement threads */ CREATE_PUBLIC_THREADS: 1n << 35n,
    /** Allows for creating private threads */ CREATE_PRIVATE_THREADS: 1n << 36n,
    /** Allows the usage of custom stickers from other servers */ USE_EXTERNAL_STICKERS: 1n << 37n,
    /** Allows for sending messages in threads */ SEND_MESSAGES_IN_THREADS: 1n << 38n,
    /** Allows for launching activities (applications with the `EMBEDDED` flag) in a voice channel. */ USE_EMBEDDED_ACTIVITIES: 1n << 39n,
    /** Allows for timing out users to prevent them from sending or reacting to messages in chat and threads, and from speaking in voice and stage channels */ MODERATE_MEMBERS: 1n << 40n,
    /** Allows for viewing role subscription insights. */ VIEW_CREATOR_MONETIZATION_ANALYTICS: 1n << 41n,
    /** Allows for using soundboard in a voice channel. */ USE_SOUNDBOARD: 1n << 42n,
    /** Allows for creating emojis, stickers, and soundboard sounds, and editing and deleting those created by the current user */ CREATE_GUILD_EXPRESSIONS: 1n << 43n,
    /** Allows for creating scheduled events, and editing and deleting those created by the current user */ CREATE_EVENTS: 1n << 44n,
    /** Allows the usage of custom soundboards sounds from other servers */ USE_EXTERNAL_SOUNDS: 1n << 45n,
    /** Allows sending voice messages */ SEND_VOICE_MESSAGES: 1n << 46n,
    /** Allows sending polls */ SEND_POLLS: 1n << 49n,
    /** Allows user-installed apps to send public responses. When disabled, users will still be allowed to use their apps but the responses will be ephemeral. This only applies to apps not also installed to the server. */ USE_EXTERNAL_APPS: 1n << 50n
};
/** https://discord.com/developers/docs/topics/opcodes-and-status-codes#opcodes-and-status-codes */ export var GatewayCloseEventCodes = /*#__PURE__*/ function(GatewayCloseEventCodes) {
    /** A normal closure of the gateway. You may attempt to reconnect. */ GatewayCloseEventCodes[GatewayCloseEventCodes["NormalClosure"] = 1000] = "NormalClosure";
    /** We're not sure what went wrong. Try reconnecting? */ GatewayCloseEventCodes[GatewayCloseEventCodes["UnknownError"] = 4000] = "UnknownError";
    /** You sent an invalid [Gateway opcode](https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes) or an invalid payload for an opcode. Don't do that! */ GatewayCloseEventCodes[GatewayCloseEventCodes["UnknownOpcode"] = 4001] = "UnknownOpcode";
    /** You sent an invalid [payload](https://discord.com/developers/docs/topics/gateway#sending-payloads) to us. Don't do that! */ GatewayCloseEventCodes[GatewayCloseEventCodes["DecodeError"] = 4002] = "DecodeError";
    /** You sent us a payload prior to [identifying](https://discord.com/developers/docs/topics/gateway-events#identify), or this session has been invalidated. */ GatewayCloseEventCodes[GatewayCloseEventCodes["NotAuthenticated"] = 4003] = "NotAuthenticated";
    /** The account token sent with your [identify payload](https://discord.com/developers/docs/topics/gateway-events#identify) is incorrect. */ GatewayCloseEventCodes[GatewayCloseEventCodes["AuthenticationFailed"] = 4004] = "AuthenticationFailed";
    /** You sent more than one identify payload. Don't do that! */ GatewayCloseEventCodes[GatewayCloseEventCodes["AlreadyAuthenticated"] = 4005] = "AlreadyAuthenticated";
    /** The sequence sent when [resuming](https://discord.com/developers/docs/topics/gateway-events#resume) the session was invalid. Reconnect and start a new session. */ GatewayCloseEventCodes[GatewayCloseEventCodes["InvalidSeq"] = 4007] = "InvalidSeq";
    /** Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this. */ GatewayCloseEventCodes[GatewayCloseEventCodes["RateLimited"] = 4008] = "RateLimited";
    /** Your session timed out. Reconnect and start a new one. */ GatewayCloseEventCodes[GatewayCloseEventCodes["SessionTimedOut"] = 4009] = "SessionTimedOut";
    /** You sent us an invalid [shard when identifying](https://discord.com/developers/docs/topics/gateway#sharding). */ GatewayCloseEventCodes[GatewayCloseEventCodes["InvalidShard"] = 4010] = "InvalidShard";
    /** The session would have handled too many guilds - you are required to [shard](https://discord.com/developers/docs/topics/gateway#sharding) your connection in order to connect. */ GatewayCloseEventCodes[GatewayCloseEventCodes["ShardingRequired"] = 4011] = "ShardingRequired";
    /** You sent an invalid version for the gateway. */ GatewayCloseEventCodes[GatewayCloseEventCodes["InvalidApiVersion"] = 4012] = "InvalidApiVersion";
    /** You sent an invalid intent for a [Gateway Intent](https://discord.com/developers/docs/topics/gateway#gateway-intents). You may have incorrectly calculated the bitwise value. */ GatewayCloseEventCodes[GatewayCloseEventCodes["InvalidIntents"] = 4013] = "InvalidIntents";
    /** You sent a disallowed intent for a [Gateway Intent](https://discord.com/developers/docs/topics/gateway#gateway-intents). You may have tried to specify an intent that you [have not enabled or are not approved for](https://discord.com/developers/docs/topics/gateway#privileged-intents). */ GatewayCloseEventCodes[GatewayCloseEventCodes["DisallowedIntents"] = 4014] = "DisallowedIntents";
    return GatewayCloseEventCodes;
}({});
/** https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes */ export var GatewayOpcodes = /*#__PURE__*/ function(GatewayOpcodes) {
    /** An event was dispatched. */ GatewayOpcodes[GatewayOpcodes["Dispatch"] = 0] = "Dispatch";
    /** Fired periodically by the client to keep the connection alive. */ GatewayOpcodes[GatewayOpcodes["Heartbeat"] = 1] = "Heartbeat";
    /** Starts a new session during the initial handshake. */ GatewayOpcodes[GatewayOpcodes["Identify"] = 2] = "Identify";
    /** Update the client's presence. */ GatewayOpcodes[GatewayOpcodes["PresenceUpdate"] = 3] = "PresenceUpdate";
    /** Used to join/leave or move between voice channels. */ GatewayOpcodes[GatewayOpcodes["VoiceStateUpdate"] = 4] = "VoiceStateUpdate";
    /** Resume a previous session that was disconnected. */ GatewayOpcodes[GatewayOpcodes["Resume"] = 6] = "Resume";
    /** You should attempt to reconnect and resume immediately. */ GatewayOpcodes[GatewayOpcodes["Reconnect"] = 7] = "Reconnect";
    /** Request information about offline guild members in a large guild. */ GatewayOpcodes[GatewayOpcodes["RequestGuildMembers"] = 8] = "RequestGuildMembers";
    /** The session has been invalidated. You should reconnect and identify/resume accordingly. */ GatewayOpcodes[GatewayOpcodes["InvalidSession"] = 9] = "InvalidSession";
    /** Sent immediately after connecting, contains the `heartbeat_interval` to use. */ GatewayOpcodes[GatewayOpcodes["Hello"] = 10] = "Hello";
    /** Sent in response to receiving a heartbeat to acknowledge that it has been received. */ GatewayOpcodes[GatewayOpcodes["HeartbeatACK"] = 11] = "HeartbeatACK";
    /** Used to request soundboard sounds for a list of guilds. */ GatewayOpcodes[GatewayOpcodes["RequestSoundboardSounds"] = 31] = "RequestSoundboardSounds";
    return GatewayOpcodes;
}({});
/** https://discord.com/developers/docs/topics/gateway#list-of-intents */ export var GatewayIntents = /*#__PURE__*/ function(GatewayIntents) {
    /**
   * - GUILD_CREATE
   * - GUILD_UPDATE
   * - GUILD_DELETE
   * - GUILD_ROLE_CREATE
   * - GUILD_ROLE_UPDATE
   * - GUILD_ROLE_DELETE
   * - CHANNEL_CREATE
   * - CHANNEL_UPDATE
   * - CHANNEL_DELETE
   * - CHANNEL_PINS_UPDATE
   * - THREAD_CREATE
   * - THREAD_UPDATE
   * - THREAD_DELETE
   * - THREAD_LIST_SYNC
   * - THREAD_MEMBER_UPDATE
   * - THREAD_MEMBERS_UPDATE
   * - STAGE_INSTANCE_CREATE
   * - STAGE_INSTANCE_UPDATE
   * - STAGE_INSTANCE_DELETE
   */ GatewayIntents[GatewayIntents["Guilds"] = 1] = "Guilds";
    /**
   * - GUILD_MEMBER_ADD
   * - GUILD_MEMBER_UPDATE
   * - GUILD_MEMBER_REMOVE
   * - THREAD_MEMBERS_UPDATE
   *
   * This is a privileged intent.
   */ GatewayIntents[GatewayIntents["GuildMembers"] = 2] = "GuildMembers";
    /**
   * - GUILD_AUDIT_LOG_ENTRY_CREATE
   * - GUILD_BAN_ADD
   * - GUILD_BAN_REMOVE
   */ GatewayIntents[GatewayIntents["GuildModeration"] = 4] = "GuildModeration";
    /**
   * - GUILD_EMOJIS_UPDATE
   * - GUILD_STICKERS_UPDATE
   * - GUILD_SOUNDBOARD_SOUND_CREATE
   * - GUILD_SOUNDBOARD_SOUND_UPDATE
   * - GUILD_SOUNDBOARD_SOUND_DELETE
   * - GUILD_SOUNDBOARD_SOUNDS_UPDATE
   */ GatewayIntents[GatewayIntents["GuildExpressions"] = 8] = "GuildExpressions";
    /**
   * - GUILD_INTEGRATIONS_UPDATE
   * - INTEGRATION_CREATE
   * - INTEGRATION_UPDATE
   * - INTEGRATION_DELETE
   */ GatewayIntents[GatewayIntents["GuildIntegrations"] = 16] = "GuildIntegrations";
    /**
   * - WEBHOOKS_UPDATE
   */ GatewayIntents[GatewayIntents["GuildWebhooks"] = 32] = "GuildWebhooks";
    /**
   * - INVITE_CREATE
   * - INVITE_DELETE
   */ GatewayIntents[GatewayIntents["GuildInvites"] = 64] = "GuildInvites";
    /**
   * - VOICE_STATE_UPDATE
   * - VOICE_CHANNEL_EFFECT_SEND
   */ GatewayIntents[GatewayIntents["GuildVoiceStates"] = 128] = "GuildVoiceStates";
    /**
   * - PRESENCE_UPDATE
   *
   * This is a privileged intent.
   */ GatewayIntents[GatewayIntents["GuildPresences"] = 256] = "GuildPresences";
    /**
   * - MESSAGE_CREATE
   * - MESSAGE_UPDATE
   * - MESSAGE_DELETE
   * - MESSAGE_DELETE_BULK
   *
   * The messages do not contain content by default.
   * If you want to receive their content too, you need to turn on the privileged `MESSAGE_CONTENT` intent. */ GatewayIntents[GatewayIntents["GuildMessages"] = 512] = "GuildMessages";
    /**
   * - MESSAGE_REACTION_ADD
   * - MESSAGE_REACTION_REMOVE
   * - MESSAGE_REACTION_REMOVE_ALL
   * - MESSAGE_REACTION_REMOVE_EMOJI
   */ GatewayIntents[GatewayIntents["GuildMessageReactions"] = 1024] = "GuildMessageReactions";
    /**
   * - TYPING_START
   */ GatewayIntents[GatewayIntents["GuildMessageTyping"] = 2048] = "GuildMessageTyping";
    /**
   * - CHANNEL_CREATE
   * - MESSAGE_CREATE
   * - MESSAGE_UPDATE
   * - MESSAGE_DELETE
   * - CHANNEL_PINS_UPDATE
   */ GatewayIntents[GatewayIntents["DirectMessages"] = 4096] = "DirectMessages";
    /**
   * - MESSAGE_REACTION_ADD
   * - MESSAGE_REACTION_REMOVE
   * - MESSAGE_REACTION_REMOVE_ALL
   * - MESSAGE_REACTION_REMOVE_EMOJI
   */ GatewayIntents[GatewayIntents["DirectMessageReactions"] = 8192] = "DirectMessageReactions";
    /**
   * - TYPING_START
   */ GatewayIntents[GatewayIntents["DirectMessageTyping"] = 16384] = "DirectMessageTyping";
    /**
   * This intent will add all content related values to message events.
   *
   * This is a privileged intent.
   */ GatewayIntents[GatewayIntents["MessageContent"] = 32768] = "MessageContent";
    /**
   * - GUILD_SCHEDULED_EVENT_CREATE
   * - GUILD_SCHEDULED_EVENT_UPDATE
   * - GUILD_SCHEDULED_EVENT_DELETE
   * - GUILD_SCHEDULED_EVENT_USER_ADD this is experimental and unstable.
   * - GUILD_SCHEDULED_EVENT_USER_REMOVE this is experimental and unstable.
   */ GatewayIntents[GatewayIntents["GuildScheduledEvents"] = 65536] = "GuildScheduledEvents";
    /**
   * - AUTO_MODERATION_RULE_CREATE
   * - AUTO_MODERATION_RULE_UPDATE
   * - AUTO_MODERATION_RULE_DELETE
   */ GatewayIntents[GatewayIntents["AutoModerationConfiguration"] = 1048576] = "AutoModerationConfiguration";
    /**
   * - AUTO_MODERATION_ACTION_EXECUTION
   */ GatewayIntents[GatewayIntents["AutoModerationExecution"] = 2097152] = "AutoModerationExecution";
    /**
   * - MESSAGE_POLL_VOTE_ADD
   * - MESSAGE_POLL_VOTE_REMOVE
   */ GatewayIntents[GatewayIntents["GuildMessagePolls"] = 16777216] = "GuildMessagePolls";
    /**
   * - MESSAGE_POLL_VOTE_ADD
   * - MESSAGE_POLL_VOTE_REMOVE
   */ GatewayIntents[GatewayIntents["DirectMessagePolls"] = 33554432] = "DirectMessagePolls";
    return GatewayIntents;
}({});
/** https://discord.com/developers/docs/topics/gateway#list-of-intents */ export const Intents = GatewayIntents;
/** https://discord.com/developers/docs/interactions/slash-commands#interaction-response-interactionresponsetype */ export var InteractionResponseTypes = /*#__PURE__*/ function(InteractionResponseTypes) {
    /** ACK a `Ping` */ InteractionResponseTypes[InteractionResponseTypes["Pong"] = 1] = "Pong";
    /** Respond to an interaction with a message */ InteractionResponseTypes[InteractionResponseTypes["ChannelMessageWithSource"] = 4] = "ChannelMessageWithSource";
    /** ACK an interaction and edit a response later, the user sees a loading state */ InteractionResponseTypes[InteractionResponseTypes["DeferredChannelMessageWithSource"] = 5] = "DeferredChannelMessageWithSource";
    /** For components, ACK an interaction and edit the original message later; the user does not see a loading state */ InteractionResponseTypes[InteractionResponseTypes["DeferredUpdateMessage"] = 6] = "DeferredUpdateMessage";
    /** For components, edit the message the component was attached to */ InteractionResponseTypes[InteractionResponseTypes["UpdateMessage"] = 7] = "UpdateMessage";
    /** For Application Command Options, send an autocomplete result */ InteractionResponseTypes[InteractionResponseTypes["ApplicationCommandAutocompleteResult"] = 8] = "ApplicationCommandAutocompleteResult";
    /** For Command or Component interactions, send a Modal response */ InteractionResponseTypes[InteractionResponseTypes["Modal"] = 9] = "Modal";
    /**
   * Respond to an interaction with an upgrade button, only available for apps with monetization enabled
   *
   * @deprecated You should migrate to the premium button components
   */ InteractionResponseTypes[InteractionResponseTypes["PremiumRequired"] = 10] = "PremiumRequired";
    /**
   * Launch the Activity associated with the app.
   *
   * @remarks
   * Only available for apps with Activities enabled
   */ InteractionResponseTypes[InteractionResponseTypes["LaunchActivity"] = 12] = "LaunchActivity";
    return InteractionResponseTypes;
}({});
export var SortOrderTypes = /*#__PURE__*/ function(SortOrderTypes) {
    /** Sort forum posts by activity */ SortOrderTypes[SortOrderTypes["LatestActivity"] = 0] = "LatestActivity";
    /** Sort forum posts by creation time (from most recent to oldest) */ SortOrderTypes[SortOrderTypes["CreationDate"] = 1] = "CreationDate";
    return SortOrderTypes;
}({});
export var ForumLayout = /*#__PURE__*/ function(ForumLayout) {
    /** No default has been set for forum channel. */ ForumLayout[ForumLayout["NotSet"] = 0] = "NotSet";
    /** Display posts as a list. */ ForumLayout[ForumLayout["ListView"] = 1] = "ListView";
    /** Display posts as a collection of tiles. */ ForumLayout[ForumLayout["GalleryView"] = 2] = "GalleryView";
    return ForumLayout;
}({});
export var Locales = /*#__PURE__*/ function(Locales) {
    Locales["Indonesian"] = "id";
    Locales["Danish"] = "da";
    Locales["German"] = "de";
    Locales["EnglishUk"] = "en-GB";
    Locales["EnglishUs"] = "en-US";
    Locales["Spanish"] = "es-ES";
    Locales["SpanishLatam"] = "es-419";
    Locales["French"] = "fr";
    Locales["Croatian"] = "hr";
    Locales["Italian"] = "it";
    Locales["Lithuanian"] = "lt";
    Locales["Hungarian"] = "hu";
    Locales["Dutch"] = "nl";
    Locales["Norwegian"] = "no";
    Locales["Polish"] = "pl";
    Locales["PortugueseBrazilian"] = "pt-BR";
    Locales["RomanianRomania"] = "ro";
    Locales["Finnish"] = "fi";
    Locales["Swedish"] = "sv-SE";
    Locales["Vietnamese"] = "vi";
    Locales["Turkish"] = "tr";
    Locales["Czech"] = "cs";
    Locales["Greek"] = "el";
    Locales["Bulgarian"] = "bg";
    Locales["Russian"] = "ru";
    Locales["Ukrainian"] = "uk";
    Locales["Hindi"] = "hi";
    Locales["Thai"] = "th";
    Locales["ChineseChina"] = "zh-CN";
    Locales["Japanese"] = "ja";
    Locales["ChineseTaiwan"] = "zh-TW";
    Locales["Korean"] = "ko";
    return Locales;
}({});

//# sourceMappingURL=data:application/json;base64,