"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AutoModerationActionType: function() {
        return AutoModerationActionType;
    },
    AutoModerationEventTypes: function() {
        return AutoModerationEventTypes;
    },
    AutoModerationTriggerTypes: function() {
        return AutoModerationTriggerTypes;
    },
    DiscordActivityLocationKind: function() {
        return DiscordActivityLocationKind;
    },
    DiscordApplicationEventWebhookStatus: function() {
        return DiscordApplicationEventWebhookStatus;
    },
    DiscordApplicationIntegrationType: function() {
        return DiscordApplicationIntegrationType;
    },
    DiscordAutoModerationRuleTriggerMetadataPresets: function() {
        return DiscordAutoModerationRuleTriggerMetadataPresets;
    },
    DiscordConnectionServiceType: function() {
        return DiscordConnectionServiceType;
    },
    DiscordConnectionVisibility: function() {
        return DiscordConnectionVisibility;
    },
    DiscordEntitlementType: function() {
        return DiscordEntitlementType;
    },
    DiscordEventWebhookType: function() {
        return DiscordEventWebhookType;
    },
    DiscordGuildOnboardingMode: function() {
        return DiscordGuildOnboardingMode;
    },
    DiscordGuildOnboardingPromptType: function() {
        return DiscordGuildOnboardingPromptType;
    },
    DiscordInteractionContextType: function() {
        return DiscordInteractionContextType;
    },
    DiscordInteractionEntryPointCommandHandlerType: function() {
        return DiscordInteractionEntryPointCommandHandlerType;
    },
    DiscordInviteType: function() {
        return DiscordInviteType;
    },
    DiscordMessageReferenceType: function() {
        return DiscordMessageReferenceType;
    },
    DiscordPollLayoutType: function() {
        return DiscordPollLayoutType;
    },
    DiscordReactionType: function() {
        return DiscordReactionType;
    },
    DiscordScheduledEventRecurrenceRuleFrequency: function() {
        return DiscordScheduledEventRecurrenceRuleFrequency;
    },
    DiscordScheduledEventRecurrenceRuleMonth: function() {
        return DiscordScheduledEventRecurrenceRuleMonth;
    },
    DiscordScheduledEventRecurrenceRuleWeekday: function() {
        return DiscordScheduledEventRecurrenceRuleWeekday;
    },
    DiscordSkuType: function() {
        return DiscordSkuType;
    },
    DiscordSubscriptionStatus: function() {
        return DiscordSubscriptionStatus;
    },
    DiscordTeamMemberRole: function() {
        return DiscordTeamMemberRole;
    },
    DiscordVoiceChannelEffectAnimationType: function() {
        return DiscordVoiceChannelEffectAnimationType;
    },
    DiscordWebhookEventType: function() {
        return DiscordWebhookEventType;
    },
    OAuth2Scope: function() {
        return OAuth2Scope;
    }
});
var OAuth2Scope = /*#__PURE__*/ function(OAuth2Scope) {
    /**
   * Allows your app to fetch data from a user's "Now Playing/Recently Played" list
   *
   * @remarks
   * This scope is not currently available for apps
   */ OAuth2Scope["ActivitiesRead"] = "activities.read";
    /**
   * Allows your app to update a user's activity
   *
   * @remarks
   * This scope not currently available for apps.
   */ OAuth2Scope["ActivitiesWrite"] = "activities.write";
    /** Allows your app to read build data for a user's applications */ OAuth2Scope["ApplicationsBuildsRead"] = "applications.builds.read";
    /**
   * Allows your app to upload/update builds for a user's applications
   *
   * @remarks
   * This scope requires Discord approval to be used
   */ OAuth2Scope["ApplicationsBuildsUpload"] = "applications.builds.upload";
    /** Allows your app to add commands to a guild - included by default with the `bot` scope */ OAuth2Scope["ApplicationsCommands"] = "applications.commands";
    /**
   * Allows your app to update its Application Commands via this bearer token
   *
   * @remarks
   * This scope can only be used when using a [Client Credential Grant](https://discord.com/developers/docs/topics/oauth2#client-credentials-grant)
   */ OAuth2Scope["ApplicationsCommandsUpdate"] = "applications.commands.update";
    /** Allows your app to update permissions for its commands in a guild a user has permissions to */ OAuth2Scope["ApplicationCommandsPermissionsUpdate"] = "applications.commands.permissions.update";
    /** Allows your app to read entitlements for a user's applications */ OAuth2Scope["ApplicationsEntitlements"] = "applications.entitlements";
    /** Allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications */ OAuth2Scope["ApplicationsStoreUpdate"] = "applications.store.update";
    /** For oauth2 bots, this puts the bot in the user's selected guild by default */ OAuth2Scope["Bot"] = "bot";
    /** Allows requests to [/users/@me/connections](https://discord.com/developers/docs/resources/user#get-user-connections) */ OAuth2Scope["Connections"] = "connections";
    /**
   * Allows your app to see information about the user's DMs and group DMs
   *
   * @remarks
   * This scope requires Discord approval to be used
   */ OAuth2Scope["DMChannelsRead"] = "dm_channels.read";
    /** Adds the `email` filed to [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) */ OAuth2Scope["Email"] = "email";
    /** Allows your app to join users to a group dm */ OAuth2Scope["GroupDMJoins"] = "gdm.join";
    /** Allows requests to [/users/@me/guilds](https://discord.com/developers/docs/resources/user#get-current-user-guilds) */ OAuth2Scope["Guilds"] = "guilds";
    /** Allows requests to [/guilds/{guild.id}/members/{user.id}](https://discord.com/developers/docs/resources/guild#add-guild-member) */ OAuth2Scope["GuildsJoin"] = "guilds.join";
    /** Allows requests to [/users/@me/guilds/{guild.id}/member](https://discord.com/developers/docs/resources/user#get-current-user-guild-member) */ OAuth2Scope["GuildsMembersRead"] = "guilds.members.read";
    /**
   * Allows requests to [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user)
   *
   * @remarks
   * The return object from [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user)
   * does NOT contain the `email` field unless the scope `email` is also used
   */ OAuth2Scope["Identify"] = "identify";
    /**
   * For local rpc server api access, this allows you to read messages from all client channels
   * (otherwise restricted to channels/guilds your app creates)
   */ OAuth2Scope["MessagesRead"] = "messages.read";
    /**
   * Allows your app to know a user's friends and implicit relationships
   *
   * @remarks
   * This scope requires Discord approval to be used
   */ OAuth2Scope["RelationshipsRead"] = "relationships.read";
    /** Allows your app to update a user's connection and metadata for the app */ OAuth2Scope["RoleConnectionsWrite"] = "role_connections.write";
    /**
   * For local rpc server access, this allows you to control a user's local Discord client
   *
   * @remarks
   * This scope requires Discord approval to be used
   */ OAuth2Scope["RPC"] = "rpc";
    /**
   * For local rpc server access, this allows you to update a user's activity
   *
   * @remarks
   * This scope requires Discord approval to be used
   */ OAuth2Scope["RPCActivitiesWrite"] = "rpc.activities.write";
    /**
   * For local rpc server api access, this allows you to receive notifications pushed out to the user
   *
   * @remarks
   * This scope requires Discord approval to be used
   */ OAuth2Scope["RPCNotificationsRead"] = "rpc.notifications.read";
    /**
   * For local rpc server access, this allows you to read a user's voice settings and listen for voice events
   *
   * @remarks
   * This scope requires Discord approval to be used
   */ OAuth2Scope["RPCVoiceRead"] = "rpc.voice.read";
    /**
   * For local rpc server access, this allows you to update a user's voice settings
   *
   * @remarks
   * This scope requires Discord approval to be used
   */ OAuth2Scope["RPCVoiceWrite"] = "rpc.voice.write";
    /**
   * Allows your app to connect to voice on user's behalf and see all the voice members
   *
   * @remarks
   * This scope requires Discord approval to be used
   */ OAuth2Scope["Voice"] = "voice";
    /** Generate a webhook that is returned in the oauth token response for authorization code grants */ OAuth2Scope["WebhookIncoming"] = "webhook.incoming";
    return OAuth2Scope;
}({});
var DiscordApplicationIntegrationType = /*#__PURE__*/ function(DiscordApplicationIntegrationType) {
    /** App is installable to servers */ DiscordApplicationIntegrationType[DiscordApplicationIntegrationType["GuildInstall"] = 0] = "GuildInstall";
    /** App is installable to users */ DiscordApplicationIntegrationType[DiscordApplicationIntegrationType["UserInstall"] = 1] = "UserInstall";
    return DiscordApplicationIntegrationType;
}({});
var DiscordApplicationEventWebhookStatus = /*#__PURE__*/ function(DiscordApplicationEventWebhookStatus) {
    /** Webhook events are disabled by developer */ DiscordApplicationEventWebhookStatus[DiscordApplicationEventWebhookStatus["Disabled"] = 1] = "Disabled";
    /** Webhook events are enabled by developer */ DiscordApplicationEventWebhookStatus[DiscordApplicationEventWebhookStatus["Enabled"] = 2] = "Enabled";
    /** Webhook events are disabled by Discord, usually due to inactivity */ DiscordApplicationEventWebhookStatus[DiscordApplicationEventWebhookStatus["DisabledByDiscord"] = 3] = "DisabledByDiscord";
    return DiscordApplicationEventWebhookStatus;
}({});
var DiscordConnectionServiceType = /*#__PURE__*/ function(DiscordConnectionServiceType) {
    DiscordConnectionServiceType["AmazonMusic"] = "amazon-music";
    DiscordConnectionServiceType["BattleNet"] = "battlenet";
    DiscordConnectionServiceType["Bungie"] = "Bungie.net";
    DiscordConnectionServiceType["Bluesky"] = "bluesky";
    DiscordConnectionServiceType["Crunchyroll"] = "crunchyroll";
    DiscordConnectionServiceType["Domain"] = "domain";
    DiscordConnectionServiceType["eBay"] = "ebay";
    DiscordConnectionServiceType["EpicGames"] = "epicgames";
    DiscordConnectionServiceType["Facebook"] = "facebook";
    DiscordConnectionServiceType["GitHub"] = "github";
    DiscordConnectionServiceType["Instagram"] = "instagram";
    DiscordConnectionServiceType["LeagueOfLegends"] = "leagueoflegends";
    DiscordConnectionServiceType["Mastodon"] = "mastodon";
    DiscordConnectionServiceType["PayPal"] = "paypal";
    DiscordConnectionServiceType["PlayStationNetwork"] = "playstation";
    DiscordConnectionServiceType["Reddit"] = "reddit";
    DiscordConnectionServiceType["RiotGames"] = "riotgames";
    DiscordConnectionServiceType["Roblox"] = "roblox";
    DiscordConnectionServiceType["Spotify"] = "spotify";
    DiscordConnectionServiceType["Skype"] = "skype";
    DiscordConnectionServiceType["Steam"] = "steam";
    DiscordConnectionServiceType["TikTok"] = "tiktok";
    DiscordConnectionServiceType["Twitch"] = "twitch";
    DiscordConnectionServiceType["Twitter"] = "twitter";
    DiscordConnectionServiceType["Xbox"] = "xbox";
    DiscordConnectionServiceType["YouTube"] = "youtube";
    return DiscordConnectionServiceType;
}({});
var DiscordConnectionVisibility = /*#__PURE__*/ function(DiscordConnectionVisibility) {
    /** invisible to everyone except the user themselves */ DiscordConnectionVisibility[DiscordConnectionVisibility["None"] = 0] = "None";
    /** visible to everyone */ DiscordConnectionVisibility[DiscordConnectionVisibility["Everyone"] = 1] = "Everyone";
    return DiscordConnectionVisibility;
}({});
var DiscordActivityLocationKind = /*#__PURE__*/ function(DiscordActivityLocationKind) {
    /** The Location is a Guild Channel */ DiscordActivityLocationKind["GuildChannel"] = "gc";
    /** The Location is a Private Channel, such as a DM or GDM */ DiscordActivityLocationKind["PrivateChannel"] = "pc";
    return DiscordActivityLocationKind;
}({});
var DiscordReactionType = /*#__PURE__*/ function(DiscordReactionType) {
    DiscordReactionType[DiscordReactionType["Normal"] = 0] = "Normal";
    DiscordReactionType[DiscordReactionType["Burst"] = 1] = "Burst";
    return DiscordReactionType;
}({});
var DiscordMessageReferenceType = /*#__PURE__*/ function(DiscordMessageReferenceType) {
    /**
   * A standard reference used by replies.
   *
   * @remarks
   * When the type is set to this value, the field referenced_message on the message will be present
   */ DiscordMessageReferenceType[DiscordMessageReferenceType["Default"] = 0] = "Default";
    /**
   * Reference used to point to a message at a point in time.
   *
   * @remarks
   * When the type is set to this value, the field message_snapshot on the message will be present
   *
   * This value can only be used for basic messages;
   * i.e. messages which do not have strong bindings to a non global entity.
   * Thus we support only messages with `DEFAULT` or `REPLY` types, but disallowed if there are any polls, calls, or components.
   */ DiscordMessageReferenceType[DiscordMessageReferenceType["Forward"] = 1] = "Forward";
    return DiscordMessageReferenceType;
}({});
var DiscordPollLayoutType = /*#__PURE__*/ function(DiscordPollLayoutType) {
    /** The default layout */ DiscordPollLayoutType[DiscordPollLayoutType["Default"] = 1] = "Default";
    return DiscordPollLayoutType;
}({});
var AutoModerationEventTypes = /*#__PURE__*/ function(AutoModerationEventTypes) {
    /** When a user sends a message */ AutoModerationEventTypes[AutoModerationEventTypes["MessageSend"] = 1] = "MessageSend";
    /** Wen a member edits their profile */ AutoModerationEventTypes[AutoModerationEventTypes["MemberUpdate"] = 2] = "MemberUpdate";
    return AutoModerationEventTypes;
}({});
var AutoModerationTriggerTypes = /*#__PURE__*/ function(AutoModerationTriggerTypes) {
    /** Check if content contains words from a user defined list of keywords. Max 6 per guild */ AutoModerationTriggerTypes[AutoModerationTriggerTypes["Keyword"] = 1] = "Keyword";
    /** Check if content represents generic spam. Max 1 per guild */ AutoModerationTriggerTypes[AutoModerationTriggerTypes["Spam"] = 3] = "Spam";
    /** Check if content contains words from internal pre-defined word sets. Max 1 per guild */ AutoModerationTriggerTypes[AutoModerationTriggerTypes["KeywordPreset"] = 4] = "KeywordPreset";
    /** Check if content contains more unique mentions than allowed. Max 1 per guild */ AutoModerationTriggerTypes[AutoModerationTriggerTypes["MentionSpam"] = 5] = "MentionSpam";
    /** Check if member profile contains words from a user defined list of keywords. Max 1 per guild */ AutoModerationTriggerTypes[AutoModerationTriggerTypes["MemberProfile"] = 6] = "MemberProfile";
    return AutoModerationTriggerTypes;
}({});
var DiscordAutoModerationRuleTriggerMetadataPresets = /*#__PURE__*/ function(DiscordAutoModerationRuleTriggerMetadataPresets) {
    /** Words that may be considered forms of swearing or cursing */ DiscordAutoModerationRuleTriggerMetadataPresets[DiscordAutoModerationRuleTriggerMetadataPresets["Profanity"] = 1] = "Profanity";
    /** Words that refer to sexually explicit behavior or activity */ DiscordAutoModerationRuleTriggerMetadataPresets[DiscordAutoModerationRuleTriggerMetadataPresets["SexualContent"] = 2] = "SexualContent";
    /** Personal insults or words that may be considered hate speech */ DiscordAutoModerationRuleTriggerMetadataPresets[DiscordAutoModerationRuleTriggerMetadataPresets["Slurs"] = 3] = "Slurs";
    return DiscordAutoModerationRuleTriggerMetadataPresets;
}({});
var AutoModerationActionType = /*#__PURE__*/ function(AutoModerationActionType) {
    /** Blocks the content of a message according to the rule */ AutoModerationActionType[AutoModerationActionType["BlockMessage"] = 1] = "BlockMessage";
    /** Logs user content to a specified channel */ AutoModerationActionType[AutoModerationActionType["SendAlertMessage"] = 2] = "SendAlertMessage";
    /**
   * Times out user for specified duration
   *
   * @remarks
   * A timeout action can only be set up for {@link AutoModerationTriggerTypes.Keyword} and {@link AutoModerationTriggerTypes.MentionSpam} rules.
   *
   * The `MODERATE_MEMBERS` permission is required to use the timeout action type.
   */ AutoModerationActionType[AutoModerationActionType["Timeout"] = 3] = "Timeout";
    /** prevents a member from using text, voice, or other interactions */ AutoModerationActionType[AutoModerationActionType["BlockMemberInteraction"] = 4] = "BlockMemberInteraction";
    return AutoModerationActionType;
}({});
var DiscordScheduledEventRecurrenceRuleFrequency = /*#__PURE__*/ function(DiscordScheduledEventRecurrenceRuleFrequency) {
    DiscordScheduledEventRecurrenceRuleFrequency[DiscordScheduledEventRecurrenceRuleFrequency["Yearly"] = 0] = "Yearly";
    DiscordScheduledEventRecurrenceRuleFrequency[DiscordScheduledEventRecurrenceRuleFrequency["Monthly"] = 1] = "Monthly";
    DiscordScheduledEventRecurrenceRuleFrequency[DiscordScheduledEventRecurrenceRuleFrequency["Weekly"] = 2] = "Weekly";
    DiscordScheduledEventRecurrenceRuleFrequency[DiscordScheduledEventRecurrenceRuleFrequency["Daily"] = 3] = "Daily";
    return DiscordScheduledEventRecurrenceRuleFrequency;
}({});
var DiscordScheduledEventRecurrenceRuleWeekday = /*#__PURE__*/ function(DiscordScheduledEventRecurrenceRuleWeekday) {
    DiscordScheduledEventRecurrenceRuleWeekday[DiscordScheduledEventRecurrenceRuleWeekday["Monday"] = 0] = "Monday";
    DiscordScheduledEventRecurrenceRuleWeekday[DiscordScheduledEventRecurrenceRuleWeekday["Tuesday"] = 1] = "Tuesday";
    DiscordScheduledEventRecurrenceRuleWeekday[DiscordScheduledEventRecurrenceRuleWeekday["Wednesday"] = 2] = "Wednesday";
    DiscordScheduledEventRecurrenceRuleWeekday[DiscordScheduledEventRecurrenceRuleWeekday["Thursday"] = 3] = "Thursday";
    DiscordScheduledEventRecurrenceRuleWeekday[DiscordScheduledEventRecurrenceRuleWeekday["Friday"] = 4] = "Friday";
    DiscordScheduledEventRecurrenceRuleWeekday[DiscordScheduledEventRecurrenceRuleWeekday["Saturday"] = 5] = "Saturday";
    DiscordScheduledEventRecurrenceRuleWeekday[DiscordScheduledEventRecurrenceRuleWeekday["Sunday"] = 6] = "Sunday";
    return DiscordScheduledEventRecurrenceRuleWeekday;
}({});
var DiscordScheduledEventRecurrenceRuleMonth = /*#__PURE__*/ function(DiscordScheduledEventRecurrenceRuleMonth) {
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["January"] = 1] = "January";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["February"] = 2] = "February";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["March"] = 3] = "March";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["April"] = 4] = "April";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["May"] = 5] = "May";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["June"] = 6] = "June";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["July"] = 7] = "July";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["August"] = 8] = "August";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["September"] = 9] = "September";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["October"] = 10] = "October";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["November"] = 11] = "November";
    DiscordScheduledEventRecurrenceRuleMonth[DiscordScheduledEventRecurrenceRuleMonth["December"] = 12] = "December";
    return DiscordScheduledEventRecurrenceRuleMonth;
}({});
var DiscordInviteType = /*#__PURE__*/ function(DiscordInviteType) {
    DiscordInviteType[DiscordInviteType["Guild"] = 0] = "Guild";
    DiscordInviteType[DiscordInviteType["GroupDm"] = 1] = "GroupDm";
    DiscordInviteType[DiscordInviteType["Friend"] = 2] = "Friend";
    return DiscordInviteType;
}({});
var DiscordInteractionEntryPointCommandHandlerType = /*#__PURE__*/ function(DiscordInteractionEntryPointCommandHandlerType) {
    /** The app handles the interaction using an interaction token */ DiscordInteractionEntryPointCommandHandlerType[DiscordInteractionEntryPointCommandHandlerType["AppHandler"] = 1] = "AppHandler";
    /** Discord handles the interaction by launching an Activity and sending a follow-up message without coordinating with the app */ DiscordInteractionEntryPointCommandHandlerType[DiscordInteractionEntryPointCommandHandlerType["DiscordLaunchActivity"] = 2] = "DiscordLaunchActivity";
    return DiscordInteractionEntryPointCommandHandlerType;
}({});
var DiscordVoiceChannelEffectAnimationType = /*#__PURE__*/ function(DiscordVoiceChannelEffectAnimationType) {
    /** A fun animation, sent by a Nitro subscriber */ DiscordVoiceChannelEffectAnimationType[DiscordVoiceChannelEffectAnimationType["Premium"] = 0] = "Premium";
    /** The standard animation */ DiscordVoiceChannelEffectAnimationType[DiscordVoiceChannelEffectAnimationType["Basic"] = 1] = "Basic";
    return DiscordVoiceChannelEffectAnimationType;
}({});
var DiscordGuildOnboardingPromptType = /*#__PURE__*/ function(DiscordGuildOnboardingPromptType) {
    DiscordGuildOnboardingPromptType[DiscordGuildOnboardingPromptType["MultipleChoice"] = 0] = "MultipleChoice";
    DiscordGuildOnboardingPromptType[DiscordGuildOnboardingPromptType["DropDown"] = 1] = "DropDown";
    return DiscordGuildOnboardingPromptType;
}({});
var DiscordGuildOnboardingMode = /*#__PURE__*/ function(DiscordGuildOnboardingMode) {
    /** Counts only Default Channels towards constraints */ DiscordGuildOnboardingMode[DiscordGuildOnboardingMode["OnboardingDefault"] = 0] = "OnboardingDefault";
    /** Counts Default Channels and Questions towards constraints */ DiscordGuildOnboardingMode[DiscordGuildOnboardingMode["OnboardingAdvanced"] = 1] = "OnboardingAdvanced";
    return DiscordGuildOnboardingMode;
}({});
var DiscordTeamMemberRole = /*#__PURE__*/ function(DiscordTeamMemberRole) {
    /** Owners are the most permissiable role, and can take destructive, irreversible actions like deleting the team itself. Teams are limited to 1 owner. */ DiscordTeamMemberRole["Owner"] = "owner";
    /** Admins have similar access as owners, except they cannot take destructive actions on the team or team-owned apps. */ DiscordTeamMemberRole["Admin"] = "admin";
    /**
   * Developers can access information about team-owned apps, like the client secret or public key.
   * They can also take limited actions on team-owned apps, like configuring interaction endpoints or resetting the bot token.
   * Members with the Developer role *cannot* manage the team or its members, or take destructive actions on team-owned apps.
   */ DiscordTeamMemberRole["Developer"] = "developer";
    /** Read-only members can access information about a team and any team-owned apps. Some examples include getting the IDs of applications and exporting payout records. */ DiscordTeamMemberRole["ReadOnly"] = "read_only";
    return DiscordTeamMemberRole;
}({});
var DiscordEntitlementType = /*#__PURE__*/ function(DiscordEntitlementType) {
    /** Entitlement was purchased by user */ DiscordEntitlementType[DiscordEntitlementType["Purchase"] = 1] = "Purchase";
    /** Entitlement for Discord Nitro subscription */ DiscordEntitlementType[DiscordEntitlementType["PremiumSubscription"] = 2] = "PremiumSubscription";
    /** Entitlement was gifted by developer */ DiscordEntitlementType[DiscordEntitlementType["DeveloperGift"] = 3] = "DeveloperGift";
    /** Entitlement was purchased by a dev in application test mode */ DiscordEntitlementType[DiscordEntitlementType["TestModePurchase"] = 4] = "TestModePurchase";
    /** Entitlement was granted when the SKU was free */ DiscordEntitlementType[DiscordEntitlementType["FreePurchase"] = 5] = "FreePurchase";
    /** Entitlement was gifted by another user */ DiscordEntitlementType[DiscordEntitlementType["UserGift"] = 6] = "UserGift";
    /** Entitlement was claimed by user for free as a Nitro Subscriber */ DiscordEntitlementType[DiscordEntitlementType["PremiumPurchase"] = 7] = "PremiumPurchase";
    /** Entitlement was purchased as an app subscription */ DiscordEntitlementType[DiscordEntitlementType["ApplicationSubscription"] = 8] = "ApplicationSubscription";
    return DiscordEntitlementType;
}({});
var DiscordSkuType = /*#__PURE__*/ function(DiscordSkuType) {
    /** Durable one-time purchase */ DiscordSkuType[DiscordSkuType["Durable"] = 2] = "Durable";
    /** Consumable one-time purchase */ DiscordSkuType[DiscordSkuType["Consumable"] = 3] = "Consumable";
    /** Represents a recurring subscription */ DiscordSkuType[DiscordSkuType["Subscription"] = 5] = "Subscription";
    /** System-generated group for each SUBSCRIPTION SKU created */ DiscordSkuType[DiscordSkuType["SubscriptionGroup"] = 6] = "SubscriptionGroup";
    return DiscordSkuType;
}({});
var DiscordSubscriptionStatus = /*#__PURE__*/ function(DiscordSubscriptionStatus) {
    /** Subscription is active and scheduled to renew. */ DiscordSubscriptionStatus[DiscordSubscriptionStatus["Active"] = 0] = "Active";
    /** Subscription is active but will not renew. */ DiscordSubscriptionStatus[DiscordSubscriptionStatus["Ending"] = 1] = "Ending";
    /** Subscription is inactive and not being charged. */ DiscordSubscriptionStatus[DiscordSubscriptionStatus["Inactive"] = 2] = "Inactive";
    return DiscordSubscriptionStatus;
}({});
var DiscordInteractionContextType = /*#__PURE__*/ function(DiscordInteractionContextType) {
    /** Interaction can be used within servers */ DiscordInteractionContextType[DiscordInteractionContextType["Guild"] = 0] = "Guild";
    /** Interaction can be used within DMs with the app's bot user */ DiscordInteractionContextType[DiscordInteractionContextType["BotDm"] = 1] = "BotDm";
    /** Interaction can be used within Group DMs and DMs other than the app's bot user */ DiscordInteractionContextType[DiscordInteractionContextType["PrivateChannel"] = 2] = "PrivateChannel";
    return DiscordInteractionContextType;
}({});
var DiscordEventWebhookType = /*#__PURE__*/ function(DiscordEventWebhookType) {
    /** PING event sent to verify your Webhook Event URL is active */ DiscordEventWebhookType[DiscordEventWebhookType["Ping"] = 0] = "Ping";
    /** Webhook event (details for event in event body object) */ DiscordEventWebhookType[DiscordEventWebhookType["Event"] = 1] = "Event";
    return DiscordEventWebhookType;
}({});
var DiscordWebhookEventType = /*#__PURE__*/ function(DiscordWebhookEventType) {
    /** Sent when an app was authorized by a user to a server or their account */ DiscordWebhookEventType["ApplicationAuthorized"] = "APPLICATION_AUTHORIZED";
    /** Entitlement was created */ DiscordWebhookEventType["EntitlementCreate"] = "ENTITLEMENT_CREATE";
    /** User was added to a Quest (currently unavailable) */ DiscordWebhookEventType["QuestUserEnrollment"] = "QUEST_USER_ENROLLMENT";
    return DiscordWebhookEventType;
}({});

//# sourceMappingURL=data:application/json;base64,