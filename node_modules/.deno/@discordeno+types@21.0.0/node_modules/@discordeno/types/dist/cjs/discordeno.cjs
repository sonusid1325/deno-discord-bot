"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CreateEntitlementOwnerType", {
    enumerable: true,
    get: function() {
        return CreateEntitlementOwnerType;
    }
});
var CreateEntitlementOwnerType = /*#__PURE__*/ function(CreateEntitlementOwnerType) {
    /** Guild subscription */ CreateEntitlementOwnerType[CreateEntitlementOwnerType["GuildSubscription"] = 1] = "GuildSubscription";
    /** User subscription */ CreateEntitlementOwnerType[CreateEntitlementOwnerType["UserSubscription"] = 2] = "UserSubscription";
    return CreateEntitlementOwnerType;
}({});

//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["../../src/discordeno.ts"],"sourcesContent":["import type {\n  AutoModerationActionType,\n  AutoModerationEventTypes,\n  AutoModerationTriggerTypes,\n  DiscordApplicationCommandOption,\n  DiscordApplicationCommandOptionChoice,\n  DiscordApplicationEventWebhookStatus,\n  DiscordApplicationIntegrationType,\n  DiscordAttachment,\n  DiscordAutoModerationRuleTriggerMetadataPresets,\n  DiscordChannel,\n  DiscordDefaultReactionEmoji,\n  DiscordEmbed,\n  DiscordForumTag,\n  DiscordGuildOnboardingMode,\n  DiscordGuildOnboardingPrompt,\n  DiscordInstallParams,\n  DiscordInteractionContextType,\n  DiscordInteractionEntryPointCommandHandlerType,\n  DiscordMessageReferenceType,\n  DiscordPollAnswer,\n  DiscordPollLayoutType,\n  DiscordPollMedia,\n  DiscordReactionType,\n  DiscordRole,\n  DiscordScheduledEventRecurrenceRule,\n  DiscordWebhookEventType,\n} from './discord.js'\nimport type {\n  AllowedMentionsTypes,\n  ApplicationCommandTypes,\n  ApplicationFlags,\n  AuditLogEvents,\n  BigString,\n  ButtonStyles,\n  Camelize,\n  ChannelTypes,\n  DefaultMessageNotificationLevels,\n  ExplicitContentFilterLevels,\n  ForumLayout,\n  GuildFeatures,\n  InteractionResponseTypes,\n  Localization,\n  MessageComponentTypes,\n  MessageFlags,\n  OverwriteTypes,\n  PermissionStrings,\n  ScheduledEventEntityType,\n  ScheduledEventPrivacyLevel,\n  ScheduledEventStatus,\n  SortOrderTypes,\n  SystemChannelFlags,\n  TargetTypes,\n  TextStyles,\n  VerificationLevels,\n  VideoQualityModes,\n} from './shared.js'\n\n/** https://discord.com/developers/docs/resources/channel#create-message-jsonform-params */\nexport interface CreateMessageOptions {\n  /** The message contents (up to 2000 characters) */\n  content?: string\n  /** Can be used to verify a message was sent (up to 25 characters). Value will appear in the Message Create event. */\n  nonce?: string | number\n  /** true if this is a TTS message */\n  tts?: boolean\n  /** Embedded `rich` content (up to 6000 characters) */\n  embeds?: Camelize<DiscordEmbed>[]\n  /** Allowed mentions for the message */\n  allowedMentions?: AllowedMentions\n  /** Include to make your message a reply or a forward */\n  messageReference?: {\n    /** Type of reference */\n    type?: DiscordMessageReferenceType\n    /** id of the originating message */\n    messageId?: BigString\n    /**\n     * id of the originating message's channel\n     * Note: `channel_id` is optional when creating a reply, but will always be present when receiving an event/response that includes this data model.\n     */\n    channelId?: BigString\n    /** id of the originating message's guild */\n    guildId?: BigString\n    /** When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true */\n    failIfNotExists: boolean\n  }\n  attachments?: (Pick<Camelize<DiscordAttachment>, 'id'> & Omit<Partial<Camelize<DiscordAttachment>>, 'id'>)[]\n  /** The contents of the files being sent */\n  files?: FileContent[]\n  /** The components you would like to have sent in this message */\n  components?: MessageComponents\n  /** IDs of up to 3 stickers in the server to send in the message */\n  stickerIds?: [BigString] | [BigString, BigString] | [BigString, BigString, BigString]\n  /** Message flags combined as a bitfield, only SUPPRESS_EMBEDS and SUPPRESS_NOTIFICATIONS can be set */\n  flags?: MessageFlags\n  /** If true and nonce is present, it will be checked for uniqueness in the past few minutes. If another message was created by the same author with the same nonce, that message will be returned and no new message will be created. */\n  enforceNonce?: boolean\n  /** A poll object */\n  poll?: CreatePoll\n}\n\nexport type MessageComponents = MessageComponent[]\nexport type MessageComponent =\n  | ActionRow\n  | ButtonComponent\n  | InputTextComponent\n  | SelectMenuComponent\n  | SelectMenuChannelsComponent\n  | SelectMenuRolesComponent\n  | SelectMenuUsersComponent\n  | SelectMenuUsersAndRolesComponent\n\n/** https://discord.com/developers/docs/interactions/message-components#actionrow */\nexport interface ActionRow {\n  /** Action rows are a group of buttons. */\n  type: MessageComponentTypes.ActionRow\n  /** The components in this row */\n  components:\n    | [Exclude<MessageComponent, ActionRow>]\n    | [ButtonComponent, ButtonComponent]\n    | [ButtonComponent, ButtonComponent, ButtonComponent]\n    | [ButtonComponent, ButtonComponent, ButtonComponent, ButtonComponent]\n    | [ButtonComponent, ButtonComponent, ButtonComponent, ButtonComponent, ButtonComponent]\n}\n\n/** https://discord.com/developers/docs/interactions/message-components#button-object-button-structure */\nexport interface ButtonComponent {\n  /** All button components have type 2 */\n  type: MessageComponentTypes.Button\n  /** for what the button says (max 80 characters) */\n  label?: string\n  /** a dev-defined unique string sent on click (max 100 characters). type 5 Link buttons can not have a custom_id */\n  customId?: string\n  /** For different styles/colors of the buttons */\n  style: ButtonStyles\n  /** Emoji object that includes fields of name, id, and animated supporting unicode and custom emojis. */\n  emoji?: {\n    /** Emoji id */\n    id?: bigint\n    /** Emoji name */\n    name?: string\n    /** Whether this emoji is animated */\n    animated?: boolean\n  }\n  /** optional url for link-style buttons that can navigate a user to the web. Only type 5 Link buttons can have a url */\n  url?: string\n  /** Whether or not this button is disabled */\n  disabled?: boolean\n}\n\n/** https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-menu-structure */\nexport interface SelectMenuComponent {\n  /** SelectMenu Component is of type 3 */\n  type: MessageComponentTypes.SelectMenu\n  /** A custom identifier for this component. Maximum 100 characters. */\n  customId: string\n  /** A custom placeholder text if nothing is selected. Maximum 150 characters. */\n  placeholder?: string\n  /** The minimum number of items that must be selected. Default 1. Between 1-25. */\n  minValues?: number\n  /** The maximum number of items that can be selected. Default 1. Between 1-25. */\n  maxValues?: number\n  /** The choices! Maximum of 25 items. */\n  options: SelectOption[]\n  /** Whether or not this select is disabled */\n  disabled?: boolean\n}\n\nexport interface SelectMenuUsersComponent {\n  /** SelectMenuChannels Component is of type 5 */\n  type: MessageComponentTypes.SelectMenuUsers\n  /** A custom identifier for this component. Maximum 100 characters. */\n  customId: string\n  /** A custom placeholder text if nothing is selected. Maximum 150 characters. */\n  placeholder?: string\n  /**\n   * List of default values for auto-populated select menu components\n   * The number of default values must be in the range defined by minValues and maxValues\n   */\n  defaultValues?: SelectMenuDefaultValue[]\n  /** The minimum number of items that must be selected. Default 1. Between 1-25. */\n  minValues?: number\n  /** The maximum number of items that can be selected. Default 1. Between 1-25. */\n  maxValues?: number\n  /** Whether or not this select is disabled */\n  disabled?: boolean\n}\n\nexport interface SelectMenuRolesComponent {\n  /** SelectMenuChannels Component is of type 6 */\n  type: MessageComponentTypes.SelectMenuRoles\n  /** A custom identifier for this component. Maximum 100 characters. */\n  customId: string\n  /** A custom placeholder text if nothing is selected. Maximum 150 characters. */\n  placeholder?: string\n  /**\n   * List of default values for auto-populated select menu components\n   * The number of default values must be in the range defined by minValues and maxValues\n   */\n  defaultValues?: SelectMenuDefaultValue[]\n  /** The minimum number of items that must be selected. Default 1. Between 1-25. */\n  minValues?: number\n  /** The maximum number of items that can be selected. Default 1. Between 1-25. */\n  maxValues?: number\n  /** Whether or not this select is disabled */\n  disabled?: boolean\n}\n\nexport interface SelectMenuUsersAndRolesComponent {\n  /** SelectMenuChannels Component is of type 7 */\n  type: MessageComponentTypes.SelectMenuUsersAndRoles\n  /** A custom identifier for this component. Maximum 100 characters. */\n  customId: string\n  /** A custom placeholder text if nothing is selected. Maximum 150 characters. */\n  placeholder?: string\n  /**\n   * List of default values for auto-populated select menu components\n   * The number of default values must be in the range defined by minValues and maxValues\n   */\n  defaultValues?: SelectMenuDefaultValue[]\n  /** The minimum number of items that must be selected. Default 1. Between 1-25. */\n  minValues?: number\n  /** The maximum number of items that can be selected. Default 1. Between 1-25. */\n  maxValues?: number\n  /** Whether or not this select is disabled */\n  disabled?: boolean\n}\n\nexport interface SelectMenuChannelsComponent {\n  /** SelectMenuChannels Component is of type 8 */\n  type: MessageComponentTypes.SelectMenuChannels\n  /** A custom identifier for this component. Maximum 100 characters. */\n  customId: string\n  /** A custom placeholder text if nothing is selected. Maximum 150 characters. */\n  placeholder?: string\n  /**\n   * List of default values for auto-populated select menu components\n   * The number of default values must be in the range defined by minValues and maxValues\n   */\n  defaultValues?: SelectMenuDefaultValue[]\n  /** The minimum number of items that must be selected. Default 1. Between 1-25. */\n  minValues?: number\n  /** The maximum number of items that can be selected. Default 1. Between 1-25. */\n  maxValues?: number\n  /** List of channel types to include in the options list */\n  channelTypes?: ChannelTypes[]\n  /** Whether or not this select is disabled */\n  disabled?: boolean\n}\n\nexport interface SelectOption {\n  /** The user-facing name of the option. Maximum 25 characters. */\n  label: string\n  /** The dev-defined value of the option. Maximum 100 characters. */\n  value: string\n  /** An additional description of the option. Maximum 50 characters. */\n  description?: string\n  /** The id, name, and animated properties of an emoji. */\n  emoji?: {\n    /** Emoji id */\n    id?: bigint\n    /** Emoji name */\n    name?: string\n    /** Whether this emoji is animated */\n    animated?: boolean\n  }\n  /** Will render this option as already-selected by default. */\n  default?: boolean\n}\n\nexport interface SelectMenuDefaultValue {\n  /** ID of a user, role, or channel */\n  id: bigint\n  /** Type of value that id represents. */\n  type: 'user' | 'role' | 'channel'\n}\n\n/** https://discord.com/developers/docs/interactions/message-components#text-inputs-text-input-structure */\nexport interface InputTextComponent {\n  /** InputText Component is of type 4 */\n  type: MessageComponentTypes.InputText\n  /** The style of the InputText */\n  style: TextStyles\n  /** The customId of the InputText */\n  customId: string\n  /** The label of the InputText. Maximum 45 characters */\n  label: string\n  /** The placeholder of the InputText */\n  placeholder?: string\n  /** The minimum length of the text the user has to provide */\n  minLength?: number\n  /** The maximum length of the text the user has to provide */\n  maxLength?: number\n  /** Whether or not this input is required. */\n  required?: boolean\n  /** Pre-filled value for input text. */\n  value?: string\n}\n\n/** https://discord.com/developers/docs/resources/channel#allowed-mentions-object */\nexport interface AllowedMentions {\n  /** An array of allowed mention types to parse from the content. */\n  parse?: AllowedMentionsTypes[]\n  /** For replies, whether to mention the author of the message being replied to (default false) */\n  repliedUser?: boolean\n  /** Array of role_ids to mention (Max size of 100) */\n  roles?: bigint[]\n  /** Array of user_ids to mention (Max size of 100) */\n  users?: bigint[]\n}\n\nexport interface FileContent {\n  /** The file blob */\n  blob: Blob\n  /** The name of the file */\n  name: string\n}\n\n/** https://discord.com/developers/docs/resources/guild#search-guild-members-query-string-params */\nexport interface SearchMembers {\n  /** Query string to match username(s) and nickname(s) against */\n  query: string\n  /** Max number of members to return (1-1000). Default: 1 */\n  limit?: number\n}\n\nexport interface OverwriteReadable {\n  /** Role or user id */\n  id: bigint\n  /** Either 0 (role) or 1 (member) */\n  type: OverwriteTypes\n  /** Permission bit set */\n  allow?: PermissionStrings[]\n  /** Permission bit set */\n  deny?: PermissionStrings[]\n}\n\n/** https://discord.com/developers/docs/resources/channel#get-channel-messages-query-string-params */\nexport interface GetMessagesLimit {\n  /** Max number of messages to return (1-100) default 50 */\n  limit?: number\n}\n\n/** https://discord.com/developers/docs/resources/channel#get-channel-messages-query-string-params */\nexport interface GetMessagesAround extends GetMessagesLimit {\n  /** Get messages around this message id */\n  around?: BigString\n}\n\n/** https://discord.com/developers/docs/resources/channel#get-channel-messages-query-string-params */\nexport interface GetMessagesBefore extends GetMessagesLimit {\n  /** Get messages before this message id */\n  before?: BigString\n}\n\n/** https://discord.com/developers/docs/resources/channel#get-channel-messages-query-string-params */\nexport interface GetMessagesAfter extends GetMessagesLimit {\n  /** Get messages after this message id */\n  after?: BigString\n}\n\nexport type GetMessagesOptions = GetMessagesAfter | GetMessagesBefore | GetMessagesAround | GetMessagesLimit\n\n/** https://discord.com/developers/docs/resources/channel#get-reactions-query-string-params */\nexport interface GetReactions {\n  type: DiscordReactionType\n  /** Get users after this user Id */\n  after?: string\n  /** Max number of users to return (1-100) */\n  limit?: number\n}\n\n/** https://discord.com/developers/docs/resources/channel#list-public-archived-threads-query-string-params */\nexport interface ListArchivedThreads {\n  /** Returns threads before this timestamp */\n  before?: number\n  /** Optional maximum number of threads to return */\n  limit?: number\n}\n\n/** https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log-query-string-parameters */\nexport interface GetGuildAuditLog {\n  /** Entries from a specific user ID */\n  userId?: BigString\n  /** Entries for a specific audit log event */\n  actionType?: AuditLogEvents\n  /** Entries with ID less than a specific audit log entry ID. */\n  before?: BigString\n  /** Entries with ID greater than a specific audit log entry ID. */\n  after?: BigString\n  /** Maximum number of entries (between 1-100) to return, defaults to 50 */\n  limit?: number\n}\n\n/** https://discord.com/developers/docs/resources/user#get-current-user-guilds-query-string-params */\nexport interface GetUserGuilds {\n  /** Get guilds before this guild ID */\n  before?: BigString\n  /** Get guilds after this guild ID */\n  after?: BigString\n  /** Maximum number of entries (between 1-200) to return, defaults to 200 */\n  limit?: number\n  /** Include approximate member and presence counts in response, defaults to false */\n  withCounts?: boolean\n}\n\nexport interface GetBans {\n  /** Number of users to return (up to maximum 1000). Default: 1000 */\n  limit?: number\n  /** Consider only users before given user id */\n  before?: BigString\n  /** Consider only users after given user id */\n  after?: BigString\n}\n\n/** https://discord.com/developers/docs/resources/guild#list-guild-members */\nexport interface ListGuildMembers {\n  /** Max number of members to return (1-1000). Default: 1 */\n  limit?: number\n  /** The highest user id in the previous page. Default: 0 */\n  after?: string\n}\n\n/** https://discord.com/developers/docs/resources/guild#get-guild-prune-count */\nexport interface GetGuildPruneCountQuery {\n  /** Number of days to count prune for (1 or more), default: 7 */\n  days?: number\n  /** Role(s) to include, default: none */\n  includeRoles?: string | string[]\n}\n\nexport interface GetScheduledEventUsers {\n  /** number of users to return (up to maximum 100), defaults to 100 */\n  limit?: number\n  /** whether to also have member objects provided, defaults to false */\n  withMember?: boolean\n  /** consider only users before given user id */\n  before?: BigString\n  /** consider only users after given user id. If both before and after are provided, only before is respected. Fetching users in-between before and after is not supported. */\n  after?: BigString\n}\n\n/** https://discord.com/developers/docs/resources/invite#get-invite */\nexport interface GetInvite {\n  /** Whether the invite should contain approximate member counts */\n  withCounts?: boolean\n  /** Whether the invite should contain the expiration date */\n  withExpiration?: boolean\n  /** the guild scheduled event to include with the invite */\n  scheduledEventId?: BigString\n}\n\nexport type CreateApplicationCommand = CreateSlashApplicationCommand | CreateContextApplicationCommand\n\n/** https://discord.com/developers/docs/interactions/application-commands#endpoints-json-params */\nexport interface CreateSlashApplicationCommand {\n  /**\n   * Name of command, 1-32 characters.\n   * `ApplicationCommandTypes.ChatInput` command names must match the following regex `^[-_\\p{L}\\p{N}\\p{sc=Deva}\\p{sc=Thai}]{1,32}$` with the unicode flag set.\n   * If there is a lowercase variant of any letters used, you must use those.\n   * Characters with no lowercase variants and/or uncased letters are still allowed.\n   * ApplicationCommandTypes.User` and `ApplicationCommandTypes.Message` commands may be mixed case and can include spaces.\n   */\n  name: string\n  /** Localization object for the `name` field. Values follow the same restrictions as `name` */\n  nameLocalizations?: Localization\n  /** 1-100 character description */\n  description: string\n  /** Localization object for the `description` field. Values follow the same restrictions as `description` */\n  descriptionLocalizations?: Localization\n  /** Type of command, defaults `ApplicationCommandTypes.ChatInput` if not set  */\n  type?: ApplicationCommandTypes\n  /**\n   * Parameters for the command\n   *\n   * @remarks\n   * This is only valid in commands of type {@link ApplicationCommandTypes.ChatInput | ChatInput}\n   */\n  options?: Camelize<DiscordApplicationCommandOption[]>\n  /** Set of permissions represented as a bit set */\n  defaultMemberPermissions?: PermissionStrings[]\n  /**\n   * Integration types where the command is available\n   *\n   * @remarks\n   * This value is available only for globally-scoped commands\n   * Defaults to the application configured contexts\n   */\n  integrationTypes?: DiscordApplicationIntegrationType[]\n  /**\n   * Interaction context types where the command is available.\n   *\n   * @remarks\n   * This value is available only for globally-scoped commands\n   * By default, all interaction context types are included for new commands\n   */\n  contexts?: DiscordInteractionContextType[]\n  /**\n   * Indicates whether the command is available in DMs with the app, only for globally-scoped commands. By default, commands are visible.\n   *\n   * @deprecated use {@link contexts} instead\n   */\n  dmPermission?: boolean\n  /** Indicates whether the command is age-restricted, defaults to `false` */\n  nsfw?: boolean\n  /**\n   * Determines whether the interaction is handled by the app's interactions handler or by Discord\n   *\n   * @remarks\n   * This can only be set for application commands of type `PRIMARY_ENTRY_POINT` for applications with the `EMBEDDED` flag (i.e. applications that have an Activity).\n   */\n  handler?: DiscordInteractionEntryPointCommandHandlerType\n}\n\n/** https://discord.com/developers/docs/interactions/application-commands#endpoints-json-params */\nexport interface CreateContextApplicationCommand extends Omit<CreateSlashApplicationCommand, 'options' | 'description' | 'descriptionLocalizations'> {\n  /** The type of the command */\n  type: ApplicationCommandTypes.Message | ApplicationCommandTypes.User\n}\n\n/** https://discord.com/developers/docs/interactions/slash-commands#interaction-response-interactionapplicationcommandcallbackdata */\nexport interface InteractionCallbackData {\n  /** The message contents (up to 2000 characters) */\n  content?: string\n  /** True if this is a TTS message */\n  tts?: boolean\n  /** Embedded `rich` content (up to 6000 characters) */\n  embeds?: Camelize<DiscordEmbed>[]\n  /** Allowed mentions for the message */\n  allowedMentions?: AllowedMentions\n  /** The contents of the files being sent */\n  files?: FileContent[]\n  /** The customId you want to use for this modal response. */\n  customId?: string\n  /** The title you want to use for this modal response. */\n  title?: string\n  /** The components you would like to have sent in this message */\n  components?: MessageComponents\n  /** Message flags combined as a bit field (only `SUPPRESS_EMBEDS`, `EPHEMERAL` and `SUPPRESS_NOTIFICATIONS` can be set) */\n  flags?: number\n  /** Autocomplete choices (max of 25 choices) */\n  choices?: Camelize<DiscordApplicationCommandOptionChoice[]>\n  /** Details about the poll */\n  poll?: CreatePoll\n}\n\n/** https://discord.com/developers/docs/interactions/slash-commands#interaction-response */\nexport interface InteractionResponse {\n  /** The type of response */\n  type: InteractionResponseTypes\n  /** An optional response message */\n  data?: InteractionCallbackData\n}\n\n/** https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response-query-string-params */\nexport interface InteractionCallbackOptions {\n  withResponse?: boolean\n}\n\n/** https://discord.com/developers/docs/resources/emoji#create-guild-emoji */\nexport interface CreateGuildEmoji {\n  /** Name of the emoji */\n  name: string\n  /** The 128x128 emoji image. Emojis and animated emojis have a maximum file size of 256kb. Attempting to upload an emoji larger than this limit will fail and return 400 Bad Request and an error message, but not a JSON status code. If a URL is provided to the image parameter, Discordeno will automatically convert it to a base64 string internally. */\n  image: string\n  /** Roles allowed to use this emoji */\n  roles?: BigString[]\n}\n\n/** https://discord.com/developers/docs/resources/emoji#create-application-emoji */\nexport interface CreateApplicationEmoji {\n  /** Name of the emoji */\n  name: string\n  /** The 128x128 emoji image. Emojis and animated emojis have a maximum file size of 256kb. Attempting to upload an emoji larger than this limit will fail and return 400 Bad Request and an error message, but not a JSON status code. If a URL is provided to the image parameter, Discordeno will automatically convert it to a base64 string internally. */\n  image: string\n}\n\n/** https://discord.com/developers/docs/resources/emoji#modify-guild-emoji */\nexport interface ModifyGuildEmoji {\n  /** Name of the emoji */\n  name?: string\n  /** Roles allowed to use this emoji */\n  roles?: BigString[] | null\n}\n\n/** https://discord.com/developers/docs/resources/emoji#modify-application-emoji */\nexport interface ModifyApplicationEmoji {\n  /** Name of the emoji */\n  name?: string\n}\n\n/** https://discord.com/developers/docs/topics/gateway#request-guild-members */\nexport interface RequestGuildMembers {\n  /** id of the guild to get members for */\n  guildId: BigString\n  /** String that username starts with, or an empty string to return all members */\n  query?: string\n  /** Maximum number of members to send matching the query; a limit of 0 can be used with an empty string query to return all members */\n  limit: number\n  /** Used to specify if we want the presences of the matched members */\n  presences?: boolean\n  /** Used to specify which users you wish to fetch */\n  userIds?: BigString[]\n  /** Nonce to identify the Guild Members Chunk response */\n  nonce?: string\n}\n\nexport interface CreateGuildChannel {\n  /** Channel name (1-100 characters) */\n  name: string\n  /** The type of channel */\n  type?: ChannelTypes\n  /** Channel topic (0-1024 characters) */\n  topic?: string\n  /** The bitrate (in bits) of the voice channel (voice only) */\n  bitrate?: number\n  /** The user limit of the voice channel (voice only) */\n  userLimit?: number\n  /** Amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission `manage_messages` or `manage_channel`, are unaffected */\n  rateLimitPerUser?: number\n  /** Sorting position of the channel (channels with the same position are sorted by id) */\n  position?: number\n  /** The channel's permission overwrites */\n  permissionOverwrites?: OverwriteReadable[]\n  /** Id of the parent category for a channel */\n  parentId?: BigString\n  /** Whether the channel is nsfw */\n  nsfw?: boolean\n  /** Default duration (in minutes) that clients (not the API) use for newly created threads in this channel, to determine when to automatically archive the thread after the last activity */\n  defaultAutoArchiveDuration?: number\n  /** Emoji to show in the add reaction button on a thread in a forum channel */\n  defaultReactionEmoji?: {\n    /** The id of a guild's custom emoji. Exactly one of `emojiId` and `emojiName` must be set. */\n    emojiId?: BigString | null\n    /** The unicode character of the emoji. Exactly one of `emojiId` and `emojiName` must be set. */\n    emojiName?: string | null\n  }\n  /** Set of tags that can be used in a forum channel */\n  availableTags?: Array<{\n    /** The id of the tag */\n    id: BigString\n    /** The name of the tag (0-20 characters) */\n    name: string\n    /** whether this tag can only be added to or removed from threads by a member with the MANAGE_THREADS permission */\n    moderated: boolean\n    /** The id of a guild's custom emoji */\n    emojiId: BigString\n    /** The unicode character of the emoji */\n    emojiName?: string\n  }>\n  /** The default sort order type used to order posts in forum channels */\n  defaultSortOrder?: SortOrderTypes | null\n  /** The initial ratelimit to set on newly created threads in a channel. */\n  defaultThreadRateLimitPerUser?: number\n}\n\nexport interface CreateGlobalApplicationCommandOptions {\n  /** The bearer token of the developer of the application */\n  bearerToken: string\n}\n\nexport interface CreateGuildApplicationCommandOptions {\n  /** The bearer token of the developer of the application */\n  bearerToken: string\n}\n\nexport interface UpsertGlobalApplicationCommandOptions {\n  /** The bearer token of the developer of the application */\n  bearerToken: string\n}\n\nexport interface UpsertGuildApplicationCommandOptions {\n  /** The bearer token of the developer of the application */\n  bearerToken: string\n}\n\n/** https://discord.com/developers/docs/resources/user#create-group-dm-json-params */\nexport interface GetGroupDmOptions {\n  /** Access tokens of users that have granted your app the `gdm.join` scope */\n  accessTokens: string[]\n  /** A mapping of user ids to their respective nicknames */\n  nicks?: Record<string, string>\n}\n\n/** https://discord.com/developers/docs/resources/channel#group-dm-add-recipient-json-params */\nexport interface AddDmRecipientOptions {\n  /** access token of a user that has granted your app the `gdm.join` scope */\n  accessToken: string\n  /** nickname of the user being added */\n  nick?: string\n}\n\n/** https://discord.com/developers/docs/resources/guild#add-guild-member-json-params */\nexport interface AddGuildMemberOptions {\n  /** access token of a user that has granted your app the `guilds.join` scope */\n  accessToken: string\n  /** Value to set user's nickname to. Requires MANAGE_NICKNAMES permission on the bot */\n  nick?: string\n  /** Array of role ids the member is assigned. Requires MANAGE_ROLES permission on the bot */\n  roles?: string[]\n  /** Whether the user is muted in voice channels. Requires MUTE_MEMBERS permission on the bot */\n  mute?: boolean\n  /** Whether the user is deafened in voice channels. Requires DEAFEN_MEMBERS permission on the bot */\n  deaf?: boolean\n}\n\n/**\n * - https://discord.com/developers/docs/resources/channel#modify-channel-json-params-group-dm\n * - https://discord.com/developers/docs/resources/channel#modify-channel-json-params-guild-channel\n * - https://discord.com/developers/docs/resources/channel#modify-channel-json-params-thread\n */\nexport interface ModifyChannel {\n  /**\n   * 1-100 character channel name\n   *\n   * @remarks\n   * This is valid only when editing group dms, any guild channel type, or a thread\n   */\n  name?: string\n  /**\n   * Base64 encoded icon\n   *\n   * @remarks\n   * This is valid only when editing group dms\n   */\n  icon?: string\n  /**\n   * The type of channel\n   *\n   * @remarks\n   * You can only convert between {@link ChannelTypes.GuildText} channels and {@link ChannelTypes.GuildAnnouncement} channels when the guild has the `NEWS` feature\n   *\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildText} or {@link ChannelTypes.GuildAnnouncement}.\n   */\n  type?: ChannelTypes\n  /**\n   * The position of the channel in the left-hand listing (channels with the same position are sorted by id)\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of any type\n   */\n  position?: number | null\n  /**\n   * Channel topic\n   *\n   * @remarks\n   * 0-1024 character channel topic, or for {@link ChannelTypes.GuildForum} and {@link ChannelTypes.GuildMedia} 0-4096\n   *\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildText}, {@link ChannelTypes.GuildAnnouncement}, {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}.\n   */\n  topic?: string | null\n  /**\n   * Whether the channel is nsfw\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildText}, {@link ChannelTypes.GuildVoice}, {@link ChannelTypes.GuildAnnouncement}, {@link ChannelTypes.GuildStageVoice} {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}.\n   */\n  nsfw?: boolean | null\n  /**\n   * Amount of seconds a user has to wait before sending another message in seconds (0-21600)\n   *\n   * @remarks\n   * Bots and users with the permission `MANAGE_MESSAGES` or `MANAGE_CHANNEL`, are unaffected\n   *\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildText}, {@link ChannelTypes.GuildVoice}, {@link ChannelTypes.GuildStageVoice} {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}, or a thread.\n   */\n  rateLimitPerUser?: number | null\n  /**\n   * The bitrate (in bits) of the voice or stage channel\n   *\n   * @remarks\n   * Minimum of 8000 bits\n   *\n   * For voice channels:\n   * - normal servers can set bitrate up to 96000\n   * - servers with Boost level 1 can set up to 128000\n   * - servers with Boost level 2 can set up to 256000\n   * - servers with Boost level 3 or the `VIP_REGIONS` guild feature can set up to 384000.\n   *\n   * For stage channels, bitrate can be set up to 64000.\n   *\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildVoice}, {@link ChannelTypes.GuildStageVoice}.\n   */\n  bitrate?: number | null\n  /**\n   * The user limit of the voice or stage channel (0 refers to no limit)\n   *\n   * @remarks\n   * - For voice channels, the max is set to 99\n   * - For stage channels, the max is set to 10,000\n   *\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildVoice}, {@link ChannelTypes.GuildStageVoice}.\n   */\n  userLimit?: number | null\n  /**\n   * Channel or category-specific permissions\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of any type\n   */\n  permissionOverwrites?: OverwriteReadable[] | null\n  /**\n   * Id of the new parent category for a channel\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildText}, {@link ChannelTypes.GuildVoice}, {@link ChannelTypes.GuildAnnouncement}, {@link ChannelTypes.GuildStageVoice} {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}.\n   */\n  parentId?: BigString | null\n  /**\n   * Voice region id for the voice channel, automatic when set to null\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildVoice}, {@link ChannelTypes.GuildStageVoice}.\n   */\n  rtcRegion?: string | null\n  /**\n   * The camera video quality mode of the voice channel\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildVoice}, {@link ChannelTypes.GuildStageVoice}.\n   */\n  videoQualityMode?: VideoQualityModes\n  /**\n   * The default duration that the clients use (not the API) for newly created threads in the channel, in minutes, to automatically archive the thread after recent activity\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildText}, {@link ChannelTypes.GuildAnnouncement}, {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}.\n   */\n  defaultAutoArchiveDuration?: 60 | 1440 | 4320 | 10080\n  /**\n   * Channel flags combined as a bitfield.\n   *\n   * @remarks\n   * - `REQUIRE_TAG` is supported only by {@link ChannelTypes.GuildForum} and {@link ChannelTypes.GuildMedia} channels.\n   * - `HIDE_MEDIA_DOWNLOAD_OPTIONS` is supported only by {@link ChannelTypes.GuildMedia} channels\n   * - `PINNED` can only be set for threads in {@link ChannelTypes.GuildForum} and {@link ChannelTypes.GuildMedia} channels\n   *\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}, or a thread.\n   */\n  flags?: number\n  /**\n   * The set of tags that can be used in a {@link ChannelTypes.GuildForum} or a {@link ChannelTypes.GuildMedia} channel\n   *\n   * @remarks\n   * Limited to 20 tags\n   *\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}.\n   */\n  availableTags?: DiscordForumTag[]\n  /**\n   * The emoji to show in the add reaction button on a thread in a {@link ChannelTypes.GuildForum} or a {@link ChannelTypes.GuildMedia} channel\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}.\n   */\n  defaultReactionEmoji?: DiscordDefaultReactionEmoji\n  /**\n   * The initial `rate_limit_per_user` to set on newly created threads in a channel.\n   *\n   * @remarks\n   * This field is copied to the thread at creation time and does not live update.\n   *\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildText}, {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}.\n   */\n  defaultThreadRateLimitPerUser?: number\n  /**\n   * The default sort order type used to order posts in {@link ChannelTypes.GuildForum} and {@link ChannelTypes.GuildMedia} channels\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildForum} or {@link ChannelTypes.GuildMedia}.\n   */\n  defaultSortOrder?: SortOrderTypes | null\n  /**\n   * The default forum layout type used to display posts in {@link ChannelTypes.GuildForum} channels\n   *\n   * @remarks\n   * This is only valid when editing a guild channel of type {@link ChannelTypes.GuildForum}.\n   */\n  defaultFormLayout?: ForumLayout\n  /**\n   * Whether the thread is archived\n   *\n   * @remarks\n   * This is only valid when editing a thread\n   */\n  archived?: boolean\n  /**\n   * The thread will stop showing in the channel list after `auto_archive_duration` minutes of inactivity\n   *\n   * @remarks\n   * This is only valid when editing a thread\n   */\n  autoArchiveDuration?: 60 | 1440 | 4320 | 10080\n  /**\n   * Whether the thread is locked. When a thread is locked, only users with `MANAGE_THREADS` can unarchive it\n   *\n   * @remarks\n   * This is only valid when editing a thread\n   */\n  locked?: boolean\n  /**\n   * Whether non-moderators can add other non-moderators to a thread\n   *\n   * @remarks\n   * Only available on private threads\n   *\n   * This is only valid when editing a thread\n   */\n  invitable?: boolean\n  /**\n   * The IDs of the set of tags that have been applied to a thread in a {@link ChannelTypes.GuildForum} or a {@link ChannelTypes.GuildMedia} channel\n   *\n   * @remarks\n   * Limited to 5\n   *\n   * This is only valid when editing a thread\n   */\n  appliedTags?: BigString[]\n}\n\nexport interface EditChannelPermissionOverridesOptions extends OverwriteReadable {}\n\n/** https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions */\nexport interface ModifyGuildChannelPositions {\n  /** Channel id */\n  id: BigString\n  /** Sorting position of the channel (channels with the same position are sorted by id) */\n  position?: number | null\n  /** Syncs the permission overwrites with the new parent, if moving to a new category */\n  lockPositions?: boolean | null\n  /** The new parent ID for the channel that is moved */\n  parentId?: BigString | null\n}\n\nexport interface ModifyWebhook {\n  /** The default name of the webhook */\n  name?: string\n  /** Image for the default webhook avatar */\n  avatar?: BigString | null\n  /** The new channel id this webhook should be moved to */\n  channelId?: BigString\n}\n\n/** https://discord.com/developers/docs/resources/webhook#execute-webhook */\nexport interface ExecuteWebhook {\n  /** Waits for server confirmation of message send before response, and returns the created message body (defaults to `false`; when `false` a message that is not saved does not return an error) */\n  wait?: boolean\n  /** Send a message to the specified thread within a webhook's channel. The thread will automatically be unarchived. */\n  threadId?: BigString\n  /** Name of the thread to create (target channel has to be type of forum channel) */\n  threadName?: string\n  /** Array of tag ids to apply to the thread (requires the webhook channel to be a forum or media channel) */\n  appliedTags?: BigString[]\n  /** The message contents (up to 2000 characters) */\n  content?: string\n  /** Override the default username of the webhook */\n  username?: string\n  /** Override the default avatar of the webhook */\n  avatarUrl?: string\n  /** True if this is a TTS message */\n  tts?: boolean\n  /** The contents of the files being sent */\n  files?: FileContent[]\n  /** Embedded `rich` content */\n  embeds?: Camelize<DiscordEmbed>[]\n  /** Allowed mentions for the message */\n  allowedMentions?: AllowedMentions\n  /** the components to include with the message */\n  components?: MessageComponents\n  /** A poll object */\n  poll?: CreatePoll\n}\n\nexport interface GetWebhookMessageOptions {\n  /** id of the thread the message is in */\n  threadId: BigString\n}\n\nexport interface DeleteWebhookMessageOptions {\n  /** id of the thread the message is in */\n  threadId: BigString\n}\n\nexport interface CreateForumPostWithMessage {\n  /** 1-100 character thread name */\n  name: string\n  /** Duration in minutes to automatically archive the thread after recent activity */\n  autoArchiveDuration: 60 | 1440 | 4320 | 10080\n  /** Amount of seconds a user has to wait before sending another message (0-21600) */\n  rateLimitPerUser?: number | null\n  /** contents of the first message in the forum/media thread */\n  message: {\n    /** The message contents (up to 2000 characters) */\n    content?: string\n    /** Embedded `rich` content (up to 6000 characters) */\n    embeds?: Camelize<DiscordEmbed>[]\n    /** Allowed mentions for the message */\n    allowedMentions?: AllowedMentions\n    /** The components you would like to have sent in this message */\n    components?: MessageComponents\n    /** IDs of up to 3 stickers in the server to send in the message */\n    stickerIds?: BigString[]\n    /** Message flags combined as a bitfield, only SUPPRESS_EMBEDS and SUPPRESS_NOTIFICATIONS can be set */\n    flags?: MessageFlags\n  }\n  /** The IDs of the set of tags that have been applied to a thread in a GUILD_FORUM or a GUILD_MEDIA channel */\n  appliedTags?: BigString[]\n  /** The contents of the files being sent */\n  files?: FileContent[]\n}\n\nexport interface CreateStageInstance {\n  /** The id of the Stage channel */\n  channelId: BigString\n  /** The topic of the Stage instance (1-120 characters) */\n  topic: string\n  /** Notify \\@everyone that the stage instance has started. Requires the MENTION_EVERYONE permission. */\n  sendStartNotification?: boolean\n  /** The guild scheduled event associated with this Stage instance */\n  guildScheduledEventId?: BigString\n}\n\nexport interface EditStageInstanceOptions {\n  /** The topic of the Stage instance (1-120 characters) */\n  topic: string\n}\n\nexport interface StartThreadWithMessage {\n  /** 1-100 character thread name */\n  name: string\n  /** Duration in minutes to automatically archive the thread after recent activity */\n  autoArchiveDuration: 60 | 1440 | 4320 | 10080\n  /** Amount of seconds a user has to wait before sending another message (0-21600) */\n  rateLimitPerUser?: number | null\n}\n\nexport interface StartThreadWithoutMessage {\n  /** 1-100 character thread name */\n  name: string\n  /** Duration in minutes to automatically archive the thread after recent activity */\n  autoArchiveDuration: 60 | 1440 | 4320 | 10080\n  /** Amount of seconds a user has to wait before sending another message (0-21600) */\n  rateLimitPerUser?: number | null\n  /** the type of thread to create */\n  type: ChannelTypes.AnnouncementThread | ChannelTypes.PublicThread | ChannelTypes.PrivateThread\n  /** whether non-moderators can add other non-moderators to a thread; only available when creating a private thread */\n  invitable?: boolean\n}\n\nexport interface CreateAutoModerationRuleOptions {\n  /** The name of the rule. */\n  name: string\n  /** The type of event to trigger the rule on. */\n  eventType: AutoModerationEventTypes\n  /** The type of trigger to use for the rule. */\n  triggerType: AutoModerationTriggerTypes\n  /** The metadata to use for the trigger. */\n  triggerMetadata: {\n    /** The keywords needed to match. Only present when TriggerType.Keyword */\n    keywordFilter?: string[]\n    /** Regular expression patterns which will be matched against content. Only present when TriggerType.Keyword */\n    regexPatterns?: string[]\n    /** The pre-defined lists of words to match from. Only present when TriggerType.KeywordPreset */\n    presets?: DiscordAutoModerationRuleTriggerMetadataPresets[]\n    /** The substrings which will exempt from triggering the preset trigger type. Only present when TriggerType.KeywordPreset */\n    allowList?: string[]\n    /** Total number of mentions (role & user) allowed per message (Maximum of 50). Only present when TriggerType.MentionSpam */\n    mentionTotalLimit?: number\n  }\n  /** The actions that will trigger for this rule */\n  actions: Array<{\n    /** The type of action to take when a rule is triggered */\n    type: AutoModerationActionType\n    /** additional metadata needed during execution for this specific action type */\n    metadata?: {\n      /** The id of channel to which user content should be logged. Only in SendAlertMessage */\n      channelId?: BigString\n      /** Timeout duration in seconds. Max is 2419200(4 weeks). Only supported for TriggerType.Keyword */\n      durationSeconds?: number\n    }\n  }>\n  /** Whether the rule should be enabled, true by default. */\n  enabled?: boolean\n  /** The role ids that should not be effected by the rule */\n  exemptRoles?: BigString[]\n  /** The channel ids that should not be effected by the rule. */\n  exemptChannels?: BigString[]\n}\n\nexport interface EditAutoModerationRuleOptions {\n  /** The name of the rule. */\n  name: string\n  /** The type of event to trigger the rule on. */\n  eventType: AutoModerationEventTypes\n  /** The metadata to use for the trigger. */\n  triggerMetadata: {\n    /** The keywords needed to match. Only present when TriggerType.Keyword */\n    keywordFilter?: string[]\n    /** The pre-defined lists of words to match from. Only present when TriggerType.KeywordPreset */\n    presets?: DiscordAutoModerationRuleTriggerMetadataPresets[]\n    /** The substrings which will exempt from triggering the preset trigger type. Only present when TriggerType.KeywordPreset */\n    allowList?: string[]\n    /** Total number of mentions (role & user) allowed per message (Maximum of 50) */\n    mentionTotalLimit: number\n  }\n  /** The actions that will trigger for this rule */\n  actions: Array<{\n    /** The type of action to take when a rule is triggered */\n    type: AutoModerationActionType\n    /** additional metadata needed during execution for this specific action type */\n    metadata: {\n      /** The id of channel to which user content should be logged. Only in SendAlertMessage */\n      channelId?: BigString\n      /** Timeout duration in seconds. Only supported for TriggerType.Keyword */\n      durationSeconds?: number\n    }\n  }>\n  /** Whether the rule should be enabled. */\n  enabled?: boolean\n  /** The role ids that should not be effected by the rule */\n  exemptRoles?: BigString[]\n  /** The channel ids that should not be effected by the rule. */\n  exemptChannels?: BigString[]\n}\n\nexport interface CreateScheduledEvent {\n  /** the channel id of the scheduled event. */\n  channelId?: BigString\n  /** location of the event. Required for events with `entityType: ScheduledEventEntityType.External` */\n  location?: string\n  /** the name of the scheduled event */\n  name: string\n  /** the description of the scheduled event */\n  description: string\n  /** the time the scheduled event will start */\n  scheduledStartTime: string\n  /** the time the scheduled event will end if it does end. Required for events with `entityType: ScheduledEventEntityType.External` */\n  scheduledEndTime?: string\n  /** the privacy level of the scheduled event */\n  privacyLevel?: ScheduledEventPrivacyLevel\n  /** the type of hosting entity associated with a scheduled event */\n  entityType: ScheduledEventEntityType\n  /** the cover image of the scheduled event */\n  image?: string\n  /** the definition for how often this event should recur */\n  recurrenceRule?: DiscordScheduledEventRecurrenceRule\n}\n\nexport interface EditScheduledEvent {\n  /** the channel id of the scheduled event. null if switching to external event. */\n  channelId: BigString | null\n  /** location of the event */\n  location?: string\n  /** the name of the scheduled event */\n  name: string\n  /** the description of the scheduled event */\n  description?: string\n  /** the time the scheduled event will start */\n  scheduledStartTime: string\n  /** the time the scheduled event will end if it does end. */\n  scheduledEndTime?: string\n  /** the privacy level of the scheduled event */\n  privacyLevel: ScheduledEventPrivacyLevel\n  /** the type of hosting entity associated with a scheduled event */\n  entityType: ScheduledEventEntityType\n  /** the status of the scheduled event */\n  status: ScheduledEventStatus\n  /** the cover image of the scheduled event */\n  image?: string\n  /** the definition for how often this event should recur */\n  recurrenceRule?: DiscordScheduledEventRecurrenceRule | null\n}\n\nexport interface GetScheduledEvents {\n  /** include number of users subscribed to each event */\n  withUserCount?: boolean\n}\n\nexport interface CreateChannelInvite {\n  /** Duration of invite in seconds before expiry, or 0 for never. Between 0 and 604800 (7 days). Default: 86400 (24 hours) */\n  maxAge?: number\n  /** Max number of users or 0 for unlimited. Between 0 and 100. Default: 0 */\n  maxUses?: number\n  /** Whether this invite only grants temporary membership. Default: false */\n  temporary?: boolean\n  /** If true, don't try to reuse similar invite (useful for creating many unique one time use invites). Default: false */\n  unique?: boolean\n  /** The type of target for this voice channel invite */\n  targetType?: TargetTypes\n  /** The id of the user whose stream to display for this invite, required if `target_type` is 1, the user must be streaming in the channel */\n  targetUserId?: BigString\n  /** The id of the embedded application to open for this invite, required if `target_type` is 2, the application must have the `EMBEDDED` flag */\n  targetApplicationId?: BigString\n}\n\n/** https://discord.com/developers/docs/resources/channel#edit-message-json-params */\nexport interface EditMessage {\n  /** The new message contents (up to 2000 characters) */\n  content?: string | null\n  /** Embedded `rich` content (up to 6000 characters) */\n  embeds?: Camelize<DiscordEmbed>[] | null\n  /** Edit the flags of the message (only `SUPPRESS_EMBEDS` can currently be set/unset) */\n  flags?: MessageFlags | null\n  /** The contents of the files being sent/edited */\n  files?: FileContent[]\n  /** Allowed mentions for the message */\n  allowedMentions?: AllowedMentions\n  /** When specified (adding new attachments), attachments which are not provided in this list will be removed. */\n  attachments?: (Pick<Camelize<DiscordAttachment>, 'id'> & Omit<Partial<Camelize<DiscordAttachment>>, 'id'>)[]\n  /** The components you would like to have sent in this message */\n  components?: MessageComponents\n}\n\n/** Additional properties for https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command-permissions and https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command-permissions */\nexport interface GetApplicationCommandPermissionOptions {\n  /** Access token of the user. Requires the `applications.commands.permissions.update` scope */\n  accessToken: string\n  /** Id of the application */\n  applicationId: BigString\n}\n\n/** https://discord.com/developers/docs/resources/guild#create-guild */\nexport interface CreateGuild {\n  /** Name of the guild (1-100 characters) */\n  name: string\n  /** Base64 128x128 image for the guild icon */\n  icon?: string\n  /** Verification level */\n  verificationLevel?: VerificationLevels\n  /** Default message notification level */\n  defaultMessageNotifications?: DefaultMessageNotificationLevels\n  /** Explicit content filter level */\n  explicitContentFilter?: ExplicitContentFilterLevels\n  /** New guild roles (first role is the everyone role) */\n  roles?: Camelize<DiscordRole[]>\n  /** New guild's channels */\n  channels?: Partial<Camelize<DiscordChannel>>[]\n  /** Id for afk channel */\n  afkChannelId?: string\n  /** Afk timeout in seconds */\n  afkTimeout?: number\n  /** The id of the channel where guild notices such as welcome messages and boost events are posted */\n  systemChannelId?: string\n  /** System channel flags */\n  systemChannelFlags?: SystemChannelFlags\n}\n\nexport interface CreateGuildRole {\n  /** Name of the role, max 100 characters, default: \"new role\" */\n  name?: string\n  /** Bitwise value of the enabled/disabled permissions, default: everyone permissions in guild */\n  permissions?: PermissionStrings[]\n  /** RGB color value, default: 0 */\n  color?: number\n  /** Whether the role should be displayed separately in the sidebar, default: false */\n  hoist?: boolean\n  /** Whether the role should be mentionable, default: false */\n  mentionable?: boolean\n  /** The role's unicode emoji (if the guild has the `ROLE_ICONS` feature) */\n  unicodeEmoji?: string\n  /** the role's icon image (if the guild has the `ROLE_ICONS` feature) */\n  icon?: string\n}\n\nexport interface EditGuildRole {\n  /** Name of the role, max 100 characters, default: \"new role\" */\n  name?: string\n  /** Bitwise value of the enabled/disabled permissions, default: everyone permissions in guild */\n  permissions?: PermissionStrings[]\n  /** RGB color value, default: 0 */\n  color?: number\n  /** Whether the role should be displayed separately in the sidebar, default: false */\n  hoist?: boolean\n  /** Whether the role should be mentionable, default: false */\n  mentionable?: boolean\n  /** The role's unicode emoji (if the guild has the `ROLE_ICONS` feature) */\n  unicodeEmoji?: string\n  /** the role's icon image (if the guild has the `ROLE_ICONS` feature) */\n  icon?: string\n}\n\nexport interface ModifyRolePositions {\n  /** The role id */\n  id: BigString\n  /** The sorting position for the role. (roles with the same position are sorted by id) */\n  position?: number | null\n}\n\n/** https://discord.com/developers/docs/resources/guild#modify-guild */\nexport interface ModifyGuild {\n  /** Guild name */\n  name?: string\n  /** Verification level */\n  verificationLevel?: VerificationLevels | null\n  /** Default message notification filter level */\n  defaultMessageNotifications?: DefaultMessageNotificationLevels | null\n  /** Explicit content filter level */\n  explicitContentFilter?: ExplicitContentFilterLevels | null\n  /** Id for afk channel */\n  afkChannelId?: BigString | null\n  /** Afk timeout in seconds */\n  afkTimeout?: number\n  /** Base64 1024x1024 png/jpeg/gif image for the guild icon (can be animated gif when the server has the `ANIMATED_ICON` feature) */\n  icon?: string | null\n  /** User id to transfer guild ownership to (must be owner) */\n  ownerId?: BigString\n  /** Base64 16:9 png/jpeg image for the guild splash (when the server has `INVITE_SPLASH` feature) */\n  splash?: string | null\n  /** Base64 16:9 png/jpeg image for the guild discovery spash (when the server has the `DISCOVERABLE` feature) */\n  discoverySplash?: string | null\n  /** Base64 16:9 png/jpeg image for the guild banner (when the server has BANNER feature) */\n  banner?: string | null\n  /** The id of the channel where guild notices such as welcome messages and boost events are posted */\n  systemChannelId?: BigString | null\n  /** System channel flags */\n  systemChannelFlags?: SystemChannelFlags\n  /** The id of the channel where Community guilds display rules and/or guidelines */\n  rulesChannelId?: BigString | null\n  /** The id of the channel where admins and moderators of Community guilds receive notices from Discord */\n  publicUpdatesChannelId?: BigString | null\n  /** The preferred locale of a Community guild used in server discovery and notices from Discord; defaults to \"en-US\" */\n  preferredLocale?: string | null\n  /** Enabled guild features */\n  features?: GuildFeatures[]\n  /** Whether the guild's boost progress bar should be enabled */\n  premiumProgressBarEnabled?: boolean\n}\n\nexport interface CreateGuildStickerOptions {\n  /** Name of the sticker (2-30 characters) */\n  name: string\n  /** Description of the sticker (empty or 2-100 characters) */\n  description: string\n  /** Autocomplete/suggestion tags for the sticker (max 200 characters) */\n  tags: string\n  /** The sticker file to upload, must be a PNG, APNG, or Lottie JSON file, max 512 KB */\n  file: FileContent\n}\n\nexport interface EditGuildStickerOptions {\n  /** Name of the sticker (2-30 characters) */\n  name?: string\n  /** Description of the sticker (empty or 2-100 characters) */\n  description?: string | null\n  /** Autocomplete/suggestion tags for the sticker (max 200 characters) */\n  tags?: string\n}\n\n/** https://discord.com/developers/docs/resources/template#create-guild-from-template-json-params */\nexport interface CreateGuildFromTemplate {\n  /** Name of the guild (2-100 characters) */\n  name: string\n  /** base64 128x128 image for the guild icon */\n  icon?: string\n}\n\n/** https://discord.com/developers/docs/resources/guild#update-current-user-voice-state */\nexport interface EditOwnVoiceState {\n  /** The id of the channel the user is currently in */\n  channelId: BigString\n  /** Toggles the user's suppress state */\n  suppress?: boolean\n  /** Sets the user's request to speak */\n  requestToSpeakTimestamp?: number | null\n}\n\n/** https://discord.com/developers/docs/resources/guild#update-user-voice-state */\nexport interface EditUserVoiceState {\n  /** The id of the channel the user is currently in */\n  channelId: BigString\n  /** Toggles the user's suppress state */\n  suppress?: boolean\n  /** The user id to target */\n  userId: BigString\n}\n\n/** https://discord.com/developers/docs/resources/guild#get-guild-widget-image-query-string-params */\nexport interface GetGuildWidgetImageQuery {\n  /**\n   * Style of the widget returned, default: shield\n   *\n   * Shield: Widget with Discord icon and guild members online count.\n   * Banner1: Large image with guild icon, name and online count. \"POWERED BY DISCORD\" as the footer of the widget\n   * Banner2: Smaller widget style with guild icon, name and online count. Split on the right with Discord logo\n   * Banner3: Large image with guild icon, name and online count. In the footer, Discord logo on the left and \"Chat Now\" on the right\n   * Banner4: Large Discord logo at the top of the widget. Guild icon, name and online count in the middle portion of the widget and a \"JOIN MY SERVER\" button at the bottom\n   */\n  style?: 'shield' | 'banner1' | 'banner2' | 'banner3' | 'banner4'\n}\n\nexport interface CreateTemplate {\n  /** Name which the template should have */\n  name: string\n  /** Description of the template */\n  description?: string\n}\n\n/** https://discord.com/developers/docs/resources/template#modify-guild-template */\nexport interface ModifyGuildTemplate {\n  /** Name of the template (1-100 characters) */\n  name?: string\n  /** Description of the template (0-120 characters) */\n  description?: string | null\n}\n\n/** https://discord.com/developers/docs/resources/guild#create-guild-ban */\nexport interface CreateGuildBan {\n  /**\n   * Number of seconds to delete messages for, between 0 and 604800 (7 days)\n   *\n   * @default 0\n   */\n  deleteMessageSeconds?: number\n}\n\n/** https://discord.com/developers/docs/resources/guild#bulk-guild-ban-json-params */\nexport interface CreateGuildBulkBan {\n  /** list of user ids to ban (max 200) */\n  userIds: BigString[]\n  /**\n   * Number of seconds to delete messages for, between 0 and 604800 (7 days)\n   *\n   * @default 0\n   */\n  deleteMessageSeconds?: number\n}\n\nexport interface EditBotMemberOptions {\n  nick?: string | null\n}\n\n/** https://discord.com/developers/docs/resources/guild#modify-guild-member */\nexport interface ModifyGuildMember {\n  /** Value to set users nickname to. Requires the `MANAGE_NICKNAMES` permission */\n  nick?: string | null\n  /** Array of role ids the member is assigned. Requires the `MANAGE_ROLES` permission */\n  roles?: BigString[] | null\n  /** Whether the user is muted in voice channels. Will throw a 400 if the user is not in a voice channel. Requires the `MUTE_MEMBERS` permission */\n  mute?: boolean | null\n  /** Whether the user is deafened in voice channels. Will throw a 400 if the user is not in a voice channel. Requires the `MOVE_MEMBERS` permission */\n  deaf?: boolean | null\n  /** Id of channel to move user to (if they are connected to voice). Requires the `MOVE_MEMBERS` permission */\n  channelId?: BigString | null\n  /** When the user's timeout will expire and the user will be able to communicate in the guild again (up to 28 days in the future), set to null to remove timeout. Requires the `MODERATE_MEMBERS` permission. The date must be given in a ISO string form. */\n  communicationDisabledUntil?: string | null\n  /** Set the flags for the guild member. Requires the `MANAGE_GUILD` or `MANAGE_ROLES` or the combination of `MODERATE_MEMBERS` and `KICK_MEMBERS` and `BAN_MEMBERS` */\n  flags?: number\n}\n\n/** https://discord.com/developers/docs/resources/guild#begin-guild-prune */\nexport interface BeginGuildPrune {\n  /** Number of days to prune (1 or more), default: 7 */\n  days?: number\n  /** Whether 'pruned' is returned, discouraged for large guilds, default: true */\n  computePruneCount?: boolean\n  /** Role(s) ro include, default: none */\n  includeRoles?: string[]\n}\n\n/** https://discord.com/developers/docs/resources/guild#modify-guild-onboarding-json-params */\nexport interface EditGuildOnboarding {\n  /** Prompts shown during onboarding and in customize community */\n  prompts: Camelize<DiscordGuildOnboardingPrompt>[]\n  /** Channel IDs that members get opted into automatically */\n  defaultChannelIds: BigString[]\n  /** Whether onboarding is enabled in the guild */\n  enabled: boolean\n  /** Current mode of onboarding */\n  mode: DiscordGuildOnboardingMode\n}\n\n/** https://discord.com/developers/docs/monetization/entitlements#list-entitlements-query-params */\nexport interface GetEntitlements {\n  /** User ID to look up entitlements for */\n  userId?: BigString\n  /** Optional list of SKU IDs to check entitlements for */\n  skuIds?: BigString[]\n  /** Retrieve entitlements before this entitlement ID */\n  before?: BigString\n  /** Retrieve entitlements after this entitlement ID */\n  after?: BigString\n  /** Number of entitlements to return, 1-100, default 100 */\n  limit?: number\n  /** Guild ID to look up entitlements for */\n  guildId?: BigString\n  /** Whether or not ended entitlements should be omitted. Defaults to false, ended entitlements are included by default. */\n  excludeEnded?: boolean\n  /** Whether or not deleted entitlements should be omitted. Defaults to true, deleted entitlements are not included by default. */\n  excludeDeleted?: boolean\n}\n\n/** https://discord.com/developers/docs/monetization/entitlements#create-test-entitlement-json-params */\nexport interface CreateEntitlement {\n  /** ID of the SKU to grant the entitlement to */\n  skuId: BigString\n  /** ID of the guild or user to grant the entitlement to */\n  ownerId: BigString\n  /** The type of entitlement, guild subscription or user subscription */\n  ownerType: CreateEntitlementOwnerType\n}\n\n/** From the description of CreateEntitlement#ownerType on discord docs */\nexport enum CreateEntitlementOwnerType {\n  /** Guild subscription */\n  GuildSubscription = 1,\n  /** User subscription */\n  UserSubscription = 2,\n}\n\nexport interface EditApplication {\n  /** Default custom authorization URL for the app, if enabled */\n  customInstallUrl?: string\n  /** Description of the app */\n  description?: string\n  /** Role connection verification URL for the app */\n  roleConnectionsVerificationUrl?: string\n  /** Settings for the app's default in-app authorization link, if enabled */\n  installParams?: DiscordInstallParams\n  /** Default scopes and permissions for each supported installation context. */\n  integrationTypesConfig?: DiscordApplicationIntegrationType\n  /**\n   * App's public flags\n   *\n   * @remarks\n   * Only limited intent flags (`GATEWAY_PRESENCE_LIMITED`, `GATEWAY_GUILD_MEMBERS_LIMITED`, and `GATEWAY_MESSAGE_CONTENT_LIMITED`) can be updated via the API.\n   */\n  flags?: ApplicationFlags\n  /** Icon for the app */\n  icon?: string | null\n  /** Default rich presence invite cover image for the app */\n  coverImage?: string | null\n  /**\n   * Interactions endpoint URL for the app\n   *\n   * @remarks\n   * To update an Interactions endpoint URL via the API, the URL must be valid\n   */\n  interactionEndpointUrl?: string\n  /**\n   * List of tags describing the content and functionality of the app (max of 20 characters per tag)\n   *\n   * @remarks\n   * There can only be a max of 5 tags\n   */\n  tags?: string[]\n  /** Event webhook URL for the app to receive webhook events */\n  eventWebhooksUrl?: string\n  /** If webhook events are enabled for the app. 1 to disable, and 2 to enable. */\n  eventWebhooksStatus: DiscordApplicationEventWebhookStatus\n  /** List of Webhook event types the app subscribes to */\n  eventWebhooksTypes?: DiscordWebhookEventType[]\n}\n\n/** https://discord.com/developers/docs/resources/poll#poll-create-request-object */\nexport interface CreatePoll {\n  /** The question of the poll. Only `text` is supported. */\n  question: Camelize<DiscordPollMedia>\n  /** Each of the answers available in the poll, up to 10 */\n  answers: Omit<Camelize<DiscordPollAnswer>, 'answerId'>[]\n  /**\n   * Number of hours the poll should be open for\n   *\n   * @remarks\n   * up to 32 days\n   *\n   * @default 24\n   */\n  duration: number\n  /**\n   * Whether a user can select multiple answers\n   *\n   * @default false\n   */\n  allowMultiselect: boolean\n  /** The layout type of the poll */\n  layoutType?: DiscordPollLayoutType\n}\n\n/** https://discord.com/developers/docs/resources/poll#get-answer-voters-query-string-params */\nexport interface GetPollAnswerVotes {\n  /** Get users after this user ID */\n  after?: BigString\n  /**\n   * Max number of users to return (1-100)\n   *\n   * @default 25\n   */\n  limit?: number\n}\n\n/** https://discord.com/developers/docs/resources/subscription#query-string-params */\nexport interface ListSkuSubscriptionsOptions {\n  /** List subscriptions before this ID */\n  before?: BigString\n  /** List subscriptions after this ID */\n  after?: BigString\n  /** Number of results to return (1-100) */\n  limit?: number\n  /** User ID for which to return subscriptions. Required except for OAuth queries. */\n  userId?: BigString\n}\n\n/** https://discord.com/developers/docs/resources/soundboard#send-soundboard-sound-json-params */\nexport interface SendSoundboardSound {\n  /** The id of the soundboard sound to play */\n  soundId: BigString\n  /** The id of the guild the soundboard sound is from, required to play sounds from different servers */\n  sourceGuildId?: BigString\n}\n\n/** https://discord.com/developers/docs/resources/soundboard#create-guild-soundboard-sound-json-params */\nexport interface CreateGuildSoundboardSound {\n  /** Name of the soundboard sound (2-32 characters) */\n  name: string\n  /** The mp3 or ogg sound data, base64 encoded, similar to image data */\n  sound: string\n  /** The volume of the soundboard sound, from 0 to 1, defaults to 1 */\n  volume?: number | null\n  /** The id of the custom emoji for the soundboard sound */\n  emojiId?: BigString | null\n  /** The unicode character of a standard emoji for the soundboard sound */\n  emojiName?: string | null\n}\n\n/** https://canary.discord.com/developers/docs/resources/soundboard#modify-guild-soundboard-sound-json-params */\nexport interface ModifyGuildSoundboardSound {\n  /** Name of the soundboard sound (2-32 characters) */\n  name: string\n  /** The volume of the soundboard sound, from 0 to 1, defaults to 1 */\n  volume: number | null\n  /** The id of the custom emoji for the soundboard sound */\n  emojiId: BigString | null\n  /** The unicode character of a standard emoji for the soundboard sound */\n  emojiName: string | null\n}\n\nexport interface CreateWebhook {\n  /** Name of the webhook (1-80 characters) */\n  name: string\n  /** Image url for the default webhook avatar */\n  avatar?: string | null\n}\n"],"names":["CreateEntitlementOwnerType"],"mappings":";;;;+BA89CYA;;;eAAAA;;;AAAL,IAAA,AAAKA,oDAAAA;IACV,uBAAuB;IAEvB,sBAAsB;WAHZA"}