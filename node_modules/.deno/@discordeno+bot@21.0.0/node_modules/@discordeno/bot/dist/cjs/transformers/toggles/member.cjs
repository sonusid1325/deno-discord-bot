"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MemberToggle: function() {
        return MemberToggle;
    },
    MemberToggles: function() {
        return MemberToggles;
    }
});
const _types = require("@discordeno/types");
const _ToggleBitfield = require("./ToggleBitfield.cjs");
const memberFlags = [
    'didRejoin',
    'startedOnboarding',
    'bypassesVerification',
    'completedOnboarding'
];
const MemberToggle = {
    /** Whether the user is deafened in voice channels */ deaf: 1 << 0,
    /** Whether the user is muted in voice channels */ mute: 1 << 1,
    /** Whether the user has not yet passed the guild's Membership Screening requirements */ pending: 1 << 2,
    // Member flags
    /** Member has left and rejoined the guild */ didRejoin: 1 << 3,
    /** Member has completed onboarding */ startedOnboarding: 1 << 4,
    /** Member is exempt from guild verification requirements */ bypassesVerification: 1 << 5,
    /** Member has started onboarding */ completedOnboarding: 1 << 6,
    /** Member is a guest and can only access the voice channel they were invited to */ isGuest: 1 << 7,
    /** Member has started Server Guide new member actions */ startedHomeActions: 1 << 8,
    /** Member has completed Server Guide new member actions */ completedHomeActions: 1 << 9,
    /** Member's username, display name, or nickname is blocked by AutoMod */ automodQuarantinedUsername: 1 << 10,
    /** Member has dismissed the DM settings upsell */ dmSettingsUpsellAcknowledged: 1 << 11
};
let MemberToggles = class MemberToggles extends _ToggleBitfield.ToggleBitfield {
    constructor(memberOrTogglesInt){
        super();
        if (typeof memberOrTogglesInt === 'number') this.bitfield = memberOrTogglesInt;
        else {
            const member = memberOrTogglesInt;
            if (member.deaf) this.add(MemberToggle.deaf);
            if (member.mute) this.add(MemberToggle.mute);
            if (member.pending) this.add(MemberToggle.pending);
            if (member.flags) {
                if (member.flags & _types.MemberFlags.DidRejoin) this.add(MemberToggle.didRejoin);
                if (member.flags & _types.MemberFlags.StartedOnboarding) this.add(MemberToggle.startedOnboarding);
                if (member.flags & _types.MemberFlags.BypassesVerification) this.add(MemberToggle.bypassesVerification);
                if (member.flags & _types.MemberFlags.CompletedOnboarding) this.add(MemberToggle.completedOnboarding);
                if (member.flags & _types.MemberFlags.IsGuest) this.add(MemberToggle.isGuest);
                if (member.flags & _types.MemberFlags.StartedHomeActions) this.add(MemberToggle.startedHomeActions);
                if (member.flags & _types.MemberFlags.CompletedHomeActions) this.add(MemberToggle.completedHomeActions);
                if (member.flags & _types.MemberFlags.AutomodQuarantinedUsername) this.add(MemberToggle.automodQuarantinedUsername);
                if (member.flags & _types.MemberFlags.DmSettingsUpsellAcknowledged) this.add(MemberToggle.dmSettingsUpsellAcknowledged);
            }
        }
    }
    get flags() {
        let flags = 0;
        if (this.didRejoin) flags |= _types.MemberFlags.DidRejoin;
        if (this.startedOnboarding) flags |= _types.MemberFlags.StartedOnboarding;
        if (this.bypassesVerification) flags |= _types.MemberFlags.BypassesVerification;
        if (this.completedOnboarding) flags |= _types.MemberFlags.CompletedOnboarding;
        if (this.isGuest) flags |= _types.MemberFlags.IsGuest;
        if (this.startedHomeActions) flags |= _types.MemberFlags.StartedHomeActions;
        if (this.completedHomeActions) flags |= _types.MemberFlags.CompletedHomeActions;
        if (this.automodQuarantinedUsername) flags |= _types.MemberFlags.AutomodQuarantinedUsername;
        if (this.dmSettingsUpsellAcknowledged) flags |= _types.MemberFlags.DmSettingsUpsellAcknowledged;
        return flags;
    }
    /** Whether the user belongs to an OAuth2 application */ get deaf() {
        return this.has('deaf');
    }
    /** Whether the user is muted in voice channels */ get mute() {
        return this.has('mute');
    }
    /** Whether the user has not yet passed the guild's Membership Screening requirements */ get pending() {
        return this.has('pending');
    }
    /** Member has left and rejoined the guild */ get didRejoin() {
        return this.has('didRejoin');
    }
    /** Member has completed onboarding */ get startedOnboarding() {
        return this.has('startedOnboarding');
    }
    /** Member is exempt from guild verification requirements */ get bypassesVerification() {
        return this.has('bypassesVerification');
    }
    /** Member has started onboarding */ get completedOnboarding() {
        return this.has('completedOnboarding');
    }
    /** Member is a guest and can only access the voice channel they were invited to */ get isGuest() {
        return this.has('isGuest');
    }
    /** Member has started Server Guide new member actions */ get startedHomeActions() {
        return this.has('startedHomeActions');
    }
    /** Member has completed Server Guide new member actions */ get completedHomeActions() {
        return this.has('completedHomeActions');
    }
    /** Member's username, display name, or nickname is blocked by AutoMod */ get automodQuarantinedUsername() {
        return this.has('automodQuarantinedUsername');
    }
    /** Member has dismissed the DM settings upsell */ get dmSettingsUpsellAcknowledged() {
        return this.has('dmSettingsUpsellAcknowledged');
    }
    /** Checks whether or not the permissions exist in this */ has(permissions) {
        if (!Array.isArray(permissions)) return super.contains(MemberToggle[permissions]);
        return super.contains(permissions.reduce((a, b)=>a |= MemberToggle[b], 0));
    }
    /** Lists all the toggles for the role and whether or not each is true or false. */ list() {
        const json = {};
        for (const [key, value] of Object.entries(MemberToggle)){
            json[key] = super.contains(value);
        }
        return json;
    }
};

//# sourceMappingURL=data:application/json;base64,