"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "transformComponent", {
    enumerable: true,
    get: function() {
        return transformComponent;
    }
});
const _types = require("@discordeno/types");
function transformComponent(bot, payload) {
    let component;
    // This switch is exhaustive, so we dont need the default case and TS does not error out for the un-initialized component variable
    switch(payload.type){
        case _types.MessageComponentTypes.ActionRow:
            component = transformActionRow(bot, payload);
            break;
        case _types.MessageComponentTypes.Button:
            component = transformButtonComponent(bot, payload);
            break;
        case _types.MessageComponentTypes.InputText:
            component = transformInputTextComponent(bot, payload);
            break;
        case _types.MessageComponentTypes.SelectMenu:
        case _types.MessageComponentTypes.SelectMenuChannels:
        case _types.MessageComponentTypes.SelectMenuRoles:
        case _types.MessageComponentTypes.SelectMenuUsers:
        case _types.MessageComponentTypes.SelectMenuUsersAndRoles:
            component = transformSelectMenuComponent(bot, payload);
            break;
    }
    return bot.transformers.customizers.component(bot, payload, component);
}
function transformActionRow(bot, payload) {
    return {
        type: _types.MessageComponentTypes.ActionRow,
        components: payload.components.map((component)=>bot.transformers.component(bot, component))
    };
}
function transformButtonComponent(bot, payload) {
    return {
        type: _types.MessageComponentTypes.Button,
        label: payload.label,
        customId: payload.custom_id,
        style: payload.style,
        emoji: payload.emoji ? {
            id: payload.emoji.id ? bot.transformers.snowflake(payload.emoji.id) : undefined,
            name: payload.emoji.name,
            animated: payload.emoji.animated
        } : undefined,
        url: payload.url,
        disabled: payload.disabled,
        skuId: payload.sku_id ? bot.transformers.snowflake(payload.sku_id) : undefined
    };
}
function transformInputTextComponent(_bot, payload) {
    return {
        type: _types.MessageComponentTypes.InputText,
        style: payload.style,
        required: payload.required,
        customId: payload.custom_id,
        label: payload.label,
        placeholder: payload.placeholder,
        minLength: payload.min_length,
        maxLength: payload.max_length,
        value: payload.value
    };
}
function transformSelectMenuComponent(bot, payload) {
    return {
        type: payload.type,
        customId: payload.custom_id,
        placeholder: payload.placeholder,
        minValues: payload.min_values,
        maxValues: payload.max_values,
        defaultValues: payload.default_values?.map((defaultValue)=>({
                id: bot.transformers.snowflake(defaultValue.id),
                type: defaultValue.type
            })),
        channelTypes: payload.channel_types,
        options: payload.options?.map((option)=>({
                label: option.label,
                value: option.value,
                description: option.description,
                emoji: option.emoji ? {
                    id: option.emoji.id ? bot.transformers.snowflake(option.emoji.id) : undefined,
                    name: option.emoji.name,
                    animated: option.emoji.animated
                } : undefined,
                default: option.default
            })),
        disabled: payload.disabled
    };
}

//# sourceMappingURL=data:application/json;base64,