"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "transformAuditLogEntry", {
    enumerable: true,
    get: function() {
        return transformAuditLogEntry;
    }
});
function transformAuditLogEntry(bot, payload) {
    const auditLogEntry = {
        id: bot.transformers.snowflake(payload.id),
        changes: payload.changes,
        userId: payload.user_id ? bot.transformers.snowflake(payload.user_id) : undefined,
        targetId: payload.target_id ? bot.transformers.snowflake(payload.target_id) : undefined,
        actionType: payload.action_type,
        options: payload.options ? {
            applicationId: payload.options.application_id ? bot.transformers.snowflake(payload.options.application_id) : undefined,
            autoModerationRuleName: payload.options.auto_moderation_rule_name,
            autoModerationRuleTriggerType: payload.options.auto_moderation_rule_trigger_type,
            channelId: payload.options.channel_id ? bot.transformers.snowflake(payload.options.channel_id) : undefined,
            count: payload.options.count ? Number(payload.options.count) : undefined,
            deleteMemberDays: payload.options.delete_member_days ? Number(payload.options.delete_member_days) : undefined,
            id: payload.options.id ? bot.transformers.snowflake(payload.options.id) : undefined,
            membersRemoved: payload.options.members_removed ? Number(payload.options.members_removed) : undefined,
            messageId: payload.options.message_id ? bot.transformers.snowflake(payload.options.message_id) : undefined,
            roleName: payload.options.role_name,
            type: payload.options.type ? Number(payload.options.type) : undefined,
            integrationType: payload.options.integration_type
        } : undefined,
        reason: payload.reason
    };
    return bot.transformers.customizers.auditLogEntry(bot, payload, auditLogEntry);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvYXVkaXRMb2dFbnRyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERpc2NvcmRBdWRpdExvZ0VudHJ5IH0gZnJvbSAnQGRpc2NvcmRlbm8vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEF1ZGl0TG9nRW50cnksIEJvdCB9IGZyb20gJy4uL2luZGV4LmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtQXVkaXRMb2dFbnRyeShib3Q6IEJvdCwgcGF5bG9hZDogRGlzY29yZEF1ZGl0TG9nRW50cnkpOiBBdWRpdExvZ0VudHJ5IHtcbiAgY29uc3QgYXVkaXRMb2dFbnRyeSA9IHtcbiAgICBpZDogYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5pZCksXG4gICAgY2hhbmdlczogcGF5bG9hZC5jaGFuZ2VzLFxuICAgIHVzZXJJZDogcGF5bG9hZC51c2VyX2lkID8gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC51c2VyX2lkKSA6IHVuZGVmaW5lZCxcbiAgICB0YXJnZXRJZDogcGF5bG9hZC50YXJnZXRfaWQgPyBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLnRhcmdldF9pZCkgOiB1bmRlZmluZWQsXG4gICAgYWN0aW9uVHlwZTogcGF5bG9hZC5hY3Rpb25fdHlwZSxcbiAgICBvcHRpb25zOiBwYXlsb2FkLm9wdGlvbnNcbiAgICAgID8ge1xuICAgICAgICAgIGFwcGxpY2F0aW9uSWQ6IHBheWxvYWQub3B0aW9ucy5hcHBsaWNhdGlvbl9pZCA/IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQub3B0aW9ucy5hcHBsaWNhdGlvbl9pZCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgYXV0b01vZGVyYXRpb25SdWxlTmFtZTogcGF5bG9hZC5vcHRpb25zLmF1dG9fbW9kZXJhdGlvbl9ydWxlX25hbWUsXG4gICAgICAgICAgYXV0b01vZGVyYXRpb25SdWxlVHJpZ2dlclR5cGU6IHBheWxvYWQub3B0aW9ucy5hdXRvX21vZGVyYXRpb25fcnVsZV90cmlnZ2VyX3R5cGUsXG4gICAgICAgICAgY2hhbm5lbElkOiBwYXlsb2FkLm9wdGlvbnMuY2hhbm5lbF9pZCA/IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQub3B0aW9ucy5jaGFubmVsX2lkKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBjb3VudDogcGF5bG9hZC5vcHRpb25zLmNvdW50ID8gTnVtYmVyKHBheWxvYWQub3B0aW9ucy5jb3VudCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgZGVsZXRlTWVtYmVyRGF5czogcGF5bG9hZC5vcHRpb25zLmRlbGV0ZV9tZW1iZXJfZGF5cyA/IE51bWJlcihwYXlsb2FkLm9wdGlvbnMuZGVsZXRlX21lbWJlcl9kYXlzKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpZDogcGF5bG9hZC5vcHRpb25zLmlkID8gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5vcHRpb25zLmlkKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtZW1iZXJzUmVtb3ZlZDogcGF5bG9hZC5vcHRpb25zLm1lbWJlcnNfcmVtb3ZlZCA/IE51bWJlcihwYXlsb2FkLm9wdGlvbnMubWVtYmVyc19yZW1vdmVkKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtZXNzYWdlSWQ6IHBheWxvYWQub3B0aW9ucy5tZXNzYWdlX2lkID8gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5vcHRpb25zLm1lc3NhZ2VfaWQpIDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJvbGVOYW1lOiBwYXlsb2FkLm9wdGlvbnMucm9sZV9uYW1lLFxuICAgICAgICAgIHR5cGU6IHBheWxvYWQub3B0aW9ucy50eXBlID8gTnVtYmVyKHBheWxvYWQub3B0aW9ucy50eXBlKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpbnRlZ3JhdGlvblR5cGU6IHBheWxvYWQub3B0aW9ucy5pbnRlZ3JhdGlvbl90eXBlLFxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZCxcbiAgICByZWFzb246IHBheWxvYWQucmVhc29uLFxuICB9IGFzIEF1ZGl0TG9nRW50cnlcblxuICByZXR1cm4gYm90LnRyYW5zZm9ybWVycy5jdXN0b21pemVycy5hdWRpdExvZ0VudHJ5KGJvdCwgcGF5bG9hZCwgYXVkaXRMb2dFbnRyeSlcbn1cbiJdLCJuYW1lcyI6WyJ0cmFuc2Zvcm1BdWRpdExvZ0VudHJ5IiwiYm90IiwicGF5bG9hZCIsImF1ZGl0TG9nRW50cnkiLCJpZCIsInRyYW5zZm9ybWVycyIsInNub3dmbGFrZSIsImNoYW5nZXMiLCJ1c2VySWQiLCJ1c2VyX2lkIiwidW5kZWZpbmVkIiwidGFyZ2V0SWQiLCJ0YXJnZXRfaWQiLCJhY3Rpb25UeXBlIiwiYWN0aW9uX3R5cGUiLCJvcHRpb25zIiwiYXBwbGljYXRpb25JZCIsImFwcGxpY2F0aW9uX2lkIiwiYXV0b01vZGVyYXRpb25SdWxlTmFtZSIsImF1dG9fbW9kZXJhdGlvbl9ydWxlX25hbWUiLCJhdXRvTW9kZXJhdGlvblJ1bGVUcmlnZ2VyVHlwZSIsImF1dG9fbW9kZXJhdGlvbl9ydWxlX3RyaWdnZXJfdHlwZSIsImNoYW5uZWxJZCIsImNoYW5uZWxfaWQiLCJjb3VudCIsIk51bWJlciIsImRlbGV0ZU1lbWJlckRheXMiLCJkZWxldGVfbWVtYmVyX2RheXMiLCJtZW1iZXJzUmVtb3ZlZCIsIm1lbWJlcnNfcmVtb3ZlZCIsIm1lc3NhZ2VJZCIsIm1lc3NhZ2VfaWQiLCJyb2xlTmFtZSIsInJvbGVfbmFtZSIsInR5cGUiLCJpbnRlZ3JhdGlvblR5cGUiLCJpbnRlZ3JhdGlvbl90eXBlIiwicmVhc29uIiwiY3VzdG9taXplcnMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBR2dCQTs7O2VBQUFBOzs7QUFBVCxTQUFTQSx1QkFBdUJDLEdBQVEsRUFBRUMsT0FBNkI7SUFDNUUsTUFBTUMsZ0JBQWdCO1FBQ3BCQyxJQUFJSCxJQUFJSSxZQUFZLENBQUNDLFNBQVMsQ0FBQ0osUUFBUUUsRUFBRTtRQUN6Q0csU0FBU0wsUUFBUUssT0FBTztRQUN4QkMsUUFBUU4sUUFBUU8sT0FBTyxHQUFHUixJQUFJSSxZQUFZLENBQUNDLFNBQVMsQ0FBQ0osUUFBUU8sT0FBTyxJQUFJQztRQUN4RUMsVUFBVVQsUUFBUVUsU0FBUyxHQUFHWCxJQUFJSSxZQUFZLENBQUNDLFNBQVMsQ0FBQ0osUUFBUVUsU0FBUyxJQUFJRjtRQUM5RUcsWUFBWVgsUUFBUVksV0FBVztRQUMvQkMsU0FBU2IsUUFBUWEsT0FBTyxHQUNwQjtZQUNFQyxlQUFlZCxRQUFRYSxPQUFPLENBQUNFLGNBQWMsR0FBR2hCLElBQUlJLFlBQVksQ0FBQ0MsU0FBUyxDQUFDSixRQUFRYSxPQUFPLENBQUNFLGNBQWMsSUFBSVA7WUFDN0dRLHdCQUF3QmhCLFFBQVFhLE9BQU8sQ0FBQ0kseUJBQXlCO1lBQ2pFQywrQkFBK0JsQixRQUFRYSxPQUFPLENBQUNNLGlDQUFpQztZQUNoRkMsV0FBV3BCLFFBQVFhLE9BQU8sQ0FBQ1EsVUFBVSxHQUFHdEIsSUFBSUksWUFBWSxDQUFDQyxTQUFTLENBQUNKLFFBQVFhLE9BQU8sQ0FBQ1EsVUFBVSxJQUFJYjtZQUNqR2MsT0FBT3RCLFFBQVFhLE9BQU8sQ0FBQ1MsS0FBSyxHQUFHQyxPQUFPdkIsUUFBUWEsT0FBTyxDQUFDUyxLQUFLLElBQUlkO1lBQy9EZ0Isa0JBQWtCeEIsUUFBUWEsT0FBTyxDQUFDWSxrQkFBa0IsR0FBR0YsT0FBT3ZCLFFBQVFhLE9BQU8sQ0FBQ1ksa0JBQWtCLElBQUlqQjtZQUNwR04sSUFBSUYsUUFBUWEsT0FBTyxDQUFDWCxFQUFFLEdBQUdILElBQUlJLFlBQVksQ0FBQ0MsU0FBUyxDQUFDSixRQUFRYSxPQUFPLENBQUNYLEVBQUUsSUFBSU07WUFDMUVrQixnQkFBZ0IxQixRQUFRYSxPQUFPLENBQUNjLGVBQWUsR0FBR0osT0FBT3ZCLFFBQVFhLE9BQU8sQ0FBQ2MsZUFBZSxJQUFJbkI7WUFDNUZvQixXQUFXNUIsUUFBUWEsT0FBTyxDQUFDZ0IsVUFBVSxHQUFHOUIsSUFBSUksWUFBWSxDQUFDQyxTQUFTLENBQUNKLFFBQVFhLE9BQU8sQ0FBQ2dCLFVBQVUsSUFBSXJCO1lBQ2pHc0IsVUFBVTlCLFFBQVFhLE9BQU8sQ0FBQ2tCLFNBQVM7WUFDbkNDLE1BQU1oQyxRQUFRYSxPQUFPLENBQUNtQixJQUFJLEdBQUdULE9BQU92QixRQUFRYSxPQUFPLENBQUNtQixJQUFJLElBQUl4QjtZQUM1RHlCLGlCQUFpQmpDLFFBQVFhLE9BQU8sQ0FBQ3FCLGdCQUFnQjtRQUNuRCxJQUNBMUI7UUFDSjJCLFFBQVFuQyxRQUFRbUMsTUFBTTtJQUN4QjtJQUVBLE9BQU9wQyxJQUFJSSxZQUFZLENBQUNpQyxXQUFXLENBQUNuQyxhQUFhLENBQUNGLEtBQUtDLFNBQVNDO0FBQ2xFIn0=