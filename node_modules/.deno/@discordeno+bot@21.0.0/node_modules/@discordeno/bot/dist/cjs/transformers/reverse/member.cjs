"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    transformMemberToDiscordMember: function() {
        return transformMemberToDiscordMember;
    },
    transformUserToDiscordUser: function() {
        return transformUserToDiscordUser;
    }
});
const _utils = require("@discordeno/utils");
function transformUserToDiscordUser(_bot, payload) {
    return {
        id: payload.id.toString(),
        username: payload.username,
        global_name: payload.globalName ?? null,
        discriminator: payload.discriminator,
        avatar: payload.avatar ? (0, _utils.iconBigintToHash)(payload.avatar) : null,
        locale: payload.locale,
        email: payload.email ?? undefined,
        flags: payload.flags?.toJSON(),
        premium_type: payload.premiumType,
        public_flags: payload.publicFlags?.toJSON(),
        bot: payload.toggles?.bot,
        system: payload.toggles?.system,
        mfa_enabled: payload.toggles?.mfaEnabled,
        verified: payload.toggles?.verified
    };
}
function transformMemberToDiscordMember(bot, payload) {
    return {
        nick: payload.nick ?? undefined,
        roles: payload.roles.map((id)=>id.toString()),
        joined_at: new Date(payload.joinedAt).toISOString(),
        premium_since: payload.premiumSince ? new Date(payload.premiumSince).toISOString() : undefined,
        avatar: payload.avatar ? (0, _utils.iconBigintToHash)(payload.avatar) : undefined,
        permissions: payload.permissions?.toString(),
        communication_disabled_until: payload.communicationDisabledUntil ? new Date(payload.communicationDisabledUntil).toISOString() : undefined,
        deaf: payload.toggles?.deaf,
        mute: payload.toggles?.mute,
        pending: payload.toggles?.pending,
        flags: payload.flags,
        avatar_decoration_data: {
            asset: (0, _utils.iconBigintToHash)(payload.avatarDecorationData.asset),
            sku_id: bot.transformers.reverse.snowflake(payload.avatarDecorationData.skuId)
        },
        user: payload.user ? bot.transformers.reverse.user(bot, payload.user) : undefined
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvcmV2ZXJzZS9tZW1iZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEaXNjb3JkTWVtYmVyLCBEaXNjb3JkVXNlciB9IGZyb20gJ0BkaXNjb3JkZW5vL3R5cGVzJ1xuaW1wb3J0IHsgaWNvbkJpZ2ludFRvSGFzaCB9IGZyb20gJ0BkaXNjb3JkZW5vL3V0aWxzJ1xuaW1wb3J0IHR5cGUgeyBCb3QsIEludGVybmFsQm90IH0gZnJvbSAnLi4vLi4vYm90LmpzJ1xuaW1wb3J0IHR5cGUgeyBNZW1iZXIsIFVzZXIgfSBmcm9tICcuLi90eXBlcy5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVVzZXJUb0Rpc2NvcmRVc2VyKF9ib3Q6IEJvdCwgcGF5bG9hZDogVXNlcik6IERpc2NvcmRVc2VyIHtcbiAgcmV0dXJuIHtcbiAgICBpZDogcGF5bG9hZC5pZC50b1N0cmluZygpLFxuICAgIHVzZXJuYW1lOiBwYXlsb2FkLnVzZXJuYW1lLFxuICAgIGdsb2JhbF9uYW1lOiBwYXlsb2FkLmdsb2JhbE5hbWUgPz8gbnVsbCxcbiAgICBkaXNjcmltaW5hdG9yOiBwYXlsb2FkLmRpc2NyaW1pbmF0b3IsXG4gICAgYXZhdGFyOiBwYXlsb2FkLmF2YXRhciA/IGljb25CaWdpbnRUb0hhc2gocGF5bG9hZC5hdmF0YXIpIDogbnVsbCxcbiAgICBsb2NhbGU6IHBheWxvYWQubG9jYWxlLFxuICAgIGVtYWlsOiBwYXlsb2FkLmVtYWlsID8/IHVuZGVmaW5lZCxcbiAgICBmbGFnczogcGF5bG9hZC5mbGFncz8udG9KU09OKCksXG4gICAgcHJlbWl1bV90eXBlOiBwYXlsb2FkLnByZW1pdW1UeXBlLFxuICAgIHB1YmxpY19mbGFnczogcGF5bG9hZC5wdWJsaWNGbGFncz8udG9KU09OKCksXG4gICAgYm90OiBwYXlsb2FkLnRvZ2dsZXM/LmJvdCxcbiAgICBzeXN0ZW06IHBheWxvYWQudG9nZ2xlcz8uc3lzdGVtLFxuICAgIG1mYV9lbmFibGVkOiBwYXlsb2FkLnRvZ2dsZXM/Lm1mYUVuYWJsZWQsXG4gICAgdmVyaWZpZWQ6IHBheWxvYWQudG9nZ2xlcz8udmVyaWZpZWQsXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1lbWJlclRvRGlzY29yZE1lbWJlcihib3Q6IEludGVybmFsQm90LCBwYXlsb2FkOiBNZW1iZXIpOiBEaXNjb3JkTWVtYmVyIHtcbiAgcmV0dXJuIHtcbiAgICBuaWNrOiBwYXlsb2FkLm5pY2sgPz8gdW5kZWZpbmVkLFxuICAgIHJvbGVzOiBwYXlsb2FkLnJvbGVzLm1hcCgoaWQpID0+IGlkLnRvU3RyaW5nKCkpLFxuICAgIGpvaW5lZF9hdDogbmV3IERhdGUocGF5bG9hZC5qb2luZWRBdCkudG9JU09TdHJpbmcoKSxcbiAgICBwcmVtaXVtX3NpbmNlOiBwYXlsb2FkLnByZW1pdW1TaW5jZSA/IG5ldyBEYXRlKHBheWxvYWQucHJlbWl1bVNpbmNlKS50b0lTT1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgIGF2YXRhcjogcGF5bG9hZC5hdmF0YXIgPyBpY29uQmlnaW50VG9IYXNoKHBheWxvYWQuYXZhdGFyKSA6IHVuZGVmaW5lZCxcbiAgICBwZXJtaXNzaW9uczogcGF5bG9hZC5wZXJtaXNzaW9ucz8udG9TdHJpbmcoKSxcbiAgICBjb21tdW5pY2F0aW9uX2Rpc2FibGVkX3VudGlsOiBwYXlsb2FkLmNvbW11bmljYXRpb25EaXNhYmxlZFVudGlsID8gbmV3IERhdGUocGF5bG9hZC5jb21tdW5pY2F0aW9uRGlzYWJsZWRVbnRpbCkudG9JU09TdHJpbmcoKSA6IHVuZGVmaW5lZCxcbiAgICBkZWFmOiBwYXlsb2FkLnRvZ2dsZXM/LmRlYWYsXG4gICAgbXV0ZTogcGF5bG9hZC50b2dnbGVzPy5tdXRlLFxuICAgIHBlbmRpbmc6IHBheWxvYWQudG9nZ2xlcz8ucGVuZGluZyxcbiAgICBmbGFnczogcGF5bG9hZC5mbGFncyxcbiAgICBhdmF0YXJfZGVjb3JhdGlvbl9kYXRhOiB7XG4gICAgICBhc3NldDogaWNvbkJpZ2ludFRvSGFzaChwYXlsb2FkLmF2YXRhckRlY29yYXRpb25EYXRhLmFzc2V0KSxcbiAgICAgIHNrdV9pZDogYm90LnRyYW5zZm9ybWVycy5yZXZlcnNlLnNub3dmbGFrZShwYXlsb2FkLmF2YXRhckRlY29yYXRpb25EYXRhLnNrdUlkKSxcbiAgICB9LFxuICAgIHVzZXI6IHBheWxvYWQudXNlciA/IGJvdC50cmFuc2Zvcm1lcnMucmV2ZXJzZS51c2VyKGJvdCwgcGF5bG9hZC51c2VyKSA6IHVuZGVmaW5lZCxcbiAgfVxufVxuIl0sIm5hbWVzIjpbInRyYW5zZm9ybU1lbWJlclRvRGlzY29yZE1lbWJlciIsInRyYW5zZm9ybVVzZXJUb0Rpc2NvcmRVc2VyIiwiX2JvdCIsInBheWxvYWQiLCJpZCIsInRvU3RyaW5nIiwidXNlcm5hbWUiLCJnbG9iYWxfbmFtZSIsImdsb2JhbE5hbWUiLCJkaXNjcmltaW5hdG9yIiwiYXZhdGFyIiwiaWNvbkJpZ2ludFRvSGFzaCIsImxvY2FsZSIsImVtYWlsIiwidW5kZWZpbmVkIiwiZmxhZ3MiLCJ0b0pTT04iLCJwcmVtaXVtX3R5cGUiLCJwcmVtaXVtVHlwZSIsInB1YmxpY19mbGFncyIsInB1YmxpY0ZsYWdzIiwiYm90IiwidG9nZ2xlcyIsInN5c3RlbSIsIm1mYV9lbmFibGVkIiwibWZhRW5hYmxlZCIsInZlcmlmaWVkIiwibmljayIsInJvbGVzIiwibWFwIiwiam9pbmVkX2F0IiwiRGF0ZSIsImpvaW5lZEF0IiwidG9JU09TdHJpbmciLCJwcmVtaXVtX3NpbmNlIiwicHJlbWl1bVNpbmNlIiwicGVybWlzc2lvbnMiLCJjb21tdW5pY2F0aW9uX2Rpc2FibGVkX3VudGlsIiwiY29tbXVuaWNhdGlvbkRpc2FibGVkVW50aWwiLCJkZWFmIiwibXV0ZSIsInBlbmRpbmciLCJhdmF0YXJfZGVjb3JhdGlvbl9kYXRhIiwiYXNzZXQiLCJhdmF0YXJEZWNvcmF0aW9uRGF0YSIsInNrdV9pZCIsInRyYW5zZm9ybWVycyIsInJldmVyc2UiLCJzbm93Zmxha2UiLCJza3VJZCIsInVzZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBd0JnQkEsOEJBQThCO2VBQTlCQTs7SUFuQkFDLDBCQUEwQjtlQUExQkE7Ozt1QkFKaUI7QUFJMUIsU0FBU0EsMkJBQTJCQyxJQUFTLEVBQUVDLE9BQWE7SUFDakUsT0FBTztRQUNMQyxJQUFJRCxRQUFRQyxFQUFFLENBQUNDLFFBQVE7UUFDdkJDLFVBQVVILFFBQVFHLFFBQVE7UUFDMUJDLGFBQWFKLFFBQVFLLFVBQVUsSUFBSTtRQUNuQ0MsZUFBZU4sUUFBUU0sYUFBYTtRQUNwQ0MsUUFBUVAsUUFBUU8sTUFBTSxHQUFHQyxJQUFBQSx1QkFBZ0IsRUFBQ1IsUUFBUU8sTUFBTSxJQUFJO1FBQzVERSxRQUFRVCxRQUFRUyxNQUFNO1FBQ3RCQyxPQUFPVixRQUFRVSxLQUFLLElBQUlDO1FBQ3hCQyxPQUFPWixRQUFRWSxLQUFLLEVBQUVDO1FBQ3RCQyxjQUFjZCxRQUFRZSxXQUFXO1FBQ2pDQyxjQUFjaEIsUUFBUWlCLFdBQVcsRUFBRUo7UUFDbkNLLEtBQUtsQixRQUFRbUIsT0FBTyxFQUFFRDtRQUN0QkUsUUFBUXBCLFFBQVFtQixPQUFPLEVBQUVDO1FBQ3pCQyxhQUFhckIsUUFBUW1CLE9BQU8sRUFBRUc7UUFDOUJDLFVBQVV2QixRQUFRbUIsT0FBTyxFQUFFSTtJQUM3QjtBQUNGO0FBRU8sU0FBUzFCLCtCQUErQnFCLEdBQWdCLEVBQUVsQixPQUFlO0lBQzlFLE9BQU87UUFDTHdCLE1BQU14QixRQUFRd0IsSUFBSSxJQUFJYjtRQUN0QmMsT0FBT3pCLFFBQVF5QixLQUFLLENBQUNDLEdBQUcsQ0FBQyxDQUFDekIsS0FBT0EsR0FBR0MsUUFBUTtRQUM1Q3lCLFdBQVcsSUFBSUMsS0FBSzVCLFFBQVE2QixRQUFRLEVBQUVDLFdBQVc7UUFDakRDLGVBQWUvQixRQUFRZ0MsWUFBWSxHQUFHLElBQUlKLEtBQUs1QixRQUFRZ0MsWUFBWSxFQUFFRixXQUFXLEtBQUtuQjtRQUNyRkosUUFBUVAsUUFBUU8sTUFBTSxHQUFHQyxJQUFBQSx1QkFBZ0IsRUFBQ1IsUUFBUU8sTUFBTSxJQUFJSTtRQUM1RHNCLGFBQWFqQyxRQUFRaUMsV0FBVyxFQUFFL0I7UUFDbENnQyw4QkFBOEJsQyxRQUFRbUMsMEJBQTBCLEdBQUcsSUFBSVAsS0FBSzVCLFFBQVFtQywwQkFBMEIsRUFBRUwsV0FBVyxLQUFLbkI7UUFDaEl5QixNQUFNcEMsUUFBUW1CLE9BQU8sRUFBRWlCO1FBQ3ZCQyxNQUFNckMsUUFBUW1CLE9BQU8sRUFBRWtCO1FBQ3ZCQyxTQUFTdEMsUUFBUW1CLE9BQU8sRUFBRW1CO1FBQzFCMUIsT0FBT1osUUFBUVksS0FBSztRQUNwQjJCLHdCQUF3QjtZQUN0QkMsT0FBT2hDLElBQUFBLHVCQUFnQixFQUFDUixRQUFReUMsb0JBQW9CLENBQUNELEtBQUs7WUFDMURFLFFBQVF4QixJQUFJeUIsWUFBWSxDQUFDQyxPQUFPLENBQUNDLFNBQVMsQ0FBQzdDLFFBQVF5QyxvQkFBb0IsQ0FBQ0ssS0FBSztRQUMvRTtRQUNBQyxNQUFNL0MsUUFBUStDLElBQUksR0FBRzdCLElBQUl5QixZQUFZLENBQUNDLE9BQU8sQ0FBQ0csSUFBSSxDQUFDN0IsS0FBS2xCLFFBQVErQyxJQUFJLElBQUlwQztJQUMxRTtBQUNGIn0=