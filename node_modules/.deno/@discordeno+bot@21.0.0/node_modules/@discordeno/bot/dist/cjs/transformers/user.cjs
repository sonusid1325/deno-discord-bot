"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    baseUser: function() {
        return baseUser;
    },
    transformUser: function() {
        return transformUser;
    }
});
const _utils = require("@discordeno/utils");
const _index = require("../index.cjs");
const baseUser = {
    // This allows typescript to still check for type errors on functions below
    ...undefined,
    get tag () {
        return `${this.username}#${this.discriminator}`;
    },
    get bot () {
        return !!this.toggles?.has('bot');
    },
    get system () {
        return !!this.toggles?.has('system');
    },
    get mfaEnabled () {
        return !!this.toggles?.has('mfaEnabled');
    },
    get verified () {
        return !!this.toggles?.has('verified');
    }
};
function transformUser(bot, payload) {
    const user = Object.create(baseUser);
    const props = bot.transformers.desiredProperties.user;
    if (props.toggles) user.toggles = new _index.UserToggles(payload);
    if (props.flags) user.flags = new _index.ToggleBitfield(payload.flags);
    if (props.publicFlags) user.publicFlags = new _index.ToggleBitfield(payload.public_flags);
    if (props.id && payload.id) user.id = bot.transformers.snowflake(payload.id);
    if (props.username && payload.username) user.username = payload.username;
    if (props.globalName && payload.global_name) user.globalName = payload.global_name;
    if (props.discriminator && payload.discriminator) user.discriminator = payload.discriminator;
    if (props.locale && payload.locale) user.locale = payload.locale;
    if (props.email && payload.email) user.email = payload.email;
    if (props.premiumType && payload.premium_type) user.premiumType = payload.premium_type;
    if (props.avatar && payload.avatar) user.avatar = (0, _utils.iconHashToBigInt)(payload.avatar);
    if (props.banner && payload.banner) user.banner = (0, _utils.iconHashToBigInt)(payload.banner);
    if (props.accentColor && payload.accent_color) user.accentColor = payload.accent_color;
    if (props.avatarDecorationData && payload.avatar_decoration_data) user.avatarDecorationData = bot.transformers.avatarDecorationData(bot, payload.avatar_decoration_data);
    return bot.transformers.customizers.user(bot, payload, user);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdXNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERpc2NvcmRVc2VyIH0gZnJvbSAnQGRpc2NvcmRlbm8vdHlwZXMnXG5pbXBvcnQgeyBpY29uSGFzaFRvQmlnSW50IH0gZnJvbSAnQGRpc2NvcmRlbm8vdXRpbHMnXG5pbXBvcnQgeyB0eXBlIEludGVybmFsQm90LCBUb2dnbGVCaXRmaWVsZCwgdHlwZSBVc2VyLCBVc2VyVG9nZ2xlcyB9IGZyb20gJy4uL2luZGV4LmpzJ1xuXG5leHBvcnQgY29uc3QgYmFzZVVzZXI6IEludGVybmFsQm90Wyd0cmFuc2Zvcm1lcnMnXVsnJGluZmVycmVkVHlwZXMnXVsndXNlciddID0ge1xuICAvLyBUaGlzIGFsbG93cyB0eXBlc2NyaXB0IHRvIHN0aWxsIGNoZWNrIGZvciB0eXBlIGVycm9ycyBvbiBmdW5jdGlvbnMgYmVsb3dcbiAgLi4uKHVuZGVmaW5lZCBhcyB1bmtub3duIGFzIEludGVybmFsQm90Wyd0cmFuc2Zvcm1lcnMnXVsnJGluZmVycmVkVHlwZXMnXVsndXNlciddKSxcblxuICBnZXQgdGFnKCkge1xuICAgIHJldHVybiBgJHt0aGlzLnVzZXJuYW1lfSMke3RoaXMuZGlzY3JpbWluYXRvcn1gXG4gIH0sXG4gIGdldCBib3QoKSB7XG4gICAgcmV0dXJuICEhdGhpcy50b2dnbGVzPy5oYXMoJ2JvdCcpXG4gIH0sXG4gIGdldCBzeXN0ZW0oKSB7XG4gICAgcmV0dXJuICEhdGhpcy50b2dnbGVzPy5oYXMoJ3N5c3RlbScpXG4gIH0sXG4gIGdldCBtZmFFbmFibGVkKCkge1xuICAgIHJldHVybiAhIXRoaXMudG9nZ2xlcz8uaGFzKCdtZmFFbmFibGVkJylcbiAgfSxcbiAgZ2V0IHZlcmlmaWVkKCkge1xuICAgIHJldHVybiAhIXRoaXMudG9nZ2xlcz8uaGFzKCd2ZXJpZmllZCcpXG4gIH0sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1Vc2VyKGJvdDogSW50ZXJuYWxCb3QsIHBheWxvYWQ6IERpc2NvcmRVc2VyKTogdHlwZW9mIGJvdC50cmFuc2Zvcm1lcnMuJGluZmVycmVkVHlwZXMudXNlciB7XG4gIGNvbnN0IHVzZXI6IFVzZXIgPSBPYmplY3QuY3JlYXRlKGJhc2VVc2VyKVxuICBjb25zdCBwcm9wcyA9IGJvdC50cmFuc2Zvcm1lcnMuZGVzaXJlZFByb3BlcnRpZXMudXNlclxuXG4gIGlmIChwcm9wcy50b2dnbGVzKSB1c2VyLnRvZ2dsZXMgPSBuZXcgVXNlclRvZ2dsZXMocGF5bG9hZClcbiAgaWYgKHByb3BzLmZsYWdzKSB1c2VyLmZsYWdzID0gbmV3IFRvZ2dsZUJpdGZpZWxkKHBheWxvYWQuZmxhZ3MpXG4gIGlmIChwcm9wcy5wdWJsaWNGbGFncykgdXNlci5wdWJsaWNGbGFncyA9IG5ldyBUb2dnbGVCaXRmaWVsZChwYXlsb2FkLnB1YmxpY19mbGFncylcbiAgaWYgKHByb3BzLmlkICYmIHBheWxvYWQuaWQpIHVzZXIuaWQgPSBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLmlkKVxuICBpZiAocHJvcHMudXNlcm5hbWUgJiYgcGF5bG9hZC51c2VybmFtZSkgdXNlci51c2VybmFtZSA9IHBheWxvYWQudXNlcm5hbWVcbiAgaWYgKHByb3BzLmdsb2JhbE5hbWUgJiYgcGF5bG9hZC5nbG9iYWxfbmFtZSkgdXNlci5nbG9iYWxOYW1lID0gcGF5bG9hZC5nbG9iYWxfbmFtZVxuICBpZiAocHJvcHMuZGlzY3JpbWluYXRvciAmJiBwYXlsb2FkLmRpc2NyaW1pbmF0b3IpIHVzZXIuZGlzY3JpbWluYXRvciA9IHBheWxvYWQuZGlzY3JpbWluYXRvclxuICBpZiAocHJvcHMubG9jYWxlICYmIHBheWxvYWQubG9jYWxlKSB1c2VyLmxvY2FsZSA9IHBheWxvYWQubG9jYWxlXG4gIGlmIChwcm9wcy5lbWFpbCAmJiBwYXlsb2FkLmVtYWlsKSB1c2VyLmVtYWlsID0gcGF5bG9hZC5lbWFpbFxuICBpZiAocHJvcHMucHJlbWl1bVR5cGUgJiYgcGF5bG9hZC5wcmVtaXVtX3R5cGUpIHVzZXIucHJlbWl1bVR5cGUgPSBwYXlsb2FkLnByZW1pdW1fdHlwZVxuICBpZiAocHJvcHMuYXZhdGFyICYmIHBheWxvYWQuYXZhdGFyKSB1c2VyLmF2YXRhciA9IGljb25IYXNoVG9CaWdJbnQocGF5bG9hZC5hdmF0YXIpXG4gIGlmIChwcm9wcy5iYW5uZXIgJiYgcGF5bG9hZC5iYW5uZXIpIHVzZXIuYmFubmVyID0gaWNvbkhhc2hUb0JpZ0ludChwYXlsb2FkLmJhbm5lcilcbiAgaWYgKHByb3BzLmFjY2VudENvbG9yICYmIHBheWxvYWQuYWNjZW50X2NvbG9yKSB1c2VyLmFjY2VudENvbG9yID0gcGF5bG9hZC5hY2NlbnRfY29sb3JcbiAgaWYgKHByb3BzLmF2YXRhckRlY29yYXRpb25EYXRhICYmIHBheWxvYWQuYXZhdGFyX2RlY29yYXRpb25fZGF0YSlcbiAgICB1c2VyLmF2YXRhckRlY29yYXRpb25EYXRhID0gYm90LnRyYW5zZm9ybWVycy5hdmF0YXJEZWNvcmF0aW9uRGF0YShib3QsIHBheWxvYWQuYXZhdGFyX2RlY29yYXRpb25fZGF0YSlcblxuICByZXR1cm4gYm90LnRyYW5zZm9ybWVycy5jdXN0b21pemVycy51c2VyKGJvdCwgcGF5bG9hZCwgdXNlcilcbn1cbiJdLCJuYW1lcyI6WyJiYXNlVXNlciIsInRyYW5zZm9ybVVzZXIiLCJ1bmRlZmluZWQiLCJ0YWciLCJ1c2VybmFtZSIsImRpc2NyaW1pbmF0b3IiLCJib3QiLCJ0b2dnbGVzIiwiaGFzIiwic3lzdGVtIiwibWZhRW5hYmxlZCIsInZlcmlmaWVkIiwicGF5bG9hZCIsInVzZXIiLCJPYmplY3QiLCJjcmVhdGUiLCJwcm9wcyIsInRyYW5zZm9ybWVycyIsImRlc2lyZWRQcm9wZXJ0aWVzIiwiVXNlclRvZ2dsZXMiLCJmbGFncyIsIlRvZ2dsZUJpdGZpZWxkIiwicHVibGljRmxhZ3MiLCJwdWJsaWNfZmxhZ3MiLCJpZCIsInNub3dmbGFrZSIsImdsb2JhbE5hbWUiLCJnbG9iYWxfbmFtZSIsImxvY2FsZSIsImVtYWlsIiwicHJlbWl1bVR5cGUiLCJwcmVtaXVtX3R5cGUiLCJhdmF0YXIiLCJpY29uSGFzaFRvQmlnSW50IiwiYmFubmVyIiwiYWNjZW50Q29sb3IiLCJhY2NlbnRfY29sb3IiLCJhdmF0YXJEZWNvcmF0aW9uRGF0YSIsImF2YXRhcl9kZWNvcmF0aW9uX2RhdGEiLCJjdXN0b21pemVycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFJYUEsUUFBUTtlQUFSQTs7SUFxQkdDLGFBQWE7ZUFBYkE7Ozt1QkF4QmlCO3VCQUN3QztBQUVsRSxNQUFNRCxXQUFrRTtJQUM3RSwyRUFBMkU7SUFDM0UsR0FBSUUsU0FBUztJQUViLElBQUlDLE9BQU07UUFDUixPQUFPLEdBQUcsSUFBSSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsYUFBYSxFQUFFO0lBQ2pEO0lBQ0EsSUFBSUMsT0FBTTtRQUNSLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0MsT0FBTyxFQUFFQyxJQUFJO0lBQzdCO0lBQ0EsSUFBSUMsVUFBUztRQUNYLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0YsT0FBTyxFQUFFQyxJQUFJO0lBQzdCO0lBQ0EsSUFBSUUsY0FBYTtRQUNmLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0gsT0FBTyxFQUFFQyxJQUFJO0lBQzdCO0lBQ0EsSUFBSUcsWUFBVztRQUNiLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0osT0FBTyxFQUFFQyxJQUFJO0lBQzdCO0FBQ0Y7QUFFTyxTQUFTUCxjQUFjSyxHQUFnQixFQUFFTSxPQUFvQjtJQUNsRSxNQUFNQyxPQUFhQyxPQUFPQyxNQUFNLENBQUNmO0lBQ2pDLE1BQU1nQixRQUFRVixJQUFJVyxZQUFZLENBQUNDLGlCQUFpQixDQUFDTCxJQUFJO0lBRXJELElBQUlHLE1BQU1ULE9BQU8sRUFBRU0sS0FBS04sT0FBTyxHQUFHLElBQUlZLGtCQUFXLENBQUNQO0lBQ2xELElBQUlJLE1BQU1JLEtBQUssRUFBRVAsS0FBS08sS0FBSyxHQUFHLElBQUlDLHFCQUFjLENBQUNULFFBQVFRLEtBQUs7SUFDOUQsSUFBSUosTUFBTU0sV0FBVyxFQUFFVCxLQUFLUyxXQUFXLEdBQUcsSUFBSUQscUJBQWMsQ0FBQ1QsUUFBUVcsWUFBWTtJQUNqRixJQUFJUCxNQUFNUSxFQUFFLElBQUlaLFFBQVFZLEVBQUUsRUFBRVgsS0FBS1csRUFBRSxHQUFHbEIsSUFBSVcsWUFBWSxDQUFDUSxTQUFTLENBQUNiLFFBQVFZLEVBQUU7SUFDM0UsSUFBSVIsTUFBTVosUUFBUSxJQUFJUSxRQUFRUixRQUFRLEVBQUVTLEtBQUtULFFBQVEsR0FBR1EsUUFBUVIsUUFBUTtJQUN4RSxJQUFJWSxNQUFNVSxVQUFVLElBQUlkLFFBQVFlLFdBQVcsRUFBRWQsS0FBS2EsVUFBVSxHQUFHZCxRQUFRZSxXQUFXO0lBQ2xGLElBQUlYLE1BQU1YLGFBQWEsSUFBSU8sUUFBUVAsYUFBYSxFQUFFUSxLQUFLUixhQUFhLEdBQUdPLFFBQVFQLGFBQWE7SUFDNUYsSUFBSVcsTUFBTVksTUFBTSxJQUFJaEIsUUFBUWdCLE1BQU0sRUFBRWYsS0FBS2UsTUFBTSxHQUFHaEIsUUFBUWdCLE1BQU07SUFDaEUsSUFBSVosTUFBTWEsS0FBSyxJQUFJakIsUUFBUWlCLEtBQUssRUFBRWhCLEtBQUtnQixLQUFLLEdBQUdqQixRQUFRaUIsS0FBSztJQUM1RCxJQUFJYixNQUFNYyxXQUFXLElBQUlsQixRQUFRbUIsWUFBWSxFQUFFbEIsS0FBS2lCLFdBQVcsR0FBR2xCLFFBQVFtQixZQUFZO0lBQ3RGLElBQUlmLE1BQU1nQixNQUFNLElBQUlwQixRQUFRb0IsTUFBTSxFQUFFbkIsS0FBS21CLE1BQU0sR0FBR0MsSUFBQUEsdUJBQWdCLEVBQUNyQixRQUFRb0IsTUFBTTtJQUNqRixJQUFJaEIsTUFBTWtCLE1BQU0sSUFBSXRCLFFBQVFzQixNQUFNLEVBQUVyQixLQUFLcUIsTUFBTSxHQUFHRCxJQUFBQSx1QkFBZ0IsRUFBQ3JCLFFBQVFzQixNQUFNO0lBQ2pGLElBQUlsQixNQUFNbUIsV0FBVyxJQUFJdkIsUUFBUXdCLFlBQVksRUFBRXZCLEtBQUtzQixXQUFXLEdBQUd2QixRQUFRd0IsWUFBWTtJQUN0RixJQUFJcEIsTUFBTXFCLG9CQUFvQixJQUFJekIsUUFBUTBCLHNCQUFzQixFQUM5RHpCLEtBQUt3QixvQkFBb0IsR0FBRy9CLElBQUlXLFlBQVksQ0FBQ29CLG9CQUFvQixDQUFDL0IsS0FBS00sUUFBUTBCLHNCQUFzQjtJQUV2RyxPQUFPaEMsSUFBSVcsWUFBWSxDQUFDc0IsV0FBVyxDQUFDMUIsSUFBSSxDQUFDUCxLQUFLTSxTQUFTQztBQUN6RCJ9