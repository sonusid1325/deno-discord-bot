"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "commandOptionsParser", {
    enumerable: true,
    get: function() {
        return commandOptionsParser;
    }
});
const _types = require("@discordeno/types");
function commandOptionsParser(__interaction, options) {
    // This is necessary as typescript gets really confused when using __interaction alone, as it will say that 'data' does not exist despite it surely exist since we have the &
    const interaction = __interaction;
    if (!interaction.data) return {};
    if (!options) options = interaction.data.options ?? [];
    const args = {};
    for (const option of options){
        switch(option.type){
            case _types.ApplicationCommandOptionTypes.SubCommandGroup:
            case _types.ApplicationCommandOptionTypes.SubCommand:
                args[option.name] = commandOptionsParser(interaction, option.options);
                break;
            case _types.ApplicationCommandOptionTypes.Channel:
                args[option.name] = interaction.data.resolved?.channels?.get(BigInt(option.value));
                break;
            case _types.ApplicationCommandOptionTypes.Role:
                args[option.name] = interaction.data.resolved?.roles?.get(BigInt(option.value));
                break;
            case _types.ApplicationCommandOptionTypes.User:
                args[option.name] = {
                    user: interaction.data.resolved?.users?.get(BigInt(option.value)),
                    member: interaction.data.resolved?.members?.get(BigInt(option.value))
                };
                break;
            case _types.ApplicationCommandOptionTypes.Attachment:
                args[option.name] = interaction.data.resolved?.attachments?.get(BigInt(option.value));
                break;
            case _types.ApplicationCommandOptionTypes.Mentionable:
                // Mentionable are roles or users
                args[option.name] = interaction.data.resolved?.roles?.get(BigInt(option.value)) ?? {
                    user: interaction.data.resolved?.users?.get(BigInt(option.value)),
                    member: interaction.data.resolved?.members?.get(BigInt(option.value))
                };
                break;
            default:
                args[option.name] = option.value;
        }
    }
    return args;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kT3B0aW9uc1BhcnNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvbkNvbW1hbmRPcHRpb25UeXBlcyB9IGZyb20gJ0BkaXNjb3JkZW5vL3R5cGVzJ1xuaW1wb3J0IHR5cGUge1xuICBBdHRhY2htZW50LFxuICBDaGFubmVsLFxuICBDb21wbGV0ZURlc2lyZWRQcm9wZXJ0aWVzLFxuICBEZXNpcmVkUHJvcGVydGllc0JlaGF2aW9yLFxuICBJbnRlcmFjdGlvbixcbiAgSW50ZXJhY3Rpb25EYXRhT3B0aW9uLFxuICBNZW1iZXIsXG4gIFJvbGUsXG4gIFNldHVwRGVzaXJlZFByb3BzLFxuICBUcmFuc2Zvcm1Qcm9wZXJ0eSxcbiAgVHJhbnNmb3JtZXJzRGVzaXJlZFByb3BlcnRpZXMsXG4gIFVzZXIsXG59IGZyb20gJy4vaW5kZXguanMnXG5cbmV4cG9ydCBmdW5jdGlvbiBjb21tYW5kT3B0aW9uc1BhcnNlcjxcbiAgVFByb3BzIGV4dGVuZHMgVHJhbnNmb3JtZXJzRGVzaXJlZFByb3BlcnRpZXMgJiB7IGludGVyYWN0aW9uOiB7IGRhdGE6IHRydWUgfSB9LFxuICBUQmVoYXZpb3IgZXh0ZW5kcyBEZXNpcmVkUHJvcGVydGllc0JlaGF2aW9yLFxuPihfX2ludGVyYWN0aW9uOiBTZXR1cERlc2lyZWRQcm9wczxJbnRlcmFjdGlvbiwgVFByb3BzLCBUQmVoYXZpb3I+LCBvcHRpb25zPzogSW50ZXJhY3Rpb25EYXRhT3B0aW9uW10pOiBQYXJzZWRJbnRlcmFjdGlvbk9wdGlvbjxUUHJvcHMsIFRCZWhhdmlvcj4ge1xuICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBhcyB0eXBlc2NyaXB0IGdldHMgcmVhbGx5IGNvbmZ1c2VkIHdoZW4gdXNpbmcgX19pbnRlcmFjdGlvbiBhbG9uZSwgYXMgaXQgd2lsbCBzYXkgdGhhdCAnZGF0YScgZG9lcyBub3QgZXhpc3QgZGVzcGl0ZSBpdCBzdXJlbHkgZXhpc3Qgc2luY2Ugd2UgaGF2ZSB0aGUgJlxuICBjb25zdCBpbnRlcmFjdGlvbiA9IF9faW50ZXJhY3Rpb24gYXMgU2V0dXBEZXNpcmVkUHJvcHM8XG4gICAgSW50ZXJhY3Rpb24sXG4gICAgQ29tcGxldGVEZXNpcmVkUHJvcGVydGllczx7IGludGVyYWN0aW9uOiB7IGRhdGE6IHRydWUgfSB9PixcbiAgICBEZXNpcmVkUHJvcGVydGllc0JlaGF2aW9yLlJlbW92ZUtleVxuICA+XG5cbiAgaWYgKCFpbnRlcmFjdGlvbi5kYXRhKSByZXR1cm4ge31cbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0gaW50ZXJhY3Rpb24uZGF0YS5vcHRpb25zID8/IFtdXG5cbiAgY29uc3QgYXJnczogUGFyc2VkSW50ZXJhY3Rpb25PcHRpb248VFByb3BzLCBUQmVoYXZpb3I+ID0ge31cblxuICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBvcHRpb25zKSB7XG4gICAgc3dpdGNoIChvcHRpb24udHlwZSkge1xuICAgICAgY2FzZSBBcHBsaWNhdGlvbkNvbW1hbmRPcHRpb25UeXBlcy5TdWJDb21tYW5kR3JvdXA6XG4gICAgICBjYXNlIEFwcGxpY2F0aW9uQ29tbWFuZE9wdGlvblR5cGVzLlN1YkNvbW1hbmQ6XG4gICAgICAgIGFyZ3Nbb3B0aW9uLm5hbWVdID0gY29tbWFuZE9wdGlvbnNQYXJzZXIoaW50ZXJhY3Rpb24sIG9wdGlvbi5vcHRpb25zKSBhcyBJbnRlcmFjdGlvblJlc29sdmVkRGF0YTxUUHJvcHMsIFRCZWhhdmlvcj5cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZXMuQ2hhbm5lbDpcbiAgICAgICAgYXJnc1tvcHRpb24ubmFtZV0gPSBpbnRlcmFjdGlvbi5kYXRhLnJlc29sdmVkPy5jaGFubmVscz8uZ2V0KEJpZ0ludChvcHRpb24udmFsdWUhKSkgYXMgSW50ZXJhY3Rpb25SZXNvbHZlZERhdGE8VFByb3BzLCBUQmVoYXZpb3I+XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIEFwcGxpY2F0aW9uQ29tbWFuZE9wdGlvblR5cGVzLlJvbGU6XG4gICAgICAgIGFyZ3Nbb3B0aW9uLm5hbWVdID0gaW50ZXJhY3Rpb24uZGF0YS5yZXNvbHZlZD8ucm9sZXM/LmdldChCaWdJbnQob3B0aW9uLnZhbHVlISkpIGFzIEludGVyYWN0aW9uUmVzb2x2ZWREYXRhPFRQcm9wcywgVEJlaGF2aW9yPlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBBcHBsaWNhdGlvbkNvbW1hbmRPcHRpb25UeXBlcy5Vc2VyOlxuICAgICAgICBhcmdzW29wdGlvbi5uYW1lXSA9IHtcbiAgICAgICAgICB1c2VyOiBpbnRlcmFjdGlvbi5kYXRhLnJlc29sdmVkPy51c2Vycz8uZ2V0KEJpZ0ludChvcHRpb24udmFsdWUhKSkgYXMgSW50ZXJhY3Rpb25SZXNvbHZlZERhdGE8VFByb3BzLCBUQmVoYXZpb3I+LFxuICAgICAgICAgIG1lbWJlcjogaW50ZXJhY3Rpb24uZGF0YS5yZXNvbHZlZD8ubWVtYmVycz8uZ2V0KEJpZ0ludChvcHRpb24udmFsdWUhKSkgYXMgSW50ZXJhY3Rpb25SZXNvbHZlZERhdGE8VFByb3BzLCBUQmVoYXZpb3I+LFxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIEFwcGxpY2F0aW9uQ29tbWFuZE9wdGlvblR5cGVzLkF0dGFjaG1lbnQ6XG4gICAgICAgIGFyZ3Nbb3B0aW9uLm5hbWVdID0gaW50ZXJhY3Rpb24uZGF0YS5yZXNvbHZlZD8uYXR0YWNobWVudHM/LmdldChCaWdJbnQob3B0aW9uLnZhbHVlISkpIGFzIEludGVyYWN0aW9uUmVzb2x2ZWREYXRhPFRQcm9wcywgVEJlaGF2aW9yPlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBBcHBsaWNhdGlvbkNvbW1hbmRPcHRpb25UeXBlcy5NZW50aW9uYWJsZTpcbiAgICAgICAgLy8gTWVudGlvbmFibGUgYXJlIHJvbGVzIG9yIHVzZXJzXG4gICAgICAgIGFyZ3Nbb3B0aW9uLm5hbWVdID0gKGludGVyYWN0aW9uLmRhdGEucmVzb2x2ZWQ/LnJvbGVzPy5nZXQoQmlnSW50KG9wdGlvbi52YWx1ZSEpKSBhcyBQYXJzZWRJbnRlcmFjdGlvbk9wdGlvbjxUUHJvcHMsIFRCZWhhdmlvcj5bc3RyaW5nXSkgPz8ge1xuICAgICAgICAgIHVzZXI6IGludGVyYWN0aW9uLmRhdGEucmVzb2x2ZWQ/LnVzZXJzPy5nZXQoQmlnSW50KG9wdGlvbi52YWx1ZSEpKSBhcyBJbnRlcmFjdGlvblJlc29sdmVkRGF0YTxUUHJvcHMsIFRCZWhhdmlvcj4sXG4gICAgICAgICAgbWVtYmVyOiBpbnRlcmFjdGlvbi5kYXRhLnJlc29sdmVkPy5tZW1iZXJzPy5nZXQoQmlnSW50KG9wdGlvbi52YWx1ZSEpKSBhcyBJbnRlcmFjdGlvblJlc29sdmVkRGF0YTxUUHJvcHMsIFRCZWhhdmlvcj4sXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyZ3Nbb3B0aW9uLm5hbWVdID0gb3B0aW9uLnZhbHVlIGFzIEludGVyYWN0aW9uUmVzb2x2ZWREYXRhPFRQcm9wcywgVEJlaGF2aW9yPlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcmdzXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkSW50ZXJhY3Rpb25PcHRpb248VFByb3BzIGV4dGVuZHMgVHJhbnNmb3JtZXJzRGVzaXJlZFByb3BlcnRpZXMsIFRCZWhhdmlvciBleHRlbmRzIERlc2lyZWRQcm9wZXJ0aWVzQmVoYXZpb3I+IHtcbiAgW2tleTogc3RyaW5nXTogSW50ZXJhY3Rpb25SZXNvbHZlZERhdGE8VFByb3BzLCBUQmVoYXZpb3I+XG59XG5cbmV4cG9ydCB0eXBlIEludGVyYWN0aW9uUmVzb2x2ZWREYXRhPFRQcm9wcyBleHRlbmRzIFRyYW5zZm9ybWVyc0Rlc2lyZWRQcm9wZXJ0aWVzLCBUQmVoYXZpb3IgZXh0ZW5kcyBEZXNpcmVkUHJvcGVydGllc0JlaGF2aW9yPiA9XG4gIHwgc3RyaW5nXG4gIHwgbnVtYmVyXG4gIHwgYm9vbGVhblxuICB8IFRyYW5zZm9ybVByb3BlcnR5PEludGVyYWN0aW9uUmVzb2x2ZWRVc2VyLCBUUHJvcHMsIFRCZWhhdmlvcj5cbiAgfCBUcmFuc2Zvcm1Qcm9wZXJ0eTxJbnRlcmFjdGlvblJlc29sdmVkQ2hhbm5lbCwgVFByb3BzLCBUQmVoYXZpb3I+XG4gIHwgVHJhbnNmb3JtUHJvcGVydHk8Um9sZSwgVFByb3BzLCBUQmVoYXZpb3I+XG4gIHwgVHJhbnNmb3JtUHJvcGVydHk8QXR0YWNobWVudCwgVFByb3BzLCBUQmVoYXZpb3I+XG4gIHwgUGFyc2VkSW50ZXJhY3Rpb25PcHRpb248VFByb3BzLCBUQmVoYXZpb3I+XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJhY3Rpb25SZXNvbHZlZFVzZXIge1xuICB1c2VyOiBVc2VyXG4gIG1lbWJlcjogSW50ZXJhY3Rpb25SZXNvbHZlZE1lbWJlclxufVxuXG5leHBvcnQgdHlwZSBJbnRlcmFjdGlvblJlc29sdmVkQ2hhbm5lbCA9IFBpY2s8Q2hhbm5lbCwgJ2lkJyB8ICduYW1lJyB8ICd0eXBlJyB8ICdwZXJtaXNzaW9ucycgfCAndGhyZWFkTWV0YWRhdGEnIHwgJ3BhcmVudElkJz5cblxuZXhwb3J0IHR5cGUgSW50ZXJhY3Rpb25SZXNvbHZlZE1lbWJlciA9IE9taXQ8TWVtYmVyLCAndXNlcicgfCAnZGVhZicgfCAnbXV0ZSc+XG4iXSwibmFtZXMiOlsiY29tbWFuZE9wdGlvbnNQYXJzZXIiLCJfX2ludGVyYWN0aW9uIiwib3B0aW9ucyIsImludGVyYWN0aW9uIiwiZGF0YSIsImFyZ3MiLCJvcHRpb24iLCJ0eXBlIiwiQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZXMiLCJTdWJDb21tYW5kR3JvdXAiLCJTdWJDb21tYW5kIiwibmFtZSIsIkNoYW5uZWwiLCJyZXNvbHZlZCIsImNoYW5uZWxzIiwiZ2V0IiwiQmlnSW50IiwidmFsdWUiLCJSb2xlIiwicm9sZXMiLCJVc2VyIiwidXNlciIsInVzZXJzIiwibWVtYmVyIiwibWVtYmVycyIsIkF0dGFjaG1lbnQiLCJhdHRhY2htZW50cyIsIk1lbnRpb25hYmxlIl0sIm1hcHBpbmdzIjoiOzs7OytCQWdCZ0JBOzs7ZUFBQUE7Ozt1QkFoQjhCO0FBZ0J2QyxTQUFTQSxxQkFHZEMsYUFBZ0UsRUFBRUMsT0FBaUM7SUFDbkcsNktBQTZLO0lBQzdLLE1BQU1DLGNBQWNGO0lBTXBCLElBQUksQ0FBQ0UsWUFBWUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztJQUMvQixJQUFJLENBQUNGLFNBQVNBLFVBQVVDLFlBQVlDLElBQUksQ0FBQ0YsT0FBTyxJQUFJLEVBQUU7SUFFdEQsTUFBTUcsT0FBbUQsQ0FBQztJQUUxRCxLQUFLLE1BQU1DLFVBQVVKLFFBQVM7UUFDNUIsT0FBUUksT0FBT0MsSUFBSTtZQUNqQixLQUFLQyxvQ0FBNkIsQ0FBQ0MsZUFBZTtZQUNsRCxLQUFLRCxvQ0FBNkIsQ0FBQ0UsVUFBVTtnQkFDM0NMLElBQUksQ0FBQ0MsT0FBT0ssSUFBSSxDQUFDLEdBQUdYLHFCQUFxQkcsYUFBYUcsT0FBT0osT0FBTztnQkFDcEU7WUFDRixLQUFLTSxvQ0FBNkIsQ0FBQ0ksT0FBTztnQkFDeENQLElBQUksQ0FBQ0MsT0FBT0ssSUFBSSxDQUFDLEdBQUdSLFlBQVlDLElBQUksQ0FBQ1MsUUFBUSxFQUFFQyxVQUFVQyxJQUFJQyxPQUFPVixPQUFPVyxLQUFLO2dCQUNoRjtZQUNGLEtBQUtULG9DQUE2QixDQUFDVSxJQUFJO2dCQUNyQ2IsSUFBSSxDQUFDQyxPQUFPSyxJQUFJLENBQUMsR0FBR1IsWUFBWUMsSUFBSSxDQUFDUyxRQUFRLEVBQUVNLE9BQU9KLElBQUlDLE9BQU9WLE9BQU9XLEtBQUs7Z0JBQzdFO1lBQ0YsS0FBS1Qsb0NBQTZCLENBQUNZLElBQUk7Z0JBQ3JDZixJQUFJLENBQUNDLE9BQU9LLElBQUksQ0FBQyxHQUFHO29CQUNsQlUsTUFBTWxCLFlBQVlDLElBQUksQ0FBQ1MsUUFBUSxFQUFFUyxPQUFPUCxJQUFJQyxPQUFPVixPQUFPVyxLQUFLO29CQUMvRE0sUUFBUXBCLFlBQVlDLElBQUksQ0FBQ1MsUUFBUSxFQUFFVyxTQUFTVCxJQUFJQyxPQUFPVixPQUFPVyxLQUFLO2dCQUNyRTtnQkFDQTtZQUNGLEtBQUtULG9DQUE2QixDQUFDaUIsVUFBVTtnQkFDM0NwQixJQUFJLENBQUNDLE9BQU9LLElBQUksQ0FBQyxHQUFHUixZQUFZQyxJQUFJLENBQUNTLFFBQVEsRUFBRWEsYUFBYVgsSUFBSUMsT0FBT1YsT0FBT1csS0FBSztnQkFDbkY7WUFDRixLQUFLVCxvQ0FBNkIsQ0FBQ21CLFdBQVc7Z0JBQzVDLGlDQUFpQztnQkFDakN0QixJQUFJLENBQUNDLE9BQU9LLElBQUksQ0FBQyxHQUFHLEFBQUNSLFlBQVlDLElBQUksQ0FBQ1MsUUFBUSxFQUFFTSxPQUFPSixJQUFJQyxPQUFPVixPQUFPVyxLQUFLLE1BQThEO29CQUMxSUksTUFBTWxCLFlBQVlDLElBQUksQ0FBQ1MsUUFBUSxFQUFFUyxPQUFPUCxJQUFJQyxPQUFPVixPQUFPVyxLQUFLO29CQUMvRE0sUUFBUXBCLFlBQVlDLElBQUksQ0FBQ1MsUUFBUSxFQUFFVyxTQUFTVCxJQUFJQyxPQUFPVixPQUFPVyxLQUFLO2dCQUNyRTtnQkFDQTtZQUNGO2dCQUNFWixJQUFJLENBQUNDLE9BQU9LLElBQUksQ0FBQyxHQUFHTCxPQUFPVyxLQUFLO1FBQ3BDO0lBQ0Y7SUFFQSxPQUFPWjtBQUNUIn0=