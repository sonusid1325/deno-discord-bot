import type { AllowedMentions, BigString, CreateApplicationCommand, DiscordActivity, DiscordActivityInstance, DiscordActivityLocation, DiscordAllowedMentions, DiscordApplication, DiscordApplicationCommand, DiscordApplicationCommandOption, DiscordApplicationCommandOptionChoice, DiscordAttachment, DiscordAuditLogEntry, DiscordAutoModerationActionExecution, DiscordAutoModerationRule, DiscordAvatarDecorationData, DiscordChannel, DiscordCreateApplicationCommand, DiscordDefaultReactionEmoji, DiscordEmbed, DiscordEmoji, DiscordEntitlement, DiscordForumTag, DiscordGetGatewayBot, DiscordGuild, DiscordGuildApplicationCommandPermissions, DiscordGuildOnboarding, DiscordGuildOnboardingPrompt, DiscordGuildOnboardingPromptOption, DiscordGuildWidget, DiscordGuildWidgetSettings, DiscordIntegrationCreateUpdate, DiscordInteraction, DiscordInteractionCallback, DiscordInteractionCallbackResponse, DiscordInteractionDataOption, DiscordInteractionDataResolved, DiscordInteractionResource, DiscordInviteCreate, DiscordInviteMetadata, DiscordInviteStageInstance, DiscordMember, DiscordMessage, DiscordMessageCall, DiscordMessageComponent, DiscordMessageInteractionMetadata, DiscordMessageSnapshot, DiscordPoll, DiscordPollMedia, DiscordPresenceUpdate, DiscordRole, DiscordScheduledEvent, DiscordScheduledEventRecurrenceRule, DiscordSku, DiscordSoundboardSound, DiscordStageInstance, DiscordSticker, DiscordStickerPack, DiscordSubscription, DiscordTeam, DiscordTemplate, DiscordThreadMember, DiscordThreadMemberGuildCreate, DiscordUser, DiscordVoiceRegion, DiscordVoiceState, DiscordWebhook, DiscordWelcomeScreen, RecursivePartial } from '@discordeno/types';
import type { Bot } from './bot.js';
import { type DesiredPropertiesBehavior, type SetupDesiredProps, type TransformersDesiredProperties } from './desiredProperties.js';
import { type Activity, type ActivityInstance, type ActivityLocation, type Application, type ApplicationCommand, type ApplicationCommandOption, type ApplicationCommandOptionChoice, type Attachment, type AuditLogEntry, type AutoModerationActionExecution, type AutoModerationRule, type AvatarDecorationData, type Channel, type Component, type DefaultReactionEmoji, type Embed, type Emoji, type Entitlement, type ForumTag, type GetGatewayBot, type Guild, type GuildApplicationCommandPermissions, type GuildOnboarding, type GuildOnboardingPrompt, type GuildOnboardingPromptOption, type GuildWidget, type GuildWidgetSettings, type Integration, type Interaction, type InteractionCallback, type InteractionCallbackResponse, type InteractionDataOption, type InteractionDataResolved, type InteractionResource, type Invite, type InviteStageInstance, type Member, type Message, type MessageCall, type MessageInteractionMetadata, type MessageSnapshot, type Poll, type PollMedia, type PresenceUpdate, type Role, type ScheduledEvent, type ScheduledEventRecurrenceRule, type Sku, type SoundboardSound, type StageInstance, type Sticker, type StickerPack, type Subscription, type Team, type Template, type ThreadMember, type ThreadMemberGuildCreate, type User, type VoiceRegion, type VoiceState, type Webhook, type WelcomeScreen } from './transformers/index.js';
export type Transformers<TProps extends TransformersDesiredProperties, TBehavior extends DesiredPropertiesBehavior> = {
    customizers: {
        activity: (bot: Bot<TProps, TBehavior>, payload: DiscordActivity, activity: Activity) => any;
        activityInstance: (bot: Bot<TProps, TBehavior>, payload: DiscordActivityInstance, activityInstance: SetupDesiredProps<ActivityInstance, TProps, TBehavior>) => any;
        activityLocation: (bot: Bot<TProps, TBehavior>, payload: DiscordActivityLocation, activityLocation: SetupDesiredProps<ActivityLocation, TProps, TBehavior>) => any;
        application: (bot: Bot<TProps, TBehavior>, payload: DiscordApplication, application: Application) => any;
        applicationCommand: (bot: Bot<TProps, TBehavior>, payload: DiscordApplicationCommand, applicationCommand: ApplicationCommand) => any;
        applicationCommandOption: (bot: Bot<TProps, TBehavior>, payload: DiscordApplicationCommandOption, applicationCommandOption: ApplicationCommandOption) => any;
        applicationCommandOptionChoice: (bot: Bot<TProps, TBehavior>, payload: DiscordApplicationCommandOptionChoice, applicationCommandOptionChoice: ApplicationCommandOptionChoice) => any;
        applicationCommandPermission: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildApplicationCommandPermissions, applicationCommandPermission: GuildApplicationCommandPermissions) => any;
        attachment: (bot: Bot<TProps, TBehavior>, payload: DiscordAttachment, attachment: SetupDesiredProps<Attachment, TProps, TBehavior>) => any;
        auditLogEntry: (bot: Bot<TProps, TBehavior>, payload: DiscordAuditLogEntry, auditLogEntry: AuditLogEntry) => any;
        automodActionExecution: (bot: Bot<TProps, TBehavior>, payload: DiscordAutoModerationActionExecution, automodActionExecution: AutoModerationActionExecution) => any;
        automodRule: (bot: Bot<TProps, TBehavior>, payload: DiscordAutoModerationRule, automodRule: AutoModerationRule) => any;
        avatarDecorationData: (bot: Bot<TProps, TBehavior>, payload: DiscordAvatarDecorationData, avatarDecorationData: SetupDesiredProps<AvatarDecorationData, TProps, TBehavior>) => any;
        channel: (bot: Bot<TProps, TBehavior>, payload: DiscordChannel, channel: SetupDesiredProps<Channel, TProps, TBehavior>) => any;
        component: (bot: Bot<TProps, TBehavior>, payload: DiscordMessageComponent, component: Component) => any;
        defaultReactionEmoji: (bot: Bot<TProps, TBehavior>, payload: DiscordDefaultReactionEmoji, defaultReactionEmoji: SetupDesiredProps<DefaultReactionEmoji, TProps, TBehavior>) => any;
        embed: (bot: Bot<TProps, TBehavior>, payload: DiscordEmbed, embed: Embed) => any;
        emoji: (bot: Bot<TProps, TBehavior>, payload: DiscordEmoji, emoji: SetupDesiredProps<Emoji, TProps, TBehavior>) => any;
        entitlement: (bot: Bot<TProps, TBehavior>, payload: DiscordEntitlement, entitlement: SetupDesiredProps<Entitlement, TProps, TBehavior>) => any;
        forumTag: (bot: Bot<TProps, TBehavior>, payload: DiscordForumTag, forumTag: SetupDesiredProps<ForumTag, TProps, TBehavior>) => any;
        gatewayBot: (bot: Bot<TProps, TBehavior>, payload: DiscordGetGatewayBot, getGatewayBot: GetGatewayBot) => any;
        guild: (bot: Bot<TProps, TBehavior>, payload: DiscordGuild, guild: SetupDesiredProps<Guild, TProps, TBehavior>) => any;
        guildOnboarding: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildOnboarding, onboarding: SetupDesiredProps<GuildOnboarding, TProps, TBehavior>) => any;
        guildOnboardingPrompt: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildOnboardingPrompt, onboardingPrompt: SetupDesiredProps<GuildOnboardingPrompt, TProps, TBehavior>) => any;
        guildOnboardingPromptOption: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildOnboardingPromptOption, onboardingPromptOption: GuildOnboardingPromptOption) => any;
        integration: (bot: Bot<TProps, TBehavior>, payload: DiscordIntegrationCreateUpdate, integration: Integration) => any;
        interaction: (bot: Bot<TProps, TBehavior>, payload: {
            interaction: DiscordInteraction;
            shardId: number;
        }, interaction: SetupDesiredProps<Interaction, TProps, TBehavior>) => any;
        interactionCallback: (bot: Bot<TProps, TBehavior>, payload: DiscordInteractionCallback, interactionCallback: SetupDesiredProps<InteractionCallback, TProps, TBehavior>) => any;
        interactionCallbackResponse: (bot: Bot<TProps, TBehavior>, payload: DiscordInteractionCallbackResponse, interactionCallbackResponse: SetupDesiredProps<InteractionCallbackResponse, TProps, TBehavior>) => any;
        interactionDataOptions: (bot: Bot<TProps, TBehavior>, payload: DiscordInteractionDataOption, interactionDataOptions: InteractionDataOption) => any;
        interactionDataResolved: (bot: Bot<TProps, TBehavior>, payload: {
            resolved: DiscordInteractionDataResolved;
            guildId?: bigint;
        }, interactionDataResolved: InteractionDataResolved) => any;
        interactionResource: (bot: Bot<TProps, TBehavior>, payload: DiscordInteractionResource, interactionResource: SetupDesiredProps<InteractionResource, TProps, TBehavior>) => any;
        invite: (bot: Bot<TProps, TBehavior>, payload: DiscordInviteCreate | DiscordInviteMetadata, invite: SetupDesiredProps<Invite, TProps, TBehavior>) => any;
        inviteStageInstance: (bot: Bot<TProps, TBehavior>, payload: DiscordInviteStageInstance, inviteStageInstance: SetupDesiredProps<InviteStageInstance, TProps, TBehavior>) => any;
        member: (bot: Bot<TProps, TBehavior>, payload: DiscordMember, member: SetupDesiredProps<Member, TProps, TBehavior>) => any;
        message: (bot: Bot<TProps, TBehavior>, payload: DiscordMessage, message: SetupDesiredProps<Message, TProps, TBehavior>) => any;
        messageCall: (bot: Bot<TProps, TBehavior>, payload: DiscordMessageCall, call: SetupDesiredProps<MessageCall, TProps, TBehavior>) => any;
        messageInteractionMetadata: (bot: Bot<TProps, TBehavior>, payload: DiscordMessageInteractionMetadata, metadata: SetupDesiredProps<MessageInteractionMetadata, TProps, TBehavior>) => any;
        messageSnapshot: (bot: Bot<TProps, TBehavior>, payload: DiscordMessageSnapshot, messageSnapshot: SetupDesiredProps<MessageSnapshot, TProps, TBehavior>) => any;
        poll: (bot: Bot<TProps, TBehavior>, payload: DiscordPoll, poll: SetupDesiredProps<Poll, TProps, TBehavior>) => any;
        pollMedia: (bot: Bot<TProps, TBehavior>, payload: DiscordPollMedia, pollMedia: SetupDesiredProps<PollMedia, TProps, TBehavior>) => any;
        presence: (bot: Bot<TProps, TBehavior>, payload: DiscordPresenceUpdate, presence: PresenceUpdate) => any;
        role: (bot: Bot<TProps, TBehavior>, payload: DiscordRole, role: SetupDesiredProps<Role, TProps, TBehavior>) => any;
        scheduledEvent: (bot: Bot<TProps, TBehavior>, payload: DiscordScheduledEvent, scheduledEvent: SetupDesiredProps<ScheduledEvent, TProps, TBehavior>) => any;
        scheduledEventRecurrenceRule: (bot: Bot<TProps, TBehavior>, payload: DiscordScheduledEventRecurrenceRule, scheduledEvent: SetupDesiredProps<ScheduledEventRecurrenceRule, TProps, TBehavior>) => any;
        sku: (bot: Bot<TProps, TBehavior>, payload: DiscordSku, sku: SetupDesiredProps<Sku, TProps, TBehavior>) => any;
        soundboardSound: (bot: Bot<TProps, TBehavior>, payload: DiscordSoundboardSound, soundboardSound: SetupDesiredProps<SoundboardSound, TProps, TBehavior>) => any;
        stageInstance: (bot: Bot<TProps, TBehavior>, payload: DiscordStageInstance, stageInstance: SetupDesiredProps<StageInstance, TProps, TBehavior>) => any;
        sticker: (bot: Bot<TProps, TBehavior>, payload: DiscordSticker, sticker: SetupDesiredProps<Sticker, TProps, TBehavior>) => any;
        stickerPack: (bot: Bot<TProps, TBehavior>, payload: DiscordStickerPack, stickerPack: StickerPack) => any;
        subscription: (bot: Bot<TProps, TBehavior>, payload: DiscordSubscription, subscription: SetupDesiredProps<Subscription, TProps, TBehavior>) => any;
        team: (bot: Bot<TProps, TBehavior>, payload: DiscordTeam, team: Team) => any;
        template: (bot: Bot<TProps, TBehavior>, payload: DiscordTemplate, template: Template) => any;
        threadMember: (bot: Bot<TProps, TBehavior>, payload: DiscordThreadMember, threadMember: ThreadMember) => any;
        threadMemberGuildCreate: (bot: Bot<TProps, TBehavior>, payload: DiscordThreadMemberGuildCreate, threadMemberGuildCreate: ThreadMemberGuildCreate) => any;
        user: (bot: Bot<TProps, TBehavior>, payload: DiscordUser, user: SetupDesiredProps<User, TProps, TBehavior>) => any;
        voiceRegion: (bot: Bot<TProps, TBehavior>, payload: DiscordVoiceRegion, voiceRegion: VoiceRegion) => any;
        voiceState: (bot: Bot<TProps, TBehavior>, payload: DiscordVoiceState, voiceState: SetupDesiredProps<VoiceState, TProps, TBehavior>) => any;
        webhook: (bot: Bot<TProps, TBehavior>, payload: DiscordWebhook, webhook: SetupDesiredProps<Webhook, TProps, TBehavior>) => any;
        welcomeScreen: (bot: Bot<TProps, TBehavior>, payload: DiscordWelcomeScreen, welcomeScreen: WelcomeScreen) => any;
        widget: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildWidget, widget: GuildWidget) => any;
        widgetSettings: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildWidgetSettings, widgetSettings: GuildWidgetSettings) => any;
    };
    desiredProperties: TransformersDesiredProperties;
    reverse: {
        activity: (bot: Bot<TProps, TBehavior>, payload: Activity) => DiscordActivity;
        allowedMentions: (bot: Bot<TProps, TBehavior>, payload: AllowedMentions) => DiscordAllowedMentions;
        application: (bot: Bot<TProps, TBehavior>, payload: Application) => DiscordApplication;
        applicationCommand: (bot: Bot<TProps, TBehavior>, payload: ApplicationCommand) => DiscordApplicationCommand;
        applicationCommandOption: (bot: Bot<TProps, TBehavior>, payload: ApplicationCommandOption) => DiscordApplicationCommandOption;
        applicationCommandOptionChoice: (bot: Bot<TProps, TBehavior>, payload: ApplicationCommandOptionChoice) => DiscordApplicationCommandOptionChoice;
        attachment: (bot: Bot<TProps, TBehavior>, payload: SetupDesiredProps<Attachment, TProps, TBehavior>) => DiscordAttachment;
        component: (bot: Bot<TProps, TBehavior>, payload: Component) => DiscordMessageComponent;
        createApplicationCommand: (bot: Bot<TProps, TBehavior>, payload: CreateApplicationCommand) => DiscordCreateApplicationCommand;
        embed: (bot: Bot<TProps, TBehavior>, payload: Embed) => DiscordEmbed;
        member: (bot: Bot<TProps, TBehavior>, payload: SetupDesiredProps<Member, TProps, TBehavior>) => DiscordMember;
        snowflake: (snowflake: BigString) => string;
        team: (bot: Bot<TProps, TBehavior>, payload: Team) => DiscordTeam;
        user: (bot: Bot<TProps, TBehavior>, payload: SetupDesiredProps<User, TProps, TBehavior>) => DiscordUser;
    };
    activity: (bot: Bot<TProps, TBehavior>, payload: DiscordActivity) => Activity;
    activityInstance: (bot: Bot<TProps, TBehavior>, payload: DiscordActivityInstance) => SetupDesiredProps<ActivityInstance, TProps, TBehavior>;
    activityLocation: (bot: Bot<TProps, TBehavior>, payload: DiscordActivityLocation) => SetupDesiredProps<ActivityLocation, TProps, TBehavior>;
    application: (bot: Bot<TProps, TBehavior>, payload: {
        application: DiscordApplication;
        shardId: number;
    }) => Application;
    applicationCommand: (bot: Bot<TProps, TBehavior>, payload: DiscordApplicationCommand) => ApplicationCommand;
    applicationCommandOption: (bot: Bot<TProps, TBehavior>, payload: DiscordApplicationCommandOption) => ApplicationCommandOption;
    applicationCommandOptionChoice: (bot: Bot<TProps, TBehavior>, payload: DiscordApplicationCommandOptionChoice) => ApplicationCommandOptionChoice;
    applicationCommandPermission: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildApplicationCommandPermissions) => GuildApplicationCommandPermissions;
    attachment: (bot: Bot<TProps, TBehavior>, payload: DiscordAttachment) => SetupDesiredProps<Attachment, TProps, TBehavior>;
    auditLogEntry: (bot: Bot<TProps, TBehavior>, payload: DiscordAuditLogEntry) => AuditLogEntry;
    automodActionExecution: (bot: Bot<TProps, TBehavior>, payload: DiscordAutoModerationActionExecution) => AutoModerationActionExecution;
    automodRule: (bot: Bot<TProps, TBehavior>, payload: DiscordAutoModerationRule) => AutoModerationRule;
    avatarDecorationData: (bot: Bot<TProps, TBehavior>, payload: DiscordAvatarDecorationData) => SetupDesiredProps<AvatarDecorationData, TProps, TBehavior>;
    channel: (bot: Bot<TProps, TBehavior>, payload: {
        channel: DiscordChannel;
        guildId?: BigString;
    }) => SetupDesiredProps<Channel, TProps, TBehavior>;
    component: (bot: Bot<TProps, TBehavior>, payload: DiscordMessageComponent) => Component;
    defaultReactionEmoji: (bot: Bot<TProps, TBehavior>, payload: DiscordDefaultReactionEmoji) => SetupDesiredProps<DefaultReactionEmoji, TProps, TBehavior>;
    embed: (bot: Bot<TProps, TBehavior>, payload: DiscordEmbed) => Embed;
    emoji: (bot: Bot<TProps, TBehavior>, payload: DiscordEmoji) => SetupDesiredProps<Emoji, TProps, TBehavior>;
    entitlement: (bot: Bot<TProps, TBehavior>, payload: DiscordEntitlement) => SetupDesiredProps<Entitlement, TProps, TBehavior>;
    forumTag: (bot: Bot<TProps, TBehavior>, payload: DiscordForumTag) => SetupDesiredProps<ForumTag, TProps, TBehavior>;
    gatewayBot: (bot: Bot<TProps, TBehavior>, payload: DiscordGetGatewayBot) => GetGatewayBot;
    guild: (bot: Bot<TProps, TBehavior>, payload: {
        guild: DiscordGuild;
        shardId: number;
    }) => SetupDesiredProps<Guild, TProps, TBehavior>;
    guildOnboarding: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildOnboarding) => SetupDesiredProps<GuildOnboarding, TProps, TBehavior>;
    guildOnboardingPrompt: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildOnboardingPrompt) => SetupDesiredProps<GuildOnboardingPrompt, TProps, TBehavior>;
    guildOnboardingPromptOption: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildOnboardingPromptOption) => GuildOnboardingPromptOption;
    integration: (bot: Bot<TProps, TBehavior>, payload: DiscordIntegrationCreateUpdate) => Integration;
    interaction: (bot: Bot<TProps, TBehavior>, payload: {
        interaction: DiscordInteraction;
        shardId: number;
    }) => SetupDesiredProps<Interaction, TProps, TBehavior>;
    interactionCallback: (bot: Bot<TProps, TBehavior>, payload: DiscordInteractionCallback) => SetupDesiredProps<InteractionCallback, TProps, TBehavior>;
    interactionCallbackResponse: (bot: Bot<TProps, TBehavior>, payload: {
        interactionCallbackResponse: DiscordInteractionCallbackResponse;
        shardId: number;
    }) => SetupDesiredProps<InteractionCallbackResponse, TProps, TBehavior>;
    interactionDataOptions: (bot: Bot<TProps, TBehavior>, payload: DiscordInteractionDataOption) => InteractionDataOption;
    interactionDataResolved: (bot: Bot<TProps, TBehavior>, payload: {
        resolved: DiscordInteractionDataResolved;
        shardId: number;
        guildId?: bigint;
    }) => InteractionDataResolved;
    interactionResource: (bot: Bot<TProps, TBehavior>, payload: {
        interactionResource: DiscordInteractionResource;
        shardId: number;
    }) => SetupDesiredProps<InteractionResource, TProps, TBehavior>;
    invite: (bot: Bot<TProps, TBehavior>, payload: {
        invite: DiscordInviteCreate | DiscordInviteMetadata;
        shardId: number;
    }) => SetupDesiredProps<Invite, TProps, TBehavior>;
    inviteStageInstance: (bot: Bot<TProps, TBehavior>, payload: DiscordInviteStageInstance & {
        guildId: BigString;
    }) => SetupDesiredProps<InviteStageInstance, TProps, TBehavior>;
    member: (bot: Bot<TProps, TBehavior>, payload: DiscordMember, guildId: BigString, userId: BigString) => SetupDesiredProps<Member, TProps, TBehavior>;
    message: (bot: Bot<TProps, TBehavior>, payload: {
        message: DiscordMessage;
        shardId: number;
    }) => SetupDesiredProps<Message, TProps, TBehavior>;
    messageCall: (bot: Bot<TProps, TBehavior>, payload: DiscordMessageCall) => SetupDesiredProps<MessageCall, TProps, TBehavior>;
    messageInteractionMetadata: (bot: Bot<TProps, TBehavior>, payload: DiscordMessageInteractionMetadata) => SetupDesiredProps<MessageInteractionMetadata, TProps, TBehavior>;
    messageSnapshot: (bot: Bot<TProps, TBehavior>, payload: {
        messageSnapshot: DiscordMessageSnapshot;
        shardId: number;
    }) => SetupDesiredProps<MessageSnapshot, TProps, TBehavior>;
    poll: (bot: Bot<TProps, TBehavior>, payload: DiscordPoll) => SetupDesiredProps<Poll, TProps, TBehavior>;
    pollMedia: (bot: Bot<TProps, TBehavior>, payload: DiscordPollMedia) => SetupDesiredProps<PollMedia, TProps, TBehavior>;
    presence: (bot: Bot<TProps, TBehavior>, payload: DiscordPresenceUpdate) => PresenceUpdate;
    role: (bot: Bot<TProps, TBehavior>, payload: {
        role: DiscordRole;
        guildId: BigString;
    }) => SetupDesiredProps<Role, TProps, TBehavior>;
    scheduledEvent: (bot: Bot<TProps, TBehavior>, payload: DiscordScheduledEvent) => SetupDesiredProps<ScheduledEvent, TProps, TBehavior>;
    scheduledEventRecurrenceRule: (bot: Bot<TProps, TBehavior>, payload: DiscordScheduledEventRecurrenceRule) => SetupDesiredProps<ScheduledEventRecurrenceRule, TProps, TBehavior>;
    sku: (bot: Bot<TProps, TBehavior>, payload: DiscordSku) => SetupDesiredProps<Sku, TProps, TBehavior>;
    soundboardSound: (bot: Bot<TProps, TBehavior>, payload: DiscordSoundboardSound) => SetupDesiredProps<SoundboardSound, TProps, TBehavior>;
    snowflake: (snowflake: BigString) => bigint;
    stageInstance: (bot: Bot<TProps, TBehavior>, payload: DiscordStageInstance) => SetupDesiredProps<StageInstance, TProps, TBehavior>;
    sticker: (bot: Bot<TProps, TBehavior>, payload: DiscordSticker) => SetupDesiredProps<Sticker, TProps, TBehavior>;
    stickerPack: (bot: Bot<TProps, TBehavior>, payload: DiscordStickerPack) => StickerPack;
    subscription: (bot: Bot<TProps, TBehavior>, payload: DiscordSubscription) => SetupDesiredProps<Subscription, TProps, TBehavior>;
    team: (bot: Bot<TProps, TBehavior>, payload: DiscordTeam) => Team;
    template: (bot: Bot<TProps, TBehavior>, payload: DiscordTemplate) => Template;
    threadMember: (bot: Bot<TProps, TBehavior>, payload: DiscordThreadMember) => ThreadMember;
    threadMemberGuildCreate: (bot: Bot<TProps, TBehavior>, payload: DiscordThreadMemberGuildCreate) => ThreadMemberGuildCreate;
    user: (bot: Bot<TProps, TBehavior>, payload: DiscordUser) => SetupDesiredProps<User, TProps, TBehavior>;
    voiceRegion: (bot: Bot<TProps, TBehavior>, payload: DiscordVoiceRegion) => VoiceRegion;
    voiceState: (bot: Bot<TProps, TBehavior>, payload: {
        voiceState: DiscordVoiceState;
        guildId: BigString;
    }) => SetupDesiredProps<VoiceState, TProps, TBehavior>;
    webhook: (bot: Bot<TProps, TBehavior>, payload: DiscordWebhook) => SetupDesiredProps<Webhook, TProps, TBehavior>;
    welcomeScreen: (bot: Bot<TProps, TBehavior>, payload: DiscordWelcomeScreen) => WelcomeScreen;
    widget: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildWidget) => GuildWidget;
    widgetSettings: (bot: Bot<TProps, TBehavior>, payload: DiscordGuildWidgetSettings) => GuildWidgetSettings;
};
export declare function createTransformers<TProps extends TransformersDesiredProperties, TBehavior extends DesiredPropertiesBehavior>(options: RecursivePartial<Transformers<TProps, TBehavior>>): Transformers<TProps, TBehavior>;
//# sourceMappingURL=transformers.d.ts.map