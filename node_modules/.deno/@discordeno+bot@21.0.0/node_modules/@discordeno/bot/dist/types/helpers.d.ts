import type { AddDmRecipientOptions, AddGuildMemberOptions, AtLeastOne, BeginGuildPrune, BigString, Camelize, CreateApplicationCommand, CreateApplicationEmoji, CreateAutoModerationRuleOptions, CreateChannelInvite, CreateEntitlement, CreateForumPostWithMessage, CreateGlobalApplicationCommandOptions, CreateGuild, CreateGuildApplicationCommandOptions, CreateGuildBan, CreateGuildBulkBan, CreateGuildChannel, CreateGuildEmoji, CreateGuildFromTemplate, CreateGuildRole, CreateGuildSoundboardSound, CreateGuildStickerOptions, CreateMessageOptions, CreateScheduledEvent, CreateStageInstance, CreateTemplate, CreateWebhook, DeleteWebhookMessageOptions, DiscordAccessTokenResponse, DiscordActivityInstance, DiscordApplicationCommandPermissions, DiscordApplicationRoleConnection, DiscordArchivedThreads, DiscordAuditLog, DiscordBan, DiscordConnection, DiscordCurrentAuthorization, DiscordFollowedChannel, DiscordGetGatewayBot, DiscordGuildPreview, DiscordGuildWidgetSettings, DiscordInvite, DiscordInviteMetadata, DiscordModifyGuildWelcomeScreen, DiscordPrunedCount, DiscordTokenExchange, DiscordTokenRevocation, DiscordVanityUrl, DiscordVoiceRegion, EditApplication, EditAutoModerationRuleOptions, EditBotMemberOptions, EditChannelPermissionOverridesOptions, EditGuildOnboarding, EditGuildRole, EditGuildStickerOptions, EditMessage, EditOwnVoiceState, EditScheduledEvent, EditUserVoiceState, ExecuteWebhook, GetApplicationCommandPermissionOptions, GetBans, GetEntitlements, GetGroupDmOptions, GetGuildAuditLog, GetGuildPruneCountQuery, GetInvite, GetMessagesOptions, GetReactions, GetScheduledEventUsers, GetScheduledEvents, GetUserGuilds, GetWebhookMessageOptions, InteractionCallbackData, InteractionCallbackOptions, InteractionResponse, ListArchivedThreads, ListGuildMembers, ListSkuSubscriptionsOptions, MfaLevels, ModifyApplicationEmoji, ModifyChannel, ModifyGuild, ModifyGuildChannelPositions, ModifyGuildEmoji, ModifyGuildMember, ModifyGuildSoundboardSound, ModifyGuildTemplate, ModifyRolePositions, ModifyWebhook, SearchMembers, SendSoundboardSound, StartThreadWithMessage, StartThreadWithoutMessage, UpsertGlobalApplicationCommandOptions, UpsertGuildApplicationCommandOptions } from '@discordeno/types';
import type { Bot } from './bot.js';
import type { DesiredPropertiesBehavior, SetupDesiredProps, TransformersDesiredProperties } from './desiredProperties.js';
import type { Application, ApplicationCommand, AutoModerationRule, Channel, Emoji, Entitlement, Guild, GuildApplicationCommandPermissions, GuildOnboarding, GuildWidget, GuildWidgetSettings, Integration, InteractionCallbackResponse, Invite, Member, Message, Role, ScheduledEvent, Sku, SoundboardSound, StageInstance, Sticker, StickerPack, Subscription, Template, ThreadMember, User, VoiceState, Webhook, WelcomeScreen } from './transformers/index.js';
export declare function createBotHelpers<TProps extends TransformersDesiredProperties, TBehavior extends DesiredPropertiesBehavior>(bot: Bot<TProps, TBehavior>): BotHelpers<TProps, TBehavior>;
export type BotHelpers<TProps extends TransformersDesiredProperties, TBehavior extends DesiredPropertiesBehavior> = {
    createAutomodRule: (guildId: BigString, options: CreateAutoModerationRuleOptions, reason?: string) => Promise<AutoModerationRule>;
    createChannel: (guildId: BigString, options: CreateGuildChannel, reason?: string) => Promise<SetupDesiredProps<Channel, TProps, TBehavior>>;
    createEmoji: (guildId: BigString, options: CreateGuildEmoji, reason?: string) => Promise<SetupDesiredProps<Emoji, TProps, TBehavior>>;
    createApplicationEmoji: (options: CreateApplicationEmoji) => Promise<SetupDesiredProps<Emoji, TProps, TBehavior>>;
    createForumThread: (channelId: BigString, options: CreateForumPostWithMessage, reason?: string) => Promise<SetupDesiredProps<Channel, TProps, TBehavior>>;
    createGlobalApplicationCommand: (command: CreateApplicationCommand, options?: CreateGlobalApplicationCommandOptions) => Promise<ApplicationCommand>;
    createGuild: (options: CreateGuild) => Promise<SetupDesiredProps<Guild, TProps, TBehavior>>;
    createGuildApplicationCommand: (command: CreateApplicationCommand, guildId: BigString, options?: CreateGuildApplicationCommandOptions) => Promise<ApplicationCommand>;
    createGuildFromTemplate: (templateCode: string, options: CreateGuildFromTemplate) => Promise<SetupDesiredProps<Guild, TProps, TBehavior>>;
    createGuildSticker: (guildId: BigString, options: CreateGuildStickerOptions, reason?: string) => Promise<SetupDesiredProps<Sticker, TProps, TBehavior>>;
    createGuildTemplate: (guildId: BigString, options: CreateTemplate) => Promise<Template>;
    createInvite: (channelId: BigString, options?: CreateChannelInvite, reason?: string) => Promise<Camelize<DiscordInvite>>;
    createRole: (guildId: BigString, options: CreateGuildRole, reason?: string) => Promise<SetupDesiredProps<Role, TProps, TBehavior>>;
    createScheduledEvent: (guildId: BigString, options: CreateScheduledEvent, reason?: string) => Promise<SetupDesiredProps<ScheduledEvent, TProps, TBehavior>>;
    createStageInstance: (options: CreateStageInstance, reason?: string) => Promise<SetupDesiredProps<StageInstance, TProps, TBehavior>>;
    createWebhook: (channelId: BigString, options: CreateWebhook, reason?: string) => Promise<SetupDesiredProps<Webhook, TProps, TBehavior>>;
    editApplicationCommandPermissions: (guildId: BigString, commandId: BigString, bearerToken: string, options: Camelize<DiscordApplicationCommandPermissions>[]) => Promise<GuildApplicationCommandPermissions>;
    editAutomodRule: (guildId: BigString, ruleId: BigString, options: Partial<EditAutoModerationRuleOptions>, reason?: string) => Promise<AutoModerationRule>;
    editBotProfile: (options: {
        username?: string;
        botAvatarURL?: string | null;
    }) => Promise<SetupDesiredProps<User, TProps, TBehavior>>;
    editChannel: (channelId: BigString, options: ModifyChannel, reason?: string) => Promise<SetupDesiredProps<Channel, TProps, TBehavior>>;
    editEmoji: (guildId: BigString, id: BigString, options: ModifyGuildEmoji, reason?: string) => Promise<SetupDesiredProps<Emoji, TProps, TBehavior>>;
    editApplicationEmoji: (id: BigString, options: ModifyApplicationEmoji) => Promise<SetupDesiredProps<Emoji, TProps, TBehavior>>;
    editFollowupMessage: (token: string, messageId: BigString, options: InteractionCallbackData) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    editGlobalApplicationCommand: (commandId: BigString, options: CreateApplicationCommand) => Promise<ApplicationCommand>;
    editGuild: (guildId: BigString, options: ModifyGuild, reason?: string) => Promise<SetupDesiredProps<Guild, TProps, TBehavior>>;
    editGuildApplicationCommand: (commandId: BigString, guildId: BigString, options: CreateApplicationCommand) => Promise<ApplicationCommand>;
    editGuildSticker: (guildId: BigString, stickerId: BigString, options: AtLeastOne<EditGuildStickerOptions>, reason?: string) => Promise<SetupDesiredProps<Sticker, TProps, TBehavior>>;
    editGuildTemplate: (guildId: BigString, templateCode: string, options: ModifyGuildTemplate) => Promise<Template>;
    editMessage: (channelId: BigString, messageId: BigString, options: EditMessage) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    editOriginalInteractionResponse: (token: string, options: InteractionCallbackData) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    editOriginalWebhookMessage: (webhookId: BigString, token: string, options: InteractionCallbackData & {
        threadId?: BigString;
    }) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    editRole: (guildId: BigString, roleId: BigString, options: EditGuildRole, reason?: string) => Promise<SetupDesiredProps<Role, TProps, TBehavior>>;
    editRolePositions: (guildId: BigString, options: ModifyRolePositions[], reason?: string) => Promise<SetupDesiredProps<Role, TProps, TBehavior>[]>;
    editScheduledEvent: (guildId: BigString, eventId: BigString, options: Partial<EditScheduledEvent>, reason?: string) => Promise<SetupDesiredProps<ScheduledEvent, TProps, TBehavior>>;
    editStageInstance: (channelId: BigString, topic: string, reason?: string) => Promise<SetupDesiredProps<StageInstance, TProps, TBehavior>>;
    editWebhook: (webhookId: BigString, options: ModifyWebhook, reason?: string) => Promise<SetupDesiredProps<Webhook, TProps, TBehavior>>;
    editWebhookMessage: (webhookId: BigString, token: string, messageId: BigString, options: InteractionCallbackData & {
        threadId?: BigString;
    }) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    editWebhookWithToken: (webhookId: BigString, token: string, options: Omit<ModifyWebhook, 'channelId'>) => Promise<SetupDesiredProps<Webhook, TProps, TBehavior>>;
    editWelcomeScreen: (guildId: BigString, options: Camelize<DiscordModifyGuildWelcomeScreen>, reason?: string) => Promise<WelcomeScreen>;
    editWidgetSettings: (guildId: BigString, options: Camelize<DiscordGuildWidgetSettings>, reason?: string) => Promise<GuildWidgetSettings>;
    editUserApplicationRoleConnection: (bearerToken: string, applicationId: BigString, options: Camelize<DiscordApplicationRoleConnection>) => Promise<Camelize<DiscordApplicationRoleConnection>>;
    executeWebhook: (webhookId: BigString, token: string, options: ExecuteWebhook) => Promise<SetupDesiredProps<Message, TProps, TBehavior> | undefined>;
    followAnnouncement: (sourceChannelId: BigString, targetChannelId: BigString) => Promise<Camelize<DiscordFollowedChannel>>;
    getActiveThreads: (guildId: BigString) => Promise<{
        threads: SetupDesiredProps<Channel, TProps, TBehavior>[];
        members: ThreadMember[];
    }>;
    getApplicationInfo: () => Promise<Application>;
    editApplicationInfo: (body: EditApplication) => Promise<Application>;
    getCurrentAuthenticationInfo: (bearerToken: string) => Promise<Camelize<DiscordCurrentAuthorization>>;
    exchangeToken: (clientId: BigString, clientSecret: string, options: Camelize<DiscordTokenExchange>) => Promise<Camelize<DiscordAccessTokenResponse>>;
    revokeToken: (clientId: BigString, clientSecret: string, options: Camelize<DiscordTokenRevocation>) => Promise<void>;
    getApplicationCommandPermission: (guildId: BigString, commandId: BigString, options?: GetApplicationCommandPermissionOptions) => Promise<GuildApplicationCommandPermissions>;
    getApplicationCommandPermissions: (guildId: BigString, options?: GetApplicationCommandPermissionOptions) => Promise<GuildApplicationCommandPermissions[]>;
    getAuditLog: (guildId: BigString, options?: GetGuildAuditLog) => Promise<Camelize<DiscordAuditLog>>;
    getAutomodRule: (guildId: BigString, ruleId: BigString) => Promise<AutoModerationRule>;
    getAutomodRules: (guildId: BigString) => Promise<AutoModerationRule[]>;
    getAvailableVoiceRegions: () => Promise<Camelize<DiscordVoiceRegion>[]>;
    getBan: (guildId: BigString, userId: BigString) => Promise<Camelize<DiscordBan>>;
    getBans: (guildId: BigString, options?: GetBans) => Promise<Camelize<DiscordBan>[]>;
    getChannel: (channelId: BigString) => Promise<SetupDesiredProps<Channel, TProps, TBehavior>>;
    getChannelInvites: (channelId: BigString) => Promise<Camelize<DiscordInviteMetadata>[]>;
    getChannels: (guildId: BigString) => Promise<SetupDesiredProps<Channel, TProps, TBehavior>[]>;
    getChannelWebhooks: (channelId: BigString) => Promise<SetupDesiredProps<Webhook, TProps, TBehavior>[]>;
    getDmChannel: (userId: BigString) => Promise<SetupDesiredProps<Channel, TProps, TBehavior>>;
    getGroupDmChannel: (options: GetGroupDmOptions) => Promise<SetupDesiredProps<Channel, TProps, TBehavior>>;
    getEmoji: (guildId: BigString, emojiId: BigString) => Promise<SetupDesiredProps<Emoji, TProps, TBehavior>>;
    getApplicationEmoji: (emojiId: BigString) => Promise<SetupDesiredProps<Emoji, TProps, TBehavior>>;
    getEmojis: (guildId: BigString) => Promise<SetupDesiredProps<Emoji, TProps, TBehavior>[]>;
    getApplicationEmojis: () => Promise<{
        items: SetupDesiredProps<Emoji, TProps, TBehavior>[];
    }>;
    getFollowupMessage: (token: string, messageId: BigString) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    getGatewayBot: () => Promise<Camelize<DiscordGetGatewayBot>>;
    getGlobalApplicationCommand: (commandId: BigString) => Promise<ApplicationCommand>;
    getGlobalApplicationCommands: () => Promise<ApplicationCommand[]>;
    getGuild: (guildId: BigString, options?: {
        counts?: boolean;
    }) => Promise<SetupDesiredProps<Guild, TProps, TBehavior>>;
    getGuilds: (bearerToken: string, options?: GetUserGuilds) => Promise<Partial<SetupDesiredProps<Guild, TProps, TBehavior>>[]>;
    getGuildApplicationCommand: (commandId: BigString, guildId: BigString) => Promise<ApplicationCommand>;
    getGuildApplicationCommands: (guildId: BigString) => Promise<ApplicationCommand[]>;
    getGuildPreview: (guildId: BigString) => Promise<Camelize<DiscordGuildPreview>>;
    getGuildSticker: (guildId: BigString, stickerId: BigString) => Promise<SetupDesiredProps<Sticker, TProps, TBehavior>>;
    getGuildStickers: (guildId: BigString) => Promise<SetupDesiredProps<Sticker, TProps, TBehavior>[]>;
    getGuildTemplate: (templateCode: string) => Promise<Template>;
    getGuildTemplates: (guildId: BigString) => Promise<Template[]>;
    getGuildWebhooks: (guildId: BigString) => Promise<SetupDesiredProps<Webhook, TProps, TBehavior>[]>;
    getIntegrations: (guildId: BigString) => Promise<Integration[]>;
    getInvite: (inviteCode: string, options?: GetInvite) => Promise<SetupDesiredProps<Invite, TProps, TBehavior>>;
    getInvites: (guildId: BigString) => Promise<SetupDesiredProps<Invite, TProps, TBehavior>[]>;
    getMessage: (channelId: BigString, messageId: BigString) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    getMessages: (channelId: BigString, options?: GetMessagesOptions) => Promise<SetupDesiredProps<Message, TProps, TBehavior>[]>;
    getStickerPack: (stickerPackId: BigString) => Promise<StickerPack>;
    getStickerPacks: () => Promise<StickerPack[]>;
    getOriginalInteractionResponse: (token: string) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    getPinnedMessages: (channelId: BigString) => Promise<SetupDesiredProps<Message, TProps, TBehavior>[]>;
    getPrivateArchivedThreads: (channelId: BigString, options?: ListArchivedThreads) => Promise<Camelize<DiscordArchivedThreads>>;
    getPrivateJoinedArchivedThreads: (channelId: BigString, options?: ListArchivedThreads) => Promise<Camelize<DiscordArchivedThreads>>;
    getPruneCount: (guildId: BigString, options?: GetGuildPruneCountQuery) => Promise<Camelize<DiscordPrunedCount>>;
    getPublicArchivedThreads: (channelId: BigString, options?: ListArchivedThreads) => Promise<Camelize<DiscordArchivedThreads>>;
    getRoles: (guildId: BigString) => Promise<SetupDesiredProps<Role, TProps, TBehavior>[]>;
    getRole: (guildId: BigString, roleId: BigString) => Promise<SetupDesiredProps<Role, TProps, TBehavior>>;
    getScheduledEvent: (guildId: BigString, eventId: BigString, options?: {
        withUserCount?: boolean;
    }) => Promise<SetupDesiredProps<ScheduledEvent, TProps, TBehavior>>;
    getScheduledEvents: (guildId: BigString, options?: GetScheduledEvents) => Promise<SetupDesiredProps<ScheduledEvent, TProps, TBehavior>[]>;
    getScheduledEventUsers: (guildId: BigString, eventId: BigString, options?: GetScheduledEventUsers) => Promise<Array<{
        user: SetupDesiredProps<User, TProps, TBehavior>;
        member?: SetupDesiredProps<Member, TProps, TBehavior>;
    }>>;
    getSessionInfo: () => Promise<Camelize<DiscordGetGatewayBot>>;
    getStageInstance: (channelId: BigString) => Promise<SetupDesiredProps<StageInstance, TProps, TBehavior>>;
    getOwnVoiceState: (guildId: BigString) => Promise<SetupDesiredProps<VoiceState, TProps, TBehavior>>;
    getUserVoiceState: (guildId: BigString, userId: BigString) => Promise<SetupDesiredProps<VoiceState, TProps, TBehavior>>;
    getSticker: (stickerId: BigString) => Promise<SetupDesiredProps<Sticker, TProps, TBehavior>>;
    getThreadMember: (channelId: BigString, userId: BigString) => Promise<ThreadMember>;
    getThreadMembers: (channelId: BigString) => Promise<ThreadMember[]>;
    getReactions: (channelId: BigString, messageId: BigString, reaction: string, options?: GetReactions) => Promise<SetupDesiredProps<User, TProps, TBehavior>[]>;
    getUser: (id: BigString) => Promise<SetupDesiredProps<User, TProps, TBehavior>>;
    getCurrentUser: (bearerToken: string) => Promise<SetupDesiredProps<User, TProps, TBehavior>>;
    getUserConnections: (bearerToken: string) => Promise<Camelize<DiscordConnection>[]>;
    getUserApplicationRoleConnection: (bearerToken: string, applicationId: BigString) => Promise<Camelize<DiscordApplicationRoleConnection>>;
    getVanityUrl: (guildId: BigString) => Promise<Camelize<DiscordVanityUrl>>;
    getVoiceRegions: (guildId: BigString) => Promise<Camelize<DiscordVoiceRegion>[]>;
    getWebhook: (webhookId: BigString) => Promise<SetupDesiredProps<Webhook, TProps, TBehavior>>;
    getWebhookMessage: (webhookId: BigString, token: string, messageId: BigString, options?: GetWebhookMessageOptions) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    getWebhookWithToken: (webhookId: BigString, token: string) => Promise<SetupDesiredProps<Webhook, TProps, TBehavior>>;
    getWelcomeScreen: (guildId: BigString) => Promise<WelcomeScreen>;
    getWidget: (guildId: BigString) => Promise<GuildWidget>;
    getWidgetSettings: (guildId: BigString) => Promise<GuildWidgetSettings>;
    publishMessage: (channelId: BigString, messageId: BigString) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    sendMessage: (channelId: BigString, options: CreateMessageOptions) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    sendFollowupMessage: (token: string, options: InteractionCallbackData) => Promise<SetupDesiredProps<Message, TProps, TBehavior>>;
    startThreadWithMessage: (channelId: BigString, messageId: BigString, options: StartThreadWithMessage, reason?: string) => Promise<SetupDesiredProps<Channel, TProps, TBehavior>>;
    startThreadWithoutMessage: (channelId: BigString, options: StartThreadWithoutMessage, reason?: string) => Promise<SetupDesiredProps<Channel, TProps, TBehavior>>;
    syncGuildTemplate: (guildId: BigString) => Promise<Template>;
    upsertGlobalApplicationCommands: (commands: CreateApplicationCommand[], options?: UpsertGlobalApplicationCommandOptions) => Promise<ApplicationCommand[]>;
    upsertGuildApplicationCommands: (guildId: BigString, commands: CreateApplicationCommand[], options?: UpsertGuildApplicationCommandOptions) => Promise<ApplicationCommand[]>;
    editBotMember: (guildId: BigString, options: EditBotMemberOptions, reason?: string) => Promise<SetupDesiredProps<Member, TProps, TBehavior>>;
    editMember: (guildId: BigString, userId: BigString, options: ModifyGuildMember, reason?: string) => Promise<SetupDesiredProps<Member, TProps, TBehavior>>;
    getMember: (guildId: BigString, userId: BigString) => Promise<SetupDesiredProps<Member, TProps, TBehavior>>;
    getCurrentMember: (guildId: BigString, bearerToken: string) => Promise<SetupDesiredProps<Member, TProps, TBehavior>>;
    getMembers: (guildId: BigString, options: ListGuildMembers) => Promise<SetupDesiredProps<Member, TProps, TBehavior>[]>;
    pruneMembers: (guildId: BigString, options: BeginGuildPrune, reason?: string) => Promise<{
        pruned: number | null;
    }>;
    searchMembers: (guildId: BigString, query: string, options?: Omit<SearchMembers, 'query'>) => Promise<SetupDesiredProps<Member, TProps, TBehavior>[]>;
    bulkBanMembers: (guildId: BigString, options: CreateGuildBulkBan, reason?: string) => Promise<{
        bannedUsers: bigint[];
        failedUsers: bigint[];
    }>;
    getApplicationActivityInstance: (applicationId: BigString, instanceId: string) => Promise<Camelize<DiscordActivityInstance>>;
    addReaction: (channelId: BigString, messageId: BigString, reaction: string) => Promise<void>;
    addReactions: (channelId: BigString, messageId: BigString, reactions: string[], ordered?: boolean) => Promise<void>;
    addRole: (guildId: BigString, userId: BigString, roleId: BigString, reason?: string) => Promise<void>;
    addThreadMember: (channelId: BigString, userId: BigString) => Promise<void>;
    addDmRecipient: (channelId: BigString, userId: BigString, options: AddDmRecipientOptions) => Promise<void>;
    addGuildMember: (guildId: BigString, userId: BigString, options: AddGuildMemberOptions) => Promise<void>;
    deleteAutomodRule: (guildId: BigString, ruleId: BigString, reason?: string) => Promise<void>;
    deleteChannel: (channelId: BigString, reason?: string) => Promise<void>;
    deleteChannelPermissionOverride: (channelId: BigString, overwriteId: BigString, reason?: string) => Promise<void>;
    deleteEmoji: (guildId: BigString, id: BigString, reason?: string) => Promise<void>;
    deleteApplicationEmoji: (id: BigString) => Promise<void>;
    deleteFollowupMessage: (token: string, messageId: BigString) => Promise<void>;
    deleteGlobalApplicationCommand: (commandId: BigString) => Promise<void>;
    deleteGuild: (guildId: BigString) => Promise<void>;
    deleteGuildApplicationCommand: (commandId: BigString, guildId: BigString) => Promise<void>;
    deleteGuildSticker: (guildId: BigString, stickerId: BigString, reason?: string) => Promise<void>;
    deleteGuildTemplate: (guildId: BigString, templateCode: string) => Promise<void>;
    deleteIntegration: (guildId: BigString, integrationId: BigString, reason?: string) => Promise<void>;
    deleteInvite: (inviteCode: string, reason?: string) => Promise<void>;
    deleteMessage: (channelId: BigString, messageId: BigString, reason?: string) => Promise<void>;
    deleteMessages: (channelId: BigString, messageIds: BigString[], reason?: string) => Promise<void>;
    deleteOriginalInteractionResponse: (token: string) => Promise<void>;
    deleteOwnReaction: (channelId: BigString, messageId: BigString, reaction: string) => Promise<void>;
    deleteReactionsAll: (channelId: BigString, messageId: BigString) => Promise<void>;
    deleteReactionsEmoji: (channelId: BigString, messageId: BigString, reaction: string) => Promise<void>;
    deleteRole: (guildId: BigString, roleId: BigString, reason?: string) => Promise<void>;
    deleteScheduledEvent: (guildId: BigString, eventId: BigString) => Promise<void>;
    deleteStageInstance: (channelId: BigString, reason?: string) => Promise<void>;
    deleteUserReaction: (channelId: BigString, messageId: BigString, userId: BigString, reaction: string) => Promise<void>;
    deleteWebhook: (webhookId: BigString, reason?: string) => Promise<void>;
    deleteWebhookMessage: (webhookId: BigString, token: string, messageId: BigString, options?: DeleteWebhookMessageOptions) => Promise<void>;
    deleteWebhookWithToken: (webhookId: BigString, token: string) => Promise<void>;
    editChannelPermissionOverrides: (channelId: BigString, options: EditChannelPermissionOverridesOptions, reason?: string) => Promise<void>;
    editChannelPositions: (guildId: BigString, channelPositions: ModifyGuildChannelPositions[]) => Promise<void>;
    editGuildMfaLevel: (guildId: BigString, mfaLevel: MfaLevels, reason?: string) => Promise<void>;
    editOwnVoiceState: (guildId: BigString, options: EditOwnVoiceState) => Promise<void>;
    editUserVoiceState: (guildId: BigString, options: EditUserVoiceState) => Promise<void>;
    joinThread: (channelId: BigString) => Promise<void>;
    leaveGuild: (guildId: BigString) => Promise<void>;
    leaveThread: (channelId: BigString) => Promise<void>;
    removeRole: (guildId: BigString, userId: BigString, roleId: BigString, reason?: string) => Promise<void>;
    removeThreadMember: (channelId: BigString, userId: BigString) => Promise<void>;
    removeDmRecipient: (channelId: BigString, userId: BigString) => Promise<void>;
    sendInteractionResponse: (interactionId: BigString, token: string, options: InteractionResponse, params?: InteractionCallbackOptions) => Promise<void | SetupDesiredProps<InteractionCallbackResponse, TProps, TBehavior>>;
    triggerTypingIndicator: (channelId: BigString) => Promise<void>;
    banMember: (guildId: BigString, userId: BigString, options?: CreateGuildBan, reason?: string) => Promise<void>;
    kickMember: (guildId: BigString, userId: BigString, reason?: string) => Promise<void>;
    pinMessage: (channelId: BigString, messageId: BigString, reason?: string) => Promise<void>;
    unbanMember: (guildId: BigString, userId: BigString, reason?: string) => Promise<void>;
    unpinMessage: (channelId: BigString, messageId: BigString, reason?: string) => Promise<void>;
    getGuildOnboarding: (guildId: BigString) => Promise<SetupDesiredProps<GuildOnboarding, TProps, TBehavior>>;
    editGuildOnboarding: (guildId: BigString, options: EditGuildOnboarding, reason?: string) => Promise<SetupDesiredProps<GuildOnboarding, TProps, TBehavior>>;
    listEntitlements: (applicationId: BigString, options?: GetEntitlements) => Promise<SetupDesiredProps<Entitlement, TProps, TBehavior>[]>;
    getEntitlement: (applicationId: BigString, entitlementId: BigString) => Promise<SetupDesiredProps<Entitlement, TProps, TBehavior>>;
    createTestEntitlement: (applicationId: BigString, body: CreateEntitlement) => Promise<Partial<SetupDesiredProps<Entitlement, TProps, TBehavior>>>;
    deleteTestEntitlement: (applicationId: BigString, entitlementId: BigString) => Promise<void>;
    listSkus: (applicationId: BigString) => Promise<SetupDesiredProps<Sku, TProps, TBehavior>[]>;
    listSubscriptions: (skuId: BigString, options?: ListSkuSubscriptionsOptions) => Promise<SetupDesiredProps<Subscription, TProps, TBehavior>[]>;
    getSubscription: (skuId: BigString, subscriptionId: BigString) => Promise<SetupDesiredProps<Subscription, TProps, TBehavior>>;
    sendSoundboardSound: (channelId: BigString, options: SendSoundboardSound) => Promise<void>;
    listDefaultSoundboardSounds: () => Promise<SetupDesiredProps<SoundboardSound, TProps, TBehavior>[]>;
    listGuildSoundboardSounds: (guildId: BigString) => Promise<{
        items: SetupDesiredProps<SoundboardSound, TProps, TBehavior>[];
    }>;
    getGuildSoundboardSound: (guildId: BigString, soundId: BigString) => Promise<SetupDesiredProps<SoundboardSound, TProps, TBehavior>>;
    createGuildSoundboardSound: (guildId: BigString, options: CreateGuildSoundboardSound, reason?: string) => Promise<SetupDesiredProps<SoundboardSound, TProps, TBehavior>>;
    modifyGuildSoundboardSound: (guildId: BigString, soundId: BigString, options: ModifyGuildSoundboardSound, reason?: string) => Promise<SetupDesiredProps<SoundboardSound, TProps, TBehavior>>;
    deleteGuildSoundboardSound: (guildId: BigString, soundId: BigString, reason?: string) => Promise<void>;
};
//# sourceMappingURL=helpers.d.ts.map