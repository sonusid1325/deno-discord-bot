export function transformPoll(bot, payload) {
    const props = bot.transformers.desiredProperties.poll;
    const poll = {};
    if (props.question && payload.question) poll.question = bot.transformers.pollMedia(bot, payload.question);
    if (props.answers && payload.answers) poll.answers = payload.answers.map((x)=>({
            answerId: x.answer_id,
            pollMedia: bot.transformers.pollMedia(bot, x.poll_media)
        }));
    if (props.expiry && payload.expiry) poll.expiry = Date.parse(payload.expiry);
    if (props.allowMultiselect && payload.allow_multiselect) poll.allowMultiselect = payload.allow_multiselect;
    if (props.layoutType) poll.layoutType = payload.layout_type;
    if (props.results && payload.results) {
        poll.results = {};
        const pollResultProps = bot.transformers.desiredProperties.pollResult;
        if (pollResultProps.isFinalized && payload.results.is_finalized) poll.results.isFinalized = payload.results.is_finalized;
        if (pollResultProps.answerCounts && payload.results.answer_counts) poll.results.answerCounts = payload.results.answer_counts.map((x)=>({
                id: x.id,
                count: x.count,
                meVoted: x.me_voted
            }));
    }
    return bot.transformers.customizers.poll(bot, payload, poll);
}
export function transformPollMedia(bot, payload) {
    const props = bot.transformers.desiredProperties.pollMedia;
    const pollMedia = {};
    if (props.text && payload.text) pollMedia.text = payload.text;
    if (props.emoji && payload.emoji) pollMedia.emoji = bot.transformers.emoji(bot, payload.emoji);
    return bot.transformers.customizers.pollMedia(bot, payload, pollMedia);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvcG9sbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERpc2NvcmRFbW9qaSwgRGlzY29yZFBvbGwsIERpc2NvcmRQb2xsTWVkaWEgfSBmcm9tICdAZGlzY29yZGVuby90eXBlcydcbmltcG9ydCB0eXBlIHsgSW50ZXJuYWxCb3QsIFBvbGwsIFBvbGxNZWRpYSwgUG9sbFJlc3VsdCB9IGZyb20gJy4uL2luZGV4LmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUG9sbChib3Q6IEludGVybmFsQm90LCBwYXlsb2FkOiBEaXNjb3JkUG9sbCk6IHR5cGVvZiBib3QudHJhbnNmb3JtZXJzLiRpbmZlcnJlZFR5cGVzLnBvbGwge1xuICBjb25zdCBwcm9wcyA9IGJvdC50cmFuc2Zvcm1lcnMuZGVzaXJlZFByb3BlcnRpZXMucG9sbFxuICBjb25zdCBwb2xsID0ge30gYXMgUG9sbFxuXG4gIGlmIChwcm9wcy5xdWVzdGlvbiAmJiBwYXlsb2FkLnF1ZXN0aW9uKSBwb2xsLnF1ZXN0aW9uID0gYm90LnRyYW5zZm9ybWVycy5wb2xsTWVkaWEoYm90LCBwYXlsb2FkLnF1ZXN0aW9uKVxuICBpZiAocHJvcHMuYW5zd2VycyAmJiBwYXlsb2FkLmFuc3dlcnMpXG4gICAgcG9sbC5hbnN3ZXJzID0gcGF5bG9hZC5hbnN3ZXJzLm1hcCgoeCkgPT4gKHsgYW5zd2VySWQ6IHguYW5zd2VyX2lkLCBwb2xsTWVkaWE6IGJvdC50cmFuc2Zvcm1lcnMucG9sbE1lZGlhKGJvdCwgeC5wb2xsX21lZGlhKSB9KSlcbiAgaWYgKHByb3BzLmV4cGlyeSAmJiBwYXlsb2FkLmV4cGlyeSkgcG9sbC5leHBpcnkgPSBEYXRlLnBhcnNlKHBheWxvYWQuZXhwaXJ5KVxuICBpZiAocHJvcHMuYWxsb3dNdWx0aXNlbGVjdCAmJiBwYXlsb2FkLmFsbG93X211bHRpc2VsZWN0KSBwb2xsLmFsbG93TXVsdGlzZWxlY3QgPSBwYXlsb2FkLmFsbG93X211bHRpc2VsZWN0XG4gIGlmIChwcm9wcy5sYXlvdXRUeXBlKSBwb2xsLmxheW91dFR5cGUgPSBwYXlsb2FkLmxheW91dF90eXBlXG4gIGlmIChwcm9wcy5yZXN1bHRzICYmIHBheWxvYWQucmVzdWx0cykge1xuICAgIHBvbGwucmVzdWx0cyA9IHt9IGFzIFBvbGxSZXN1bHRcbiAgICBjb25zdCBwb2xsUmVzdWx0UHJvcHMgPSBib3QudHJhbnNmb3JtZXJzLmRlc2lyZWRQcm9wZXJ0aWVzLnBvbGxSZXN1bHRcblxuICAgIGlmIChwb2xsUmVzdWx0UHJvcHMuaXNGaW5hbGl6ZWQgJiYgcGF5bG9hZC5yZXN1bHRzLmlzX2ZpbmFsaXplZCkgcG9sbC5yZXN1bHRzLmlzRmluYWxpemVkID0gcGF5bG9hZC5yZXN1bHRzLmlzX2ZpbmFsaXplZFxuICAgIGlmIChwb2xsUmVzdWx0UHJvcHMuYW5zd2VyQ291bnRzICYmIHBheWxvYWQucmVzdWx0cy5hbnN3ZXJfY291bnRzKVxuICAgICAgcG9sbC5yZXN1bHRzLmFuc3dlckNvdW50cyA9IHBheWxvYWQucmVzdWx0cy5hbnN3ZXJfY291bnRzLm1hcCgoeCkgPT4gKHsgaWQ6IHguaWQsIGNvdW50OiB4LmNvdW50LCBtZVZvdGVkOiB4Lm1lX3ZvdGVkIH0pKVxuICB9XG5cbiAgcmV0dXJuIGJvdC50cmFuc2Zvcm1lcnMuY3VzdG9taXplcnMucG9sbChib3QsIHBheWxvYWQsIHBvbGwpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2xsTWVkaWEoYm90OiBJbnRlcm5hbEJvdCwgcGF5bG9hZDogRGlzY29yZFBvbGxNZWRpYSk6IHR5cGVvZiBib3QudHJhbnNmb3JtZXJzLiRpbmZlcnJlZFR5cGVzLnBvbGxNZWRpYSB7XG4gIGNvbnN0IHByb3BzID0gYm90LnRyYW5zZm9ybWVycy5kZXNpcmVkUHJvcGVydGllcy5wb2xsTWVkaWFcbiAgY29uc3QgcG9sbE1lZGlhID0ge30gYXMgUG9sbE1lZGlhXG5cbiAgaWYgKHByb3BzLnRleHQgJiYgcGF5bG9hZC50ZXh0KSBwb2xsTWVkaWEudGV4dCA9IHBheWxvYWQudGV4dFxuICBpZiAocHJvcHMuZW1vamkgJiYgcGF5bG9hZC5lbW9qaSkgcG9sbE1lZGlhLmVtb2ppID0gYm90LnRyYW5zZm9ybWVycy5lbW9qaShib3QsIHBheWxvYWQuZW1vamkgYXMgRGlzY29yZEVtb2ppKVxuXG4gIHJldHVybiBib3QudHJhbnNmb3JtZXJzLmN1c3RvbWl6ZXJzLnBvbGxNZWRpYShib3QsIHBheWxvYWQsIHBvbGxNZWRpYSlcbn1cbiJdLCJuYW1lcyI6WyJ0cmFuc2Zvcm1Qb2xsIiwiYm90IiwicGF5bG9hZCIsInByb3BzIiwidHJhbnNmb3JtZXJzIiwiZGVzaXJlZFByb3BlcnRpZXMiLCJwb2xsIiwicXVlc3Rpb24iLCJwb2xsTWVkaWEiLCJhbnN3ZXJzIiwibWFwIiwieCIsImFuc3dlcklkIiwiYW5zd2VyX2lkIiwicG9sbF9tZWRpYSIsImV4cGlyeSIsIkRhdGUiLCJwYXJzZSIsImFsbG93TXVsdGlzZWxlY3QiLCJhbGxvd19tdWx0aXNlbGVjdCIsImxheW91dFR5cGUiLCJsYXlvdXRfdHlwZSIsInJlc3VsdHMiLCJwb2xsUmVzdWx0UHJvcHMiLCJwb2xsUmVzdWx0IiwiaXNGaW5hbGl6ZWQiLCJpc19maW5hbGl6ZWQiLCJhbnN3ZXJDb3VudHMiLCJhbnN3ZXJfY291bnRzIiwiaWQiLCJjb3VudCIsIm1lVm90ZWQiLCJtZV92b3RlZCIsImN1c3RvbWl6ZXJzIiwidHJhbnNmb3JtUG9sbE1lZGlhIiwidGV4dCIsImVtb2ppIl0sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLFNBQVNBLGNBQWNDLEdBQWdCLEVBQUVDLE9BQW9CO0lBQ2xFLE1BQU1DLFFBQVFGLElBQUlHLFlBQVksQ0FBQ0MsaUJBQWlCLENBQUNDLElBQUk7SUFDckQsTUFBTUEsT0FBTyxDQUFDO0lBRWQsSUFBSUgsTUFBTUksUUFBUSxJQUFJTCxRQUFRSyxRQUFRLEVBQUVELEtBQUtDLFFBQVEsR0FBR04sSUFBSUcsWUFBWSxDQUFDSSxTQUFTLENBQUNQLEtBQUtDLFFBQVFLLFFBQVE7SUFDeEcsSUFBSUosTUFBTU0sT0FBTyxJQUFJUCxRQUFRTyxPQUFPLEVBQ2xDSCxLQUFLRyxPQUFPLEdBQUdQLFFBQVFPLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLElBQU8sQ0FBQTtZQUFFQyxVQUFVRCxFQUFFRSxTQUFTO1lBQUVMLFdBQVdQLElBQUlHLFlBQVksQ0FBQ0ksU0FBUyxDQUFDUCxLQUFLVSxFQUFFRyxVQUFVO1FBQUUsQ0FBQTtJQUMvSCxJQUFJWCxNQUFNWSxNQUFNLElBQUliLFFBQVFhLE1BQU0sRUFBRVQsS0FBS1MsTUFBTSxHQUFHQyxLQUFLQyxLQUFLLENBQUNmLFFBQVFhLE1BQU07SUFDM0UsSUFBSVosTUFBTWUsZ0JBQWdCLElBQUloQixRQUFRaUIsaUJBQWlCLEVBQUViLEtBQUtZLGdCQUFnQixHQUFHaEIsUUFBUWlCLGlCQUFpQjtJQUMxRyxJQUFJaEIsTUFBTWlCLFVBQVUsRUFBRWQsS0FBS2MsVUFBVSxHQUFHbEIsUUFBUW1CLFdBQVc7SUFDM0QsSUFBSWxCLE1BQU1tQixPQUFPLElBQUlwQixRQUFRb0IsT0FBTyxFQUFFO1FBQ3BDaEIsS0FBS2dCLE9BQU8sR0FBRyxDQUFDO1FBQ2hCLE1BQU1DLGtCQUFrQnRCLElBQUlHLFlBQVksQ0FBQ0MsaUJBQWlCLENBQUNtQixVQUFVO1FBRXJFLElBQUlELGdCQUFnQkUsV0FBVyxJQUFJdkIsUUFBUW9CLE9BQU8sQ0FBQ0ksWUFBWSxFQUFFcEIsS0FBS2dCLE9BQU8sQ0FBQ0csV0FBVyxHQUFHdkIsUUFBUW9CLE9BQU8sQ0FBQ0ksWUFBWTtRQUN4SCxJQUFJSCxnQkFBZ0JJLFlBQVksSUFBSXpCLFFBQVFvQixPQUFPLENBQUNNLGFBQWEsRUFDL0R0QixLQUFLZ0IsT0FBTyxDQUFDSyxZQUFZLEdBQUd6QixRQUFRb0IsT0FBTyxDQUFDTSxhQUFhLENBQUNsQixHQUFHLENBQUMsQ0FBQ0MsSUFBTyxDQUFBO2dCQUFFa0IsSUFBSWxCLEVBQUVrQixFQUFFO2dCQUFFQyxPQUFPbkIsRUFBRW1CLEtBQUs7Z0JBQUVDLFNBQVNwQixFQUFFcUIsUUFBUTtZQUFDLENBQUE7SUFDMUg7SUFFQSxPQUFPL0IsSUFBSUcsWUFBWSxDQUFDNkIsV0FBVyxDQUFDM0IsSUFBSSxDQUFDTCxLQUFLQyxTQUFTSTtBQUN6RDtBQUVBLE9BQU8sU0FBUzRCLG1CQUFtQmpDLEdBQWdCLEVBQUVDLE9BQXlCO0lBQzVFLE1BQU1DLFFBQVFGLElBQUlHLFlBQVksQ0FBQ0MsaUJBQWlCLENBQUNHLFNBQVM7SUFDMUQsTUFBTUEsWUFBWSxDQUFDO0lBRW5CLElBQUlMLE1BQU1nQyxJQUFJLElBQUlqQyxRQUFRaUMsSUFBSSxFQUFFM0IsVUFBVTJCLElBQUksR0FBR2pDLFFBQVFpQyxJQUFJO0lBQzdELElBQUloQyxNQUFNaUMsS0FBSyxJQUFJbEMsUUFBUWtDLEtBQUssRUFBRTVCLFVBQVU0QixLQUFLLEdBQUduQyxJQUFJRyxZQUFZLENBQUNnQyxLQUFLLENBQUNuQyxLQUFLQyxRQUFRa0MsS0FBSztJQUU3RixPQUFPbkMsSUFBSUcsWUFBWSxDQUFDNkIsV0FBVyxDQUFDekIsU0FBUyxDQUFDUCxLQUFLQyxTQUFTTTtBQUM5RCJ9