export function transformAuditLogEntryToDiscordAuditLogEntry(bot, payload) {
    return {
        id: bot.transformers.reverse.snowflake(payload.id),
        changes: payload.changes,
        user_id: payload.userId ? bot.transformers.reverse.snowflake(payload.userId) : null,
        target_id: payload.targetId ? bot.transformers.reverse.snowflake(payload.targetId) : null,
        action_type: payload.actionType,
        options: payload.options ? {
            // respect transformer as reference than type
            application_id: payload.options.applicationId ? bot.transformers.reverse.snowflake(payload.options.applicationId) : undefined,
            auto_moderation_rule_name: payload.options.autoModerationRuleName,
            auto_moderation_rule_trigger_type: payload.options.autoModerationRuleTriggerType,
            channel_id: payload.options.channelId ? bot.transformers.reverse.snowflake(payload.options.channelId) : undefined,
            count: payload.options.count !== undefined ? payload.options.count.toString() : undefined,
            delete_member_days: payload.options.deleteMemberDays !== undefined ? payload.options.deleteMemberDays.toString() : undefined,
            id: payload.options.id ? bot.transformers.reverse.snowflake(payload.options.id) : undefined,
            members_removed: payload.options.membersRemoved !== undefined ? payload.options.membersRemoved.toString() : undefined,
            message_id: payload.options.messageId ? bot.transformers.reverse.snowflake(payload.options.messageId) : undefined,
            role_name: payload.options.roleName,
            type: payload.options.type !== undefined ? payload.options.type.toString() : undefined,
            integration_type: payload.options.integrationType
        } : undefined,
        reason: payload.reason
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvcmV2ZXJzZS9hdWRpdExvZ0VudHJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGlzY29yZEF1ZGl0TG9nRW50cnkgfSBmcm9tICdAZGlzY29yZGVuby90eXBlcydcbmltcG9ydCB0eXBlIHsgQXVkaXRMb2dFbnRyeSwgQm90IH0gZnJvbSAnLi4vLi4vaW5kZXguanMnXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1BdWRpdExvZ0VudHJ5VG9EaXNjb3JkQXVkaXRMb2dFbnRyeShib3Q6IEJvdCwgcGF5bG9hZDogQXVkaXRMb2dFbnRyeSk6IERpc2NvcmRBdWRpdExvZ0VudHJ5IHtcbiAgcmV0dXJuIHtcbiAgICBpZDogYm90LnRyYW5zZm9ybWVycy5yZXZlcnNlLnNub3dmbGFrZShwYXlsb2FkLmlkKSxcbiAgICBjaGFuZ2VzOiBwYXlsb2FkLmNoYW5nZXMsXG4gICAgdXNlcl9pZDogcGF5bG9hZC51c2VySWQgPyBib3QudHJhbnNmb3JtZXJzLnJldmVyc2Uuc25vd2ZsYWtlKHBheWxvYWQudXNlcklkKSA6IG51bGwsXG4gICAgdGFyZ2V0X2lkOiBwYXlsb2FkLnRhcmdldElkID8gYm90LnRyYW5zZm9ybWVycy5yZXZlcnNlLnNub3dmbGFrZShwYXlsb2FkLnRhcmdldElkKSA6IG51bGwsXG4gICAgYWN0aW9uX3R5cGU6IHBheWxvYWQuYWN0aW9uVHlwZSxcblxuICAgIG9wdGlvbnM6IHBheWxvYWQub3B0aW9uc1xuICAgICAgPyB7XG4gICAgICAgICAgLy8gcmVzcGVjdCB0cmFuc2Zvcm1lciBhcyByZWZlcmVuY2UgdGhhbiB0eXBlXG4gICAgICAgICAgYXBwbGljYXRpb25faWQ6IHBheWxvYWQub3B0aW9ucy5hcHBsaWNhdGlvbklkID8gYm90LnRyYW5zZm9ybWVycy5yZXZlcnNlLnNub3dmbGFrZShwYXlsb2FkLm9wdGlvbnMuYXBwbGljYXRpb25JZCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgYXV0b19tb2RlcmF0aW9uX3J1bGVfbmFtZTogcGF5bG9hZC5vcHRpb25zLmF1dG9Nb2RlcmF0aW9uUnVsZU5hbWUsXG4gICAgICAgICAgYXV0b19tb2RlcmF0aW9uX3J1bGVfdHJpZ2dlcl90eXBlOiBwYXlsb2FkLm9wdGlvbnMuYXV0b01vZGVyYXRpb25SdWxlVHJpZ2dlclR5cGUsXG4gICAgICAgICAgY2hhbm5lbF9pZDogcGF5bG9hZC5vcHRpb25zLmNoYW5uZWxJZCA/IGJvdC50cmFuc2Zvcm1lcnMucmV2ZXJzZS5zbm93Zmxha2UocGF5bG9hZC5vcHRpb25zLmNoYW5uZWxJZCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgY291bnQ6IHBheWxvYWQub3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkID8gcGF5bG9hZC5vcHRpb25zLmNvdW50LnRvU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgZGVsZXRlX21lbWJlcl9kYXlzOiBwYXlsb2FkLm9wdGlvbnMuZGVsZXRlTWVtYmVyRGF5cyAhPT0gdW5kZWZpbmVkID8gcGF5bG9hZC5vcHRpb25zLmRlbGV0ZU1lbWJlckRheXMudG9TdHJpbmcoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpZDogcGF5bG9hZC5vcHRpb25zLmlkID8gYm90LnRyYW5zZm9ybWVycy5yZXZlcnNlLnNub3dmbGFrZShwYXlsb2FkLm9wdGlvbnMuaWQpIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1lbWJlcnNfcmVtb3ZlZDogcGF5bG9hZC5vcHRpb25zLm1lbWJlcnNSZW1vdmVkICE9PSB1bmRlZmluZWQgPyBwYXlsb2FkLm9wdGlvbnMubWVtYmVyc1JlbW92ZWQudG9TdHJpbmcoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtZXNzYWdlX2lkOiBwYXlsb2FkLm9wdGlvbnMubWVzc2FnZUlkID8gYm90LnRyYW5zZm9ybWVycy5yZXZlcnNlLnNub3dmbGFrZShwYXlsb2FkLm9wdGlvbnMubWVzc2FnZUlkKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICByb2xlX25hbWU6IHBheWxvYWQub3B0aW9ucy5yb2xlTmFtZSxcbiAgICAgICAgICB0eXBlOiBwYXlsb2FkLm9wdGlvbnMudHlwZSAhPT0gdW5kZWZpbmVkID8gcGF5bG9hZC5vcHRpb25zLnR5cGUudG9TdHJpbmcoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpbnRlZ3JhdGlvbl90eXBlOiBwYXlsb2FkLm9wdGlvbnMuaW50ZWdyYXRpb25UeXBlLFxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZCxcbiAgICByZWFzb246IHBheWxvYWQucmVhc29uLFxuICB9XG59XG4iXSwibmFtZXMiOlsidHJhbnNmb3JtQXVkaXRMb2dFbnRyeVRvRGlzY29yZEF1ZGl0TG9nRW50cnkiLCJib3QiLCJwYXlsb2FkIiwiaWQiLCJ0cmFuc2Zvcm1lcnMiLCJyZXZlcnNlIiwic25vd2ZsYWtlIiwiY2hhbmdlcyIsInVzZXJfaWQiLCJ1c2VySWQiLCJ0YXJnZXRfaWQiLCJ0YXJnZXRJZCIsImFjdGlvbl90eXBlIiwiYWN0aW9uVHlwZSIsIm9wdGlvbnMiLCJhcHBsaWNhdGlvbl9pZCIsImFwcGxpY2F0aW9uSWQiLCJ1bmRlZmluZWQiLCJhdXRvX21vZGVyYXRpb25fcnVsZV9uYW1lIiwiYXV0b01vZGVyYXRpb25SdWxlTmFtZSIsImF1dG9fbW9kZXJhdGlvbl9ydWxlX3RyaWdnZXJfdHlwZSIsImF1dG9Nb2RlcmF0aW9uUnVsZVRyaWdnZXJUeXBlIiwiY2hhbm5lbF9pZCIsImNoYW5uZWxJZCIsImNvdW50IiwidG9TdHJpbmciLCJkZWxldGVfbWVtYmVyX2RheXMiLCJkZWxldGVNZW1iZXJEYXlzIiwibWVtYmVyc19yZW1vdmVkIiwibWVtYmVyc1JlbW92ZWQiLCJtZXNzYWdlX2lkIiwibWVzc2FnZUlkIiwicm9sZV9uYW1lIiwicm9sZU5hbWUiLCJ0eXBlIiwiaW50ZWdyYXRpb25fdHlwZSIsImludGVncmF0aW9uVHlwZSIsInJlYXNvbiJdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxTQUFTQSw2Q0FBNkNDLEdBQVEsRUFBRUMsT0FBc0I7SUFDM0YsT0FBTztRQUNMQyxJQUFJRixJQUFJRyxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDSixRQUFRQyxFQUFFO1FBQ2pESSxTQUFTTCxRQUFRSyxPQUFPO1FBQ3hCQyxTQUFTTixRQUFRTyxNQUFNLEdBQUdSLElBQUlHLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQyxTQUFTLENBQUNKLFFBQVFPLE1BQU0sSUFBSTtRQUMvRUMsV0FBV1IsUUFBUVMsUUFBUSxHQUFHVixJQUFJRyxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDSixRQUFRUyxRQUFRLElBQUk7UUFDckZDLGFBQWFWLFFBQVFXLFVBQVU7UUFFL0JDLFNBQVNaLFFBQVFZLE9BQU8sR0FDcEI7WUFDRSw2Q0FBNkM7WUFDN0NDLGdCQUFnQmIsUUFBUVksT0FBTyxDQUFDRSxhQUFhLEdBQUdmLElBQUlHLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQyxTQUFTLENBQUNKLFFBQVFZLE9BQU8sQ0FBQ0UsYUFBYSxJQUFJQztZQUNwSEMsMkJBQTJCaEIsUUFBUVksT0FBTyxDQUFDSyxzQkFBc0I7WUFDakVDLG1DQUFtQ2xCLFFBQVFZLE9BQU8sQ0FBQ08sNkJBQTZCO1lBQ2hGQyxZQUFZcEIsUUFBUVksT0FBTyxDQUFDUyxTQUFTLEdBQUd0QixJQUFJRyxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDSixRQUFRWSxPQUFPLENBQUNTLFNBQVMsSUFBSU47WUFDeEdPLE9BQU90QixRQUFRWSxPQUFPLENBQUNVLEtBQUssS0FBS1AsWUFBWWYsUUFBUVksT0FBTyxDQUFDVSxLQUFLLENBQUNDLFFBQVEsS0FBS1I7WUFDaEZTLG9CQUFvQnhCLFFBQVFZLE9BQU8sQ0FBQ2EsZ0JBQWdCLEtBQUtWLFlBQVlmLFFBQVFZLE9BQU8sQ0FBQ2EsZ0JBQWdCLENBQUNGLFFBQVEsS0FBS1I7WUFDbkhkLElBQUlELFFBQVFZLE9BQU8sQ0FBQ1gsRUFBRSxHQUFHRixJQUFJRyxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDSixRQUFRWSxPQUFPLENBQUNYLEVBQUUsSUFBSWM7WUFDbEZXLGlCQUFpQjFCLFFBQVFZLE9BQU8sQ0FBQ2UsY0FBYyxLQUFLWixZQUFZZixRQUFRWSxPQUFPLENBQUNlLGNBQWMsQ0FBQ0osUUFBUSxLQUFLUjtZQUM1R2EsWUFBWTVCLFFBQVFZLE9BQU8sQ0FBQ2lCLFNBQVMsR0FBRzlCLElBQUlHLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQyxTQUFTLENBQUNKLFFBQVFZLE9BQU8sQ0FBQ2lCLFNBQVMsSUFBSWQ7WUFDeEdlLFdBQVc5QixRQUFRWSxPQUFPLENBQUNtQixRQUFRO1lBQ25DQyxNQUFNaEMsUUFBUVksT0FBTyxDQUFDb0IsSUFBSSxLQUFLakIsWUFBWWYsUUFBUVksT0FBTyxDQUFDb0IsSUFBSSxDQUFDVCxRQUFRLEtBQUtSO1lBQzdFa0Isa0JBQWtCakMsUUFBUVksT0FBTyxDQUFDc0IsZUFBZTtRQUNuRCxJQUNBbkI7UUFDSm9CLFFBQVFuQyxRQUFRbUMsTUFBTTtJQUN4QjtBQUNGIn0=