import { ToggleBitfield } from './ToggleBitfield.js';
export const RoleToggle = {
    /** If this role is showed separately in the user listing */ hoist: 1 << 0,
    /** Whether this role is managed by an integration */ managed: 1 << 1,
    /** Whether this role is mentionable */ mentionable: 1 << 2,
    /** Whether this is the guilds premium subscriber role */ premiumSubscriber: 1 << 3,
    /** Whether this role is available for purchase. */ availableForPurchase: 1 << 4,
    /** Whether this role is available for guild connections. */ guildConnections: 1 << 5
};
export class RoleToggles extends ToggleBitfield {
    constructor(roleOrTogglesInt){
        super();
        if (typeof roleOrTogglesInt === 'number') this.bitfield = roleOrTogglesInt;
        else {
            const role = roleOrTogglesInt;
            if (role.hoist) this.add(RoleToggle.hoist);
            if (role.managed) this.add(RoleToggle.managed);
            if (role.mentionable) this.add(RoleToggle.mentionable);
            if (role.tags?.premium_subscriber === null) this.add(RoleToggle.premiumSubscriber);
            if (role.tags?.available_for_purchase === null) this.add(RoleToggle.availableForPurchase);
            if (role.tags?.guild_connections === null) this.add(RoleToggle.guildConnections);
        }
    }
    /** If this role is showed separately in the user listing */ get hoist() {
        return this.has('hoist');
    }
    /** Whether this role is managed by an integration */ get managed() {
        return this.has('managed');
    }
    /** Whether this role is mentionable */ get mentionable() {
        return this.has('mentionable');
    }
    /** Whether this is the guilds premium subscriber role */ get premiumSubscriber() {
        return this.has('premiumSubscriber');
    }
    /** Whether this role is available for purchase. */ get availableForPurchase() {
        return this.has('availableForPurchase');
    }
    /** Whether this is a guild's linked role. */ get guildConnections() {
        return this.has('guildConnections');
    }
    /** Checks whether or not the permissions exist in this */ has(permissions) {
        if (!Array.isArray(permissions)) return super.contains(RoleToggle[permissions]);
        return super.contains(permissions.reduce((a, b)=>a |= RoleToggle[b], 0));
    }
    /** Lists all the toggles for the role and whether or not each is true or false. */ list() {
        const json = {};
        for (const [key, value] of Object.entries(RoleToggle)){
            json[key] = super.contains(value);
        }
        return json;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdG9nZ2xlcy9yb2xlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGlzY29yZFJvbGUgfSBmcm9tICdAZGlzY29yZGVuby90eXBlcydcbmltcG9ydCB7IFRvZ2dsZUJpdGZpZWxkIH0gZnJvbSAnLi9Ub2dnbGVCaXRmaWVsZC5qcydcblxuZXhwb3J0IGNvbnN0IFJvbGVUb2dnbGUgPSB7XG4gIC8qKiBJZiB0aGlzIHJvbGUgaXMgc2hvd2VkIHNlcGFyYXRlbHkgaW4gdGhlIHVzZXIgbGlzdGluZyAqL1xuICBob2lzdDogMSA8PCAwLFxuICAvKiogV2hldGhlciB0aGlzIHJvbGUgaXMgbWFuYWdlZCBieSBhbiBpbnRlZ3JhdGlvbiAqL1xuICBtYW5hZ2VkOiAxIDw8IDEsXG4gIC8qKiBXaGV0aGVyIHRoaXMgcm9sZSBpcyBtZW50aW9uYWJsZSAqL1xuICBtZW50aW9uYWJsZTogMSA8PCAyLFxuICAvKiogV2hldGhlciB0aGlzIGlzIHRoZSBndWlsZHMgcHJlbWl1bSBzdWJzY3JpYmVyIHJvbGUgKi9cbiAgcHJlbWl1bVN1YnNjcmliZXI6IDEgPDwgMyxcbiAgLyoqIFdoZXRoZXIgdGhpcyByb2xlIGlzIGF2YWlsYWJsZSBmb3IgcHVyY2hhc2UuICovXG4gIGF2YWlsYWJsZUZvclB1cmNoYXNlOiAxIDw8IDQsXG4gIC8qKiBXaGV0aGVyIHRoaXMgcm9sZSBpcyBhdmFpbGFibGUgZm9yIGd1aWxkIGNvbm5lY3Rpb25zLiAqL1xuICBndWlsZENvbm5lY3Rpb25zOiAxIDw8IDUsXG59XG5cbmV4cG9ydCBjbGFzcyBSb2xlVG9nZ2xlcyBleHRlbmRzIFRvZ2dsZUJpdGZpZWxkIHtcbiAgY29uc3RydWN0b3Iocm9sZU9yVG9nZ2xlc0ludDogRGlzY29yZFJvbGUgfCBudW1iZXIpIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAodHlwZW9mIHJvbGVPclRvZ2dsZXNJbnQgPT09ICdudW1iZXInKSB0aGlzLmJpdGZpZWxkID0gcm9sZU9yVG9nZ2xlc0ludFxuICAgIGVsc2Uge1xuICAgICAgY29uc3Qgcm9sZSA9IHJvbGVPclRvZ2dsZXNJbnRcblxuICAgICAgaWYgKHJvbGUuaG9pc3QpIHRoaXMuYWRkKFJvbGVUb2dnbGUuaG9pc3QpXG4gICAgICBpZiAocm9sZS5tYW5hZ2VkKSB0aGlzLmFkZChSb2xlVG9nZ2xlLm1hbmFnZWQpXG4gICAgICBpZiAocm9sZS5tZW50aW9uYWJsZSkgdGhpcy5hZGQoUm9sZVRvZ2dsZS5tZW50aW9uYWJsZSlcbiAgICAgIGlmIChyb2xlLnRhZ3M/LnByZW1pdW1fc3Vic2NyaWJlciA9PT0gbnVsbCkgdGhpcy5hZGQoUm9sZVRvZ2dsZS5wcmVtaXVtU3Vic2NyaWJlcilcbiAgICAgIGlmIChyb2xlLnRhZ3M/LmF2YWlsYWJsZV9mb3JfcHVyY2hhc2UgPT09IG51bGwpIHRoaXMuYWRkKFJvbGVUb2dnbGUuYXZhaWxhYmxlRm9yUHVyY2hhc2UpXG4gICAgICBpZiAocm9sZS50YWdzPy5ndWlsZF9jb25uZWN0aW9ucyA9PT0gbnVsbCkgdGhpcy5hZGQoUm9sZVRvZ2dsZS5ndWlsZENvbm5lY3Rpb25zKVxuICAgIH1cbiAgfVxuXG4gIC8qKiBJZiB0aGlzIHJvbGUgaXMgc2hvd2VkIHNlcGFyYXRlbHkgaW4gdGhlIHVzZXIgbGlzdGluZyAqL1xuICBnZXQgaG9pc3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKCdob2lzdCcpXG4gIH1cblxuICAvKiogV2hldGhlciB0aGlzIHJvbGUgaXMgbWFuYWdlZCBieSBhbiBpbnRlZ3JhdGlvbiAqL1xuICBnZXQgbWFuYWdlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoJ21hbmFnZWQnKVxuICB9XG5cbiAgLyoqIFdoZXRoZXIgdGhpcyByb2xlIGlzIG1lbnRpb25hYmxlICovXG4gIGdldCBtZW50aW9uYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoJ21lbnRpb25hYmxlJylcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRoaXMgaXMgdGhlIGd1aWxkcyBwcmVtaXVtIHN1YnNjcmliZXIgcm9sZSAqL1xuICBnZXQgcHJlbWl1bVN1YnNjcmliZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKCdwcmVtaXVtU3Vic2NyaWJlcicpXG4gIH1cblxuICAvKiogV2hldGhlciB0aGlzIHJvbGUgaXMgYXZhaWxhYmxlIGZvciBwdXJjaGFzZS4gKi9cbiAgZ2V0IGF2YWlsYWJsZUZvclB1cmNoYXNlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhcygnYXZhaWxhYmxlRm9yUHVyY2hhc2UnKVxuICB9XG5cbiAgLyoqIFdoZXRoZXIgdGhpcyBpcyBhIGd1aWxkJ3MgbGlua2VkIHJvbGUuICovXG4gIGdldCBndWlsZENvbm5lY3Rpb25zKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhcygnZ3VpbGRDb25uZWN0aW9ucycpXG4gIH1cblxuICAvKiogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoZSBwZXJtaXNzaW9ucyBleGlzdCBpbiB0aGlzICovXG4gIGhhcyhwZXJtaXNzaW9uczogUm9sZVRvZ2dsZUtleXMgfCBSb2xlVG9nZ2xlS2V5c1tdKTogYm9vbGVhbiB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBlcm1pc3Npb25zKSkgcmV0dXJuIHN1cGVyLmNvbnRhaW5zKFJvbGVUb2dnbGVbcGVybWlzc2lvbnNdKVxuXG4gICAgcmV0dXJuIHN1cGVyLmNvbnRhaW5zKHBlcm1pc3Npb25zLnJlZHVjZSgoYSwgYikgPT4gKGEgfD0gUm9sZVRvZ2dsZVtiXSksIDApKVxuICB9XG5cbiAgLyoqIExpc3RzIGFsbCB0aGUgdG9nZ2xlcyBmb3IgdGhlIHJvbGUgYW5kIHdoZXRoZXIgb3Igbm90IGVhY2ggaXMgdHJ1ZSBvciBmYWxzZS4gKi9cbiAgbGlzdCgpOiBSZWNvcmQ8Um9sZVRvZ2dsZUtleXMsIGJvb2xlYW4+IHtcbiAgICBjb25zdCBqc29uOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiA9IHt9XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoUm9sZVRvZ2dsZSkpIHtcbiAgICAgIGpzb25ba2V5XSA9IHN1cGVyLmNvbnRhaW5zKHZhbHVlKVxuICAgIH1cblxuICAgIHJldHVybiBqc29uIGFzIFJlY29yZDxSb2xlVG9nZ2xlS2V5cywgYm9vbGVhbj5cbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSb2xlVG9nZ2xlS2V5cyA9IGtleW9mIHR5cGVvZiBSb2xlVG9nZ2xlXG4iXSwibmFtZXMiOlsiVG9nZ2xlQml0ZmllbGQiLCJSb2xlVG9nZ2xlIiwiaG9pc3QiLCJtYW5hZ2VkIiwibWVudGlvbmFibGUiLCJwcmVtaXVtU3Vic2NyaWJlciIsImF2YWlsYWJsZUZvclB1cmNoYXNlIiwiZ3VpbGRDb25uZWN0aW9ucyIsIlJvbGVUb2dnbGVzIiwiY29uc3RydWN0b3IiLCJyb2xlT3JUb2dnbGVzSW50IiwiYml0ZmllbGQiLCJyb2xlIiwiYWRkIiwidGFncyIsInByZW1pdW1fc3Vic2NyaWJlciIsImF2YWlsYWJsZV9mb3JfcHVyY2hhc2UiLCJndWlsZF9jb25uZWN0aW9ucyIsImhhcyIsInBlcm1pc3Npb25zIiwiQXJyYXkiLCJpc0FycmF5IiwiY29udGFpbnMiLCJyZWR1Y2UiLCJhIiwiYiIsImxpc3QiLCJqc29uIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTQSxjQUFjLFFBQVEsc0JBQXFCO0FBRXBELE9BQU8sTUFBTUMsYUFBYTtJQUN4QiwwREFBMEQsR0FDMURDLE9BQU8sS0FBSztJQUNaLG1EQUFtRCxHQUNuREMsU0FBUyxLQUFLO0lBQ2QscUNBQXFDLEdBQ3JDQyxhQUFhLEtBQUs7SUFDbEIsdURBQXVELEdBQ3ZEQyxtQkFBbUIsS0FBSztJQUN4QixpREFBaUQsR0FDakRDLHNCQUFzQixLQUFLO0lBQzNCLDBEQUEwRCxHQUMxREMsa0JBQWtCLEtBQUs7QUFDekIsRUFBQztBQUVELE9BQU8sTUFBTUMsb0JBQW9CUjtJQUMvQlMsWUFBWUMsZ0JBQXNDLENBQUU7UUFDbEQsS0FBSztRQUVMLElBQUksT0FBT0EscUJBQXFCLFVBQVUsSUFBSSxDQUFDQyxRQUFRLEdBQUdEO2FBQ3JEO1lBQ0gsTUFBTUUsT0FBT0Y7WUFFYixJQUFJRSxLQUFLVixLQUFLLEVBQUUsSUFBSSxDQUFDVyxHQUFHLENBQUNaLFdBQVdDLEtBQUs7WUFDekMsSUFBSVUsS0FBS1QsT0FBTyxFQUFFLElBQUksQ0FBQ1UsR0FBRyxDQUFDWixXQUFXRSxPQUFPO1lBQzdDLElBQUlTLEtBQUtSLFdBQVcsRUFBRSxJQUFJLENBQUNTLEdBQUcsQ0FBQ1osV0FBV0csV0FBVztZQUNyRCxJQUFJUSxLQUFLRSxJQUFJLEVBQUVDLHVCQUF1QixNQUFNLElBQUksQ0FBQ0YsR0FBRyxDQUFDWixXQUFXSSxpQkFBaUI7WUFDakYsSUFBSU8sS0FBS0UsSUFBSSxFQUFFRSwyQkFBMkIsTUFBTSxJQUFJLENBQUNILEdBQUcsQ0FBQ1osV0FBV0ssb0JBQW9CO1lBQ3hGLElBQUlNLEtBQUtFLElBQUksRUFBRUcsc0JBQXNCLE1BQU0sSUFBSSxDQUFDSixHQUFHLENBQUNaLFdBQVdNLGdCQUFnQjtRQUNqRjtJQUNGO0lBRUEsMERBQTBELEdBQzFELElBQUlMLFFBQWlCO1FBQ25CLE9BQU8sSUFBSSxDQUFDZ0IsR0FBRyxDQUFDO0lBQ2xCO0lBRUEsbURBQW1ELEdBQ25ELElBQUlmLFVBQW1CO1FBQ3JCLE9BQU8sSUFBSSxDQUFDZSxHQUFHLENBQUM7SUFDbEI7SUFFQSxxQ0FBcUMsR0FDckMsSUFBSWQsY0FBdUI7UUFDekIsT0FBTyxJQUFJLENBQUNjLEdBQUcsQ0FBQztJQUNsQjtJQUVBLHVEQUF1RCxHQUN2RCxJQUFJYixvQkFBNkI7UUFDL0IsT0FBTyxJQUFJLENBQUNhLEdBQUcsQ0FBQztJQUNsQjtJQUVBLGlEQUFpRCxHQUNqRCxJQUFJWix1QkFBZ0M7UUFDbEMsT0FBTyxJQUFJLENBQUNZLEdBQUcsQ0FBQztJQUNsQjtJQUVBLDJDQUEyQyxHQUMzQyxJQUFJWCxtQkFBNEI7UUFDOUIsT0FBTyxJQUFJLENBQUNXLEdBQUcsQ0FBQztJQUNsQjtJQUVBLHdEQUF3RCxHQUN4REEsSUFBSUMsV0FBOEMsRUFBVztRQUMzRCxJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsY0FBYyxPQUFPLEtBQUssQ0FBQ0csU0FBU3JCLFVBQVUsQ0FBQ2tCLFlBQVk7UUFFOUUsT0FBTyxLQUFLLENBQUNHLFNBQVNILFlBQVlJLE1BQU0sQ0FBQyxDQUFDQyxHQUFHQyxJQUFPRCxLQUFLdkIsVUFBVSxDQUFDd0IsRUFBRSxFQUFHO0lBQzNFO0lBRUEsaUZBQWlGLEdBQ2pGQyxPQUF3QztRQUN0QyxNQUFNQyxPQUFnQyxDQUFDO1FBQ3ZDLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQzlCLFlBQWE7WUFDckQwQixJQUFJLENBQUNDLElBQUksR0FBRyxLQUFLLENBQUNOLFNBQVNPO1FBQzdCO1FBRUEsT0FBT0Y7SUFDVDtBQUNGIn0=