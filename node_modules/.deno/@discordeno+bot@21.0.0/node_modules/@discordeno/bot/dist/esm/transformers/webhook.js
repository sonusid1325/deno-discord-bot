import { iconHashToBigInt } from '../index.js';
export function transformWebhook(bot, payload) {
    const props = bot.transformers.desiredProperties.webhook;
    const webhook = {};
    if (props.id && payload.id) webhook.id = bot.transformers.snowflake(payload.id);
    if (props.type && payload.type) webhook.type = payload.type;
    if (props.guildId && payload.guild_id) webhook.guildId = bot.transformers.snowflake(payload.guild_id);
    if (props.channelId && payload.channel_id) webhook.channelId = bot.transformers.snowflake(payload.channel_id);
    if (props.user && payload.user) webhook.user = bot.transformers.user(bot, payload.user);
    if (props.name && payload.name) webhook.name = payload.name;
    if (props.avatar && payload.avatar) webhook.avatar = iconHashToBigInt(payload.avatar);
    if (props.token && payload.token) webhook.token = payload.token;
    if (props.applicationId && payload.application_id) webhook.applicationId = bot.transformers.snowflake(payload.application_id);
    if (props.sourceGuild && payload.source_guild) webhook.sourceGuild = {
        id: bot.transformers.snowflake(payload.source_guild.id),
        name: payload.source_guild.name,
        icon: payload.source_guild.icon ? iconHashToBigInt(payload.source_guild.icon) : undefined
    };
    if (props.sourceChannel && payload.source_channel) webhook.sourceChannel = {
        id: bot.transformers.snowflake(payload.source_channel.id),
        name: payload.source_channel.name ?? ''
    };
    if (props.url && payload.url) webhook.url = payload.url;
    return bot.transformers.customizers.webhook(bot, payload, webhook);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvd2ViaG9vay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERpc2NvcmRXZWJob29rIH0gZnJvbSAnQGRpc2NvcmRlbm8vdHlwZXMnXG5pbXBvcnQgeyB0eXBlIEludGVybmFsQm90LCB0eXBlIFdlYmhvb2ssIGljb25IYXNoVG9CaWdJbnQgfSBmcm9tICcuLi9pbmRleC5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVdlYmhvb2soYm90OiBJbnRlcm5hbEJvdCwgcGF5bG9hZDogRGlzY29yZFdlYmhvb2spOiB0eXBlb2YgYm90LnRyYW5zZm9ybWVycy4kaW5mZXJyZWRUeXBlcy53ZWJob29rIHtcbiAgY29uc3QgcHJvcHMgPSBib3QudHJhbnNmb3JtZXJzLmRlc2lyZWRQcm9wZXJ0aWVzLndlYmhvb2tcbiAgY29uc3Qgd2ViaG9vayA9IHt9IGFzIFdlYmhvb2tcblxuICBpZiAocHJvcHMuaWQgJiYgcGF5bG9hZC5pZCkgd2ViaG9vay5pZCA9IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQuaWQpXG4gIGlmIChwcm9wcy50eXBlICYmIHBheWxvYWQudHlwZSkgd2ViaG9vay50eXBlID0gcGF5bG9hZC50eXBlXG4gIGlmIChwcm9wcy5ndWlsZElkICYmIHBheWxvYWQuZ3VpbGRfaWQpIHdlYmhvb2suZ3VpbGRJZCA9IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQuZ3VpbGRfaWQpXG4gIGlmIChwcm9wcy5jaGFubmVsSWQgJiYgcGF5bG9hZC5jaGFubmVsX2lkKSB3ZWJob29rLmNoYW5uZWxJZCA9IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQuY2hhbm5lbF9pZClcbiAgaWYgKHByb3BzLnVzZXIgJiYgcGF5bG9hZC51c2VyKSB3ZWJob29rLnVzZXIgPSBib3QudHJhbnNmb3JtZXJzLnVzZXIoYm90LCBwYXlsb2FkLnVzZXIpXG4gIGlmIChwcm9wcy5uYW1lICYmIHBheWxvYWQubmFtZSkgd2ViaG9vay5uYW1lID0gcGF5bG9hZC5uYW1lXG4gIGlmIChwcm9wcy5hdmF0YXIgJiYgcGF5bG9hZC5hdmF0YXIpIHdlYmhvb2suYXZhdGFyID0gaWNvbkhhc2hUb0JpZ0ludChwYXlsb2FkLmF2YXRhcilcbiAgaWYgKHByb3BzLnRva2VuICYmIHBheWxvYWQudG9rZW4pIHdlYmhvb2sudG9rZW4gPSBwYXlsb2FkLnRva2VuXG4gIGlmIChwcm9wcy5hcHBsaWNhdGlvbklkICYmIHBheWxvYWQuYXBwbGljYXRpb25faWQpIHdlYmhvb2suYXBwbGljYXRpb25JZCA9IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQuYXBwbGljYXRpb25faWQpXG4gIGlmIChwcm9wcy5zb3VyY2VHdWlsZCAmJiBwYXlsb2FkLnNvdXJjZV9ndWlsZClcbiAgICB3ZWJob29rLnNvdXJjZUd1aWxkID0ge1xuICAgICAgaWQ6IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQuc291cmNlX2d1aWxkLmlkISksXG4gICAgICBuYW1lOiBwYXlsb2FkLnNvdXJjZV9ndWlsZC5uYW1lISxcbiAgICAgIGljb246IHBheWxvYWQuc291cmNlX2d1aWxkLmljb24gPyBpY29uSGFzaFRvQmlnSW50KHBheWxvYWQuc291cmNlX2d1aWxkLmljb24pIDogdW5kZWZpbmVkLFxuICAgIH1cbiAgaWYgKHByb3BzLnNvdXJjZUNoYW5uZWwgJiYgcGF5bG9hZC5zb3VyY2VfY2hhbm5lbClcbiAgICB3ZWJob29rLnNvdXJjZUNoYW5uZWwgPSB7XG4gICAgICBpZDogYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5zb3VyY2VfY2hhbm5lbC5pZCEpLFxuICAgICAgbmFtZTogcGF5bG9hZC5zb3VyY2VfY2hhbm5lbC5uYW1lID8/ICcnLFxuICAgIH1cbiAgaWYgKHByb3BzLnVybCAmJiBwYXlsb2FkLnVybCkgd2ViaG9vay51cmwgPSBwYXlsb2FkLnVybFxuXG4gIHJldHVybiBib3QudHJhbnNmb3JtZXJzLmN1c3RvbWl6ZXJzLndlYmhvb2soYm90LCBwYXlsb2FkLCB3ZWJob29rKVxufVxuIl0sIm5hbWVzIjpbImljb25IYXNoVG9CaWdJbnQiLCJ0cmFuc2Zvcm1XZWJob29rIiwiYm90IiwicGF5bG9hZCIsInByb3BzIiwidHJhbnNmb3JtZXJzIiwiZGVzaXJlZFByb3BlcnRpZXMiLCJ3ZWJob29rIiwiaWQiLCJzbm93Zmxha2UiLCJ0eXBlIiwiZ3VpbGRJZCIsImd1aWxkX2lkIiwiY2hhbm5lbElkIiwiY2hhbm5lbF9pZCIsInVzZXIiLCJuYW1lIiwiYXZhdGFyIiwidG9rZW4iLCJhcHBsaWNhdGlvbklkIiwiYXBwbGljYXRpb25faWQiLCJzb3VyY2VHdWlsZCIsInNvdXJjZV9ndWlsZCIsImljb24iLCJ1bmRlZmluZWQiLCJzb3VyY2VDaGFubmVsIiwic291cmNlX2NoYW5uZWwiLCJ1cmwiLCJjdXN0b21pemVycyJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBeUNBLGdCQUFnQixRQUFRLGNBQWE7QUFFOUUsT0FBTyxTQUFTQyxpQkFBaUJDLEdBQWdCLEVBQUVDLE9BQXVCO0lBQ3hFLE1BQU1DLFFBQVFGLElBQUlHLFlBQVksQ0FBQ0MsaUJBQWlCLENBQUNDLE9BQU87SUFDeEQsTUFBTUEsVUFBVSxDQUFDO0lBRWpCLElBQUlILE1BQU1JLEVBQUUsSUFBSUwsUUFBUUssRUFBRSxFQUFFRCxRQUFRQyxFQUFFLEdBQUdOLElBQUlHLFlBQVksQ0FBQ0ksU0FBUyxDQUFDTixRQUFRSyxFQUFFO0lBQzlFLElBQUlKLE1BQU1NLElBQUksSUFBSVAsUUFBUU8sSUFBSSxFQUFFSCxRQUFRRyxJQUFJLEdBQUdQLFFBQVFPLElBQUk7SUFDM0QsSUFBSU4sTUFBTU8sT0FBTyxJQUFJUixRQUFRUyxRQUFRLEVBQUVMLFFBQVFJLE9BQU8sR0FBR1QsSUFBSUcsWUFBWSxDQUFDSSxTQUFTLENBQUNOLFFBQVFTLFFBQVE7SUFDcEcsSUFBSVIsTUFBTVMsU0FBUyxJQUFJVixRQUFRVyxVQUFVLEVBQUVQLFFBQVFNLFNBQVMsR0FBR1gsSUFBSUcsWUFBWSxDQUFDSSxTQUFTLENBQUNOLFFBQVFXLFVBQVU7SUFDNUcsSUFBSVYsTUFBTVcsSUFBSSxJQUFJWixRQUFRWSxJQUFJLEVBQUVSLFFBQVFRLElBQUksR0FBR2IsSUFBSUcsWUFBWSxDQUFDVSxJQUFJLENBQUNiLEtBQUtDLFFBQVFZLElBQUk7SUFDdEYsSUFBSVgsTUFBTVksSUFBSSxJQUFJYixRQUFRYSxJQUFJLEVBQUVULFFBQVFTLElBQUksR0FBR2IsUUFBUWEsSUFBSTtJQUMzRCxJQUFJWixNQUFNYSxNQUFNLElBQUlkLFFBQVFjLE1BQU0sRUFBRVYsUUFBUVUsTUFBTSxHQUFHakIsaUJBQWlCRyxRQUFRYyxNQUFNO0lBQ3BGLElBQUliLE1BQU1jLEtBQUssSUFBSWYsUUFBUWUsS0FBSyxFQUFFWCxRQUFRVyxLQUFLLEdBQUdmLFFBQVFlLEtBQUs7SUFDL0QsSUFBSWQsTUFBTWUsYUFBYSxJQUFJaEIsUUFBUWlCLGNBQWMsRUFBRWIsUUFBUVksYUFBYSxHQUFHakIsSUFBSUcsWUFBWSxDQUFDSSxTQUFTLENBQUNOLFFBQVFpQixjQUFjO0lBQzVILElBQUloQixNQUFNaUIsV0FBVyxJQUFJbEIsUUFBUW1CLFlBQVksRUFDM0NmLFFBQVFjLFdBQVcsR0FBRztRQUNwQmIsSUFBSU4sSUFBSUcsWUFBWSxDQUFDSSxTQUFTLENBQUNOLFFBQVFtQixZQUFZLENBQUNkLEVBQUU7UUFDdERRLE1BQU1iLFFBQVFtQixZQUFZLENBQUNOLElBQUk7UUFDL0JPLE1BQU1wQixRQUFRbUIsWUFBWSxDQUFDQyxJQUFJLEdBQUd2QixpQkFBaUJHLFFBQVFtQixZQUFZLENBQUNDLElBQUksSUFBSUM7SUFDbEY7SUFDRixJQUFJcEIsTUFBTXFCLGFBQWEsSUFBSXRCLFFBQVF1QixjQUFjLEVBQy9DbkIsUUFBUWtCLGFBQWEsR0FBRztRQUN0QmpCLElBQUlOLElBQUlHLFlBQVksQ0FBQ0ksU0FBUyxDQUFDTixRQUFRdUIsY0FBYyxDQUFDbEIsRUFBRTtRQUN4RFEsTUFBTWIsUUFBUXVCLGNBQWMsQ0FBQ1YsSUFBSSxJQUFJO0lBQ3ZDO0lBQ0YsSUFBSVosTUFBTXVCLEdBQUcsSUFBSXhCLFFBQVF3QixHQUFHLEVBQUVwQixRQUFRb0IsR0FBRyxHQUFHeEIsUUFBUXdCLEdBQUc7SUFFdkQsT0FBT3pCLElBQUlHLFlBQVksQ0FBQ3VCLFdBQVcsQ0FBQ3JCLE9BQU8sQ0FBQ0wsS0FBS0MsU0FBU0k7QUFDNUQifQ==