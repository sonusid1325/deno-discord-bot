import { EmojiToggles } from './toggles/emoji.js';
export const baseEmoji = {
    // This allows typescript to still check for type errors on functions below
    ...undefined,
    get animated () {
        return this.toggles?.animated;
    },
    get requireColons () {
        return this.toggles?.requireColons;
    },
    get managed () {
        return this.toggles?.managed;
    },
    get available () {
        return this.toggles.available;
    }
};
export function transformEmoji(bot, payload) {
    const props = bot.transformers.desiredProperties.emoji;
    const emoji = Object.create(baseEmoji);
    if (props.id && payload.id) emoji.id = bot.transformers.snowflake(payload.id);
    if (props.name && payload.name) emoji.name = payload.name;
    if (props.roles && payload.roles) emoji.roles = payload.roles.map((id)=>bot.transformers.snowflake(id));
    if (props.user && payload.user) emoji.user = bot.transformers.user(bot, payload.user);
    emoji.toggles = new EmojiToggles(payload);
    return bot.transformers.customizers.emoji(bot, payload, emoji);
}
export function transformDefaultReactionEmoji(bot, payload) {
    const props = bot.transformers.desiredProperties.defaultReactionEmoji;
    const defaultReactionEmoji = {};
    if (props.emojiId && payload.emoji_id) defaultReactionEmoji.emojiId = bot.transformers.snowflake(payload.emoji_id);
    if (props.emojiName && payload.emoji_name) defaultReactionEmoji.emojiName = payload.emoji_name;
    return bot.transformers.customizers.defaultReactionEmoji(bot, payload, defaultReactionEmoji);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvZW1vamkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEaXNjb3JkRGVmYXVsdFJlYWN0aW9uRW1vamksIERpc2NvcmRFbW9qaSB9IGZyb20gJ0BkaXNjb3JkZW5vL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBEZWZhdWx0UmVhY3Rpb25FbW9qaSwgRW1vamksIEludGVybmFsQm90IH0gZnJvbSAnLi4vaW5kZXguanMnXG5pbXBvcnQgeyBFbW9qaVRvZ2dsZXMgfSBmcm9tICcuL3RvZ2dsZXMvZW1vamkuanMnXG5cbmV4cG9ydCBjb25zdCBiYXNlRW1vamk6IEludGVybmFsQm90Wyd0cmFuc2Zvcm1lcnMnXVsnJGluZmVycmVkVHlwZXMnXVsnZW1vamknXSA9IHtcbiAgLy8gVGhpcyBhbGxvd3MgdHlwZXNjcmlwdCB0byBzdGlsbCBjaGVjayBmb3IgdHlwZSBlcnJvcnMgb24gZnVuY3Rpb25zIGJlbG93XG4gIC4uLih1bmRlZmluZWQgYXMgdW5rbm93biBhcyBJbnRlcm5hbEJvdFsndHJhbnNmb3JtZXJzJ11bJyRpbmZlcnJlZFR5cGVzJ11bJ2Vtb2ppJ10pLFxuXG4gIGdldCBhbmltYXRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVzPy5hbmltYXRlZFxuICB9LFxuICBnZXQgcmVxdWlyZUNvbG9ucygpIHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVzPy5yZXF1aXJlQ29sb25zXG4gIH0sXG4gIGdldCBtYW5hZ2VkKCkge1xuICAgIHJldHVybiB0aGlzLnRvZ2dsZXM/Lm1hbmFnZWRcbiAgfSxcbiAgZ2V0IGF2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy50b2dnbGVzLmF2YWlsYWJsZVxuICB9LFxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtRW1vamkoYm90OiBJbnRlcm5hbEJvdCwgcGF5bG9hZDogRGlzY29yZEVtb2ppKTogdHlwZW9mIGJvdC50cmFuc2Zvcm1lcnMuJGluZmVycmVkVHlwZXMuZW1vamkge1xuICBjb25zdCBwcm9wcyA9IGJvdC50cmFuc2Zvcm1lcnMuZGVzaXJlZFByb3BlcnRpZXMuZW1vamlcbiAgY29uc3QgZW1vamkgPSBPYmplY3QuY3JlYXRlKGJhc2VFbW9qaSkgYXMgRW1vamlcblxuICBpZiAocHJvcHMuaWQgJiYgcGF5bG9hZC5pZCkgZW1vamkuaWQgPSBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLmlkKVxuICBpZiAocHJvcHMubmFtZSAmJiBwYXlsb2FkLm5hbWUpIGVtb2ppLm5hbWUgPSBwYXlsb2FkLm5hbWVcbiAgaWYgKHByb3BzLnJvbGVzICYmIHBheWxvYWQucm9sZXMpIGVtb2ppLnJvbGVzID0gcGF5bG9hZC5yb2xlcy5tYXAoKGlkKSA9PiBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShpZCkpXG4gIGlmIChwcm9wcy51c2VyICYmIHBheWxvYWQudXNlcikgZW1vamkudXNlciA9IGJvdC50cmFuc2Zvcm1lcnMudXNlcihib3QsIHBheWxvYWQudXNlcilcblxuICBlbW9qaS50b2dnbGVzID0gbmV3IEVtb2ppVG9nZ2xlcyhwYXlsb2FkKVxuXG4gIHJldHVybiBib3QudHJhbnNmb3JtZXJzLmN1c3RvbWl6ZXJzLmVtb2ppKGJvdCwgcGF5bG9hZCwgZW1vamkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1EZWZhdWx0UmVhY3Rpb25FbW9qaShcbiAgYm90OiBJbnRlcm5hbEJvdCxcbiAgcGF5bG9hZDogRGlzY29yZERlZmF1bHRSZWFjdGlvbkVtb2ppLFxuKTogdHlwZW9mIGJvdC50cmFuc2Zvcm1lcnMuJGluZmVycmVkVHlwZXMuZGVmYXVsdFJlYWN0aW9uRW1vamkge1xuICBjb25zdCBwcm9wcyA9IGJvdC50cmFuc2Zvcm1lcnMuZGVzaXJlZFByb3BlcnRpZXMuZGVmYXVsdFJlYWN0aW9uRW1vamlcbiAgY29uc3QgZGVmYXVsdFJlYWN0aW9uRW1vamkgPSB7fSBhcyBEZWZhdWx0UmVhY3Rpb25FbW9qaVxuXG4gIGlmIChwcm9wcy5lbW9qaUlkICYmIHBheWxvYWQuZW1vamlfaWQpIGRlZmF1bHRSZWFjdGlvbkVtb2ppLmVtb2ppSWQgPSBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLmVtb2ppX2lkKVxuICBpZiAocHJvcHMuZW1vamlOYW1lICYmIHBheWxvYWQuZW1vamlfbmFtZSkgZGVmYXVsdFJlYWN0aW9uRW1vamkuZW1vamlOYW1lID0gcGF5bG9hZC5lbW9qaV9uYW1lXG5cbiAgcmV0dXJuIGJvdC50cmFuc2Zvcm1lcnMuY3VzdG9taXplcnMuZGVmYXVsdFJlYWN0aW9uRW1vamkoYm90LCBwYXlsb2FkLCBkZWZhdWx0UmVhY3Rpb25FbW9qaSlcbn1cbiJdLCJuYW1lcyI6WyJFbW9qaVRvZ2dsZXMiLCJiYXNlRW1vamkiLCJ1bmRlZmluZWQiLCJhbmltYXRlZCIsInRvZ2dsZXMiLCJyZXF1aXJlQ29sb25zIiwibWFuYWdlZCIsImF2YWlsYWJsZSIsInRyYW5zZm9ybUVtb2ppIiwiYm90IiwicGF5bG9hZCIsInByb3BzIiwidHJhbnNmb3JtZXJzIiwiZGVzaXJlZFByb3BlcnRpZXMiLCJlbW9qaSIsIk9iamVjdCIsImNyZWF0ZSIsImlkIiwic25vd2ZsYWtlIiwibmFtZSIsInJvbGVzIiwibWFwIiwidXNlciIsImN1c3RvbWl6ZXJzIiwidHJhbnNmb3JtRGVmYXVsdFJlYWN0aW9uRW1vamkiLCJkZWZhdWx0UmVhY3Rpb25FbW9qaSIsImVtb2ppSWQiLCJlbW9qaV9pZCIsImVtb2ppTmFtZSIsImVtb2ppX25hbWUiXSwibWFwcGluZ3MiOiJBQUVBLFNBQVNBLFlBQVksUUFBUSxxQkFBb0I7QUFFakQsT0FBTyxNQUFNQyxZQUFvRTtJQUMvRSwyRUFBMkU7SUFDM0UsR0FBSUMsU0FBUztJQUViLElBQUlDLFlBQVc7UUFDYixPQUFPLElBQUksQ0FBQ0MsT0FBTyxFQUFFRDtJQUN2QjtJQUNBLElBQUlFLGlCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQ0QsT0FBTyxFQUFFQztJQUN2QjtJQUNBLElBQUlDLFdBQVU7UUFDWixPQUFPLElBQUksQ0FBQ0YsT0FBTyxFQUFFRTtJQUN2QjtJQUNBLElBQUlDLGFBQVk7UUFDZCxPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDRyxTQUFTO0lBQy9CO0FBQ0YsRUFBQztBQUVELE9BQU8sU0FBU0MsZUFBZUMsR0FBZ0IsRUFBRUMsT0FBcUI7SUFDcEUsTUFBTUMsUUFBUUYsSUFBSUcsWUFBWSxDQUFDQyxpQkFBaUIsQ0FBQ0MsS0FBSztJQUN0RCxNQUFNQSxRQUFRQyxPQUFPQyxNQUFNLENBQUNmO0lBRTVCLElBQUlVLE1BQU1NLEVBQUUsSUFBSVAsUUFBUU8sRUFBRSxFQUFFSCxNQUFNRyxFQUFFLEdBQUdSLElBQUlHLFlBQVksQ0FBQ00sU0FBUyxDQUFDUixRQUFRTyxFQUFFO0lBQzVFLElBQUlOLE1BQU1RLElBQUksSUFBSVQsUUFBUVMsSUFBSSxFQUFFTCxNQUFNSyxJQUFJLEdBQUdULFFBQVFTLElBQUk7SUFDekQsSUFBSVIsTUFBTVMsS0FBSyxJQUFJVixRQUFRVSxLQUFLLEVBQUVOLE1BQU1NLEtBQUssR0FBR1YsUUFBUVUsS0FBSyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0osS0FBT1IsSUFBSUcsWUFBWSxDQUFDTSxTQUFTLENBQUNEO0lBQ3JHLElBQUlOLE1BQU1XLElBQUksSUFBSVosUUFBUVksSUFBSSxFQUFFUixNQUFNUSxJQUFJLEdBQUdiLElBQUlHLFlBQVksQ0FBQ1UsSUFBSSxDQUFDYixLQUFLQyxRQUFRWSxJQUFJO0lBRXBGUixNQUFNVixPQUFPLEdBQUcsSUFBSUosYUFBYVU7SUFFakMsT0FBT0QsSUFBSUcsWUFBWSxDQUFDVyxXQUFXLENBQUNULEtBQUssQ0FBQ0wsS0FBS0MsU0FBU0k7QUFDMUQ7QUFFQSxPQUFPLFNBQVNVLDhCQUNkZixHQUFnQixFQUNoQkMsT0FBb0M7SUFFcEMsTUFBTUMsUUFBUUYsSUFBSUcsWUFBWSxDQUFDQyxpQkFBaUIsQ0FBQ1ksb0JBQW9CO0lBQ3JFLE1BQU1BLHVCQUF1QixDQUFDO0lBRTlCLElBQUlkLE1BQU1lLE9BQU8sSUFBSWhCLFFBQVFpQixRQUFRLEVBQUVGLHFCQUFxQkMsT0FBTyxHQUFHakIsSUFBSUcsWUFBWSxDQUFDTSxTQUFTLENBQUNSLFFBQVFpQixRQUFRO0lBQ2pILElBQUloQixNQUFNaUIsU0FBUyxJQUFJbEIsUUFBUW1CLFVBQVUsRUFBRUoscUJBQXFCRyxTQUFTLEdBQUdsQixRQUFRbUIsVUFBVTtJQUU5RixPQUFPcEIsSUFBSUcsWUFBWSxDQUFDVyxXQUFXLENBQUNFLG9CQUFvQixDQUFDaEIsS0FBS0MsU0FBU2U7QUFDekUifQ==