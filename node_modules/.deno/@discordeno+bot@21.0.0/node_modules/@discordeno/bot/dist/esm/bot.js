import { ShardSocketCloseCodes, createGatewayManager } from '@discordeno/gateway';
import { createRestManager } from '@discordeno/rest';
import { createLogger, getBotIdFromToken } from '@discordeno/utils';
import { createBotGatewayHandlers } from './handlers.js';
import { createBotHelpers } from './helpers.js';
import { createTransformers } from './transformers.js';
export function createBot(options) {
    if (!options.transformers) options.transformers = {};
    if (!options.transformers.desiredProperties) options.transformers.desiredProperties = options.desiredProperties;
    if (!options.rest) options.rest = {
        token: options.token,
        applicationId: options.applicationId
    };
    if (!options.rest.token) options.rest.token = options.token;
    if (!options.rest.logger && options.loggerFactory) options.rest.logger = options.loggerFactory('REST');
    if (!options.gateway) options.gateway = {
        token: options.token
    };
    if (!options.gateway.token) options.gateway.token = options.token;
    if (!options.gateway.events) options.gateway.events = {};
    if (!options.gateway.logger && options.loggerFactory) options.gateway.logger = options.loggerFactory('GATEWAY');
    if (!options.gateway.events.message) {
        options.gateway.events.message = async (shard, data)=>{
            // TRIGGER RAW EVENT
            bot.events.raw?.(data, shard.id);
            if (!data.t) return;
            // RUN DISPATCH CHECK
            await bot.events.dispatchRequirements?.(data, shard.id);
            bot.handlers[data.t]?.(bot, data, shard.id);
        };
    }
    options.gateway.intents = options.intents;
    options.gateway.preferSnakeCase = true;
    const id = getBotIdFromToken(options.token);
    const bot = {
        id,
        applicationId: id,
        transformers: createTransformers(options.transformers),
        handlers: createBotGatewayHandlers(options.handlers ?? {}),
        rest: createRestManager(options.rest),
        gateway: createGatewayManager(options.gateway),
        events: options.events ?? {},
        logger: options.loggerFactory ? options.loggerFactory('BOT') : createLogger({
            name: 'BOT'
        }),
        // Set up helpers below.
        helpers: {},
        async start () {
            if (!options.gateway?.connection) {
                bot.gateway.connection = await bot.rest.getSessionInfo();
                // Check for overrides in the configuration
                if (!options.gateway?.url) bot.gateway.url = bot.gateway.connection.url;
                if (!options.gateway?.totalShards) bot.gateway.totalShards = bot.gateway.connection.shards;
                if (!options.gateway?.lastShardId && !options.gateway?.totalShards) bot.gateway.lastShardId = bot.gateway.connection.shards - 1;
            }
            if (!bot.gateway.resharding.getSessionInfo) {
                bot.gateway.resharding.getSessionInfo = async ()=>{
                    return await bot.rest.getGatewayBot();
                };
            }
            await bot.gateway.spawnShards();
        },
        async shutdown () {
            return await bot.gateway.shutdown(ShardSocketCloseCodes.Shutdown, 'User requested bot stop');
        }
    };
    bot.helpers = createBotHelpers(bot);
    if (options.applicationId) bot.applicationId = bot.transformers.snowflake(options.applicationId);
    return bot;
}

//# sourceMappingURL=data:application/json;base64,