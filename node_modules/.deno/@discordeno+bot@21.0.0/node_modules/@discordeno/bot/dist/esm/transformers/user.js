import { iconHashToBigInt } from '@discordeno/utils';
import { ToggleBitfield, UserToggles } from '../index.js';
export const baseUser = {
    // This allows typescript to still check for type errors on functions below
    ...undefined,
    get tag () {
        return `${this.username}#${this.discriminator}`;
    },
    get bot () {
        return !!this.toggles?.has('bot');
    },
    get system () {
        return !!this.toggles?.has('system');
    },
    get mfaEnabled () {
        return !!this.toggles?.has('mfaEnabled');
    },
    get verified () {
        return !!this.toggles?.has('verified');
    }
};
export function transformUser(bot, payload) {
    const user = Object.create(baseUser);
    const props = bot.transformers.desiredProperties.user;
    if (props.toggles) user.toggles = new UserToggles(payload);
    if (props.flags) user.flags = new ToggleBitfield(payload.flags);
    if (props.publicFlags) user.publicFlags = new ToggleBitfield(payload.public_flags);
    if (props.id && payload.id) user.id = bot.transformers.snowflake(payload.id);
    if (props.username && payload.username) user.username = payload.username;
    if (props.globalName && payload.global_name) user.globalName = payload.global_name;
    if (props.discriminator && payload.discriminator) user.discriminator = payload.discriminator;
    if (props.locale && payload.locale) user.locale = payload.locale;
    if (props.email && payload.email) user.email = payload.email;
    if (props.premiumType && payload.premium_type) user.premiumType = payload.premium_type;
    if (props.avatar && payload.avatar) user.avatar = iconHashToBigInt(payload.avatar);
    if (props.banner && payload.banner) user.banner = iconHashToBigInt(payload.banner);
    if (props.accentColor && payload.accent_color) user.accentColor = payload.accent_color;
    if (props.avatarDecorationData && payload.avatar_decoration_data) user.avatarDecorationData = bot.transformers.avatarDecorationData(bot, payload.avatar_decoration_data);
    return bot.transformers.customizers.user(bot, payload, user);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1lcnMvdXNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERpc2NvcmRVc2VyIH0gZnJvbSAnQGRpc2NvcmRlbm8vdHlwZXMnXG5pbXBvcnQgeyBpY29uSGFzaFRvQmlnSW50IH0gZnJvbSAnQGRpc2NvcmRlbm8vdXRpbHMnXG5pbXBvcnQgeyB0eXBlIEludGVybmFsQm90LCBUb2dnbGVCaXRmaWVsZCwgdHlwZSBVc2VyLCBVc2VyVG9nZ2xlcyB9IGZyb20gJy4uL2luZGV4LmpzJ1xuXG5leHBvcnQgY29uc3QgYmFzZVVzZXI6IEludGVybmFsQm90Wyd0cmFuc2Zvcm1lcnMnXVsnJGluZmVycmVkVHlwZXMnXVsndXNlciddID0ge1xuICAvLyBUaGlzIGFsbG93cyB0eXBlc2NyaXB0IHRvIHN0aWxsIGNoZWNrIGZvciB0eXBlIGVycm9ycyBvbiBmdW5jdGlvbnMgYmVsb3dcbiAgLi4uKHVuZGVmaW5lZCBhcyB1bmtub3duIGFzIEludGVybmFsQm90Wyd0cmFuc2Zvcm1lcnMnXVsnJGluZmVycmVkVHlwZXMnXVsndXNlciddKSxcblxuICBnZXQgdGFnKCkge1xuICAgIHJldHVybiBgJHt0aGlzLnVzZXJuYW1lfSMke3RoaXMuZGlzY3JpbWluYXRvcn1gXG4gIH0sXG4gIGdldCBib3QoKSB7XG4gICAgcmV0dXJuICEhdGhpcy50b2dnbGVzPy5oYXMoJ2JvdCcpXG4gIH0sXG4gIGdldCBzeXN0ZW0oKSB7XG4gICAgcmV0dXJuICEhdGhpcy50b2dnbGVzPy5oYXMoJ3N5c3RlbScpXG4gIH0sXG4gIGdldCBtZmFFbmFibGVkKCkge1xuICAgIHJldHVybiAhIXRoaXMudG9nZ2xlcz8uaGFzKCdtZmFFbmFibGVkJylcbiAgfSxcbiAgZ2V0IHZlcmlmaWVkKCkge1xuICAgIHJldHVybiAhIXRoaXMudG9nZ2xlcz8uaGFzKCd2ZXJpZmllZCcpXG4gIH0sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1Vc2VyKGJvdDogSW50ZXJuYWxCb3QsIHBheWxvYWQ6IERpc2NvcmRVc2VyKTogdHlwZW9mIGJvdC50cmFuc2Zvcm1lcnMuJGluZmVycmVkVHlwZXMudXNlciB7XG4gIGNvbnN0IHVzZXI6IFVzZXIgPSBPYmplY3QuY3JlYXRlKGJhc2VVc2VyKVxuICBjb25zdCBwcm9wcyA9IGJvdC50cmFuc2Zvcm1lcnMuZGVzaXJlZFByb3BlcnRpZXMudXNlclxuXG4gIGlmIChwcm9wcy50b2dnbGVzKSB1c2VyLnRvZ2dsZXMgPSBuZXcgVXNlclRvZ2dsZXMocGF5bG9hZClcbiAgaWYgKHByb3BzLmZsYWdzKSB1c2VyLmZsYWdzID0gbmV3IFRvZ2dsZUJpdGZpZWxkKHBheWxvYWQuZmxhZ3MpXG4gIGlmIChwcm9wcy5wdWJsaWNGbGFncykgdXNlci5wdWJsaWNGbGFncyA9IG5ldyBUb2dnbGVCaXRmaWVsZChwYXlsb2FkLnB1YmxpY19mbGFncylcbiAgaWYgKHByb3BzLmlkICYmIHBheWxvYWQuaWQpIHVzZXIuaWQgPSBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLmlkKVxuICBpZiAocHJvcHMudXNlcm5hbWUgJiYgcGF5bG9hZC51c2VybmFtZSkgdXNlci51c2VybmFtZSA9IHBheWxvYWQudXNlcm5hbWVcbiAgaWYgKHByb3BzLmdsb2JhbE5hbWUgJiYgcGF5bG9hZC5nbG9iYWxfbmFtZSkgdXNlci5nbG9iYWxOYW1lID0gcGF5bG9hZC5nbG9iYWxfbmFtZVxuICBpZiAocHJvcHMuZGlzY3JpbWluYXRvciAmJiBwYXlsb2FkLmRpc2NyaW1pbmF0b3IpIHVzZXIuZGlzY3JpbWluYXRvciA9IHBheWxvYWQuZGlzY3JpbWluYXRvclxuICBpZiAocHJvcHMubG9jYWxlICYmIHBheWxvYWQubG9jYWxlKSB1c2VyLmxvY2FsZSA9IHBheWxvYWQubG9jYWxlXG4gIGlmIChwcm9wcy5lbWFpbCAmJiBwYXlsb2FkLmVtYWlsKSB1c2VyLmVtYWlsID0gcGF5bG9hZC5lbWFpbFxuICBpZiAocHJvcHMucHJlbWl1bVR5cGUgJiYgcGF5bG9hZC5wcmVtaXVtX3R5cGUpIHVzZXIucHJlbWl1bVR5cGUgPSBwYXlsb2FkLnByZW1pdW1fdHlwZVxuICBpZiAocHJvcHMuYXZhdGFyICYmIHBheWxvYWQuYXZhdGFyKSB1c2VyLmF2YXRhciA9IGljb25IYXNoVG9CaWdJbnQocGF5bG9hZC5hdmF0YXIpXG4gIGlmIChwcm9wcy5iYW5uZXIgJiYgcGF5bG9hZC5iYW5uZXIpIHVzZXIuYmFubmVyID0gaWNvbkhhc2hUb0JpZ0ludChwYXlsb2FkLmJhbm5lcilcbiAgaWYgKHByb3BzLmFjY2VudENvbG9yICYmIHBheWxvYWQuYWNjZW50X2NvbG9yKSB1c2VyLmFjY2VudENvbG9yID0gcGF5bG9hZC5hY2NlbnRfY29sb3JcbiAgaWYgKHByb3BzLmF2YXRhckRlY29yYXRpb25EYXRhICYmIHBheWxvYWQuYXZhdGFyX2RlY29yYXRpb25fZGF0YSlcbiAgICB1c2VyLmF2YXRhckRlY29yYXRpb25EYXRhID0gYm90LnRyYW5zZm9ybWVycy5hdmF0YXJEZWNvcmF0aW9uRGF0YShib3QsIHBheWxvYWQuYXZhdGFyX2RlY29yYXRpb25fZGF0YSlcblxuICByZXR1cm4gYm90LnRyYW5zZm9ybWVycy5jdXN0b21pemVycy51c2VyKGJvdCwgcGF5bG9hZCwgdXNlcilcbn1cbiJdLCJuYW1lcyI6WyJpY29uSGFzaFRvQmlnSW50IiwiVG9nZ2xlQml0ZmllbGQiLCJVc2VyVG9nZ2xlcyIsImJhc2VVc2VyIiwidW5kZWZpbmVkIiwidGFnIiwidXNlcm5hbWUiLCJkaXNjcmltaW5hdG9yIiwiYm90IiwidG9nZ2xlcyIsImhhcyIsInN5c3RlbSIsIm1mYUVuYWJsZWQiLCJ2ZXJpZmllZCIsInRyYW5zZm9ybVVzZXIiLCJwYXlsb2FkIiwidXNlciIsIk9iamVjdCIsImNyZWF0ZSIsInByb3BzIiwidHJhbnNmb3JtZXJzIiwiZGVzaXJlZFByb3BlcnRpZXMiLCJmbGFncyIsInB1YmxpY0ZsYWdzIiwicHVibGljX2ZsYWdzIiwiaWQiLCJzbm93Zmxha2UiLCJnbG9iYWxOYW1lIiwiZ2xvYmFsX25hbWUiLCJsb2NhbGUiLCJlbWFpbCIsInByZW1pdW1UeXBlIiwicHJlbWl1bV90eXBlIiwiYXZhdGFyIiwiYmFubmVyIiwiYWNjZW50Q29sb3IiLCJhY2NlbnRfY29sb3IiLCJhdmF0YXJEZWNvcmF0aW9uRGF0YSIsImF2YXRhcl9kZWNvcmF0aW9uX2RhdGEiLCJjdXN0b21pemVycyJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBU0EsZ0JBQWdCLFFBQVEsb0JBQW1CO0FBQ3BELFNBQTJCQyxjQUFjLEVBQWFDLFdBQVcsUUFBUSxjQUFhO0FBRXRGLE9BQU8sTUFBTUMsV0FBa0U7SUFDN0UsMkVBQTJFO0lBQzNFLEdBQUlDLFNBQVM7SUFFYixJQUFJQyxPQUFNO1FBQ1IsT0FBTyxHQUFHLElBQUksQ0FBQ0MsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNDLGFBQWEsRUFBRTtJQUNqRDtJQUNBLElBQUlDLE9BQU07UUFDUixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNDLE9BQU8sRUFBRUMsSUFBSTtJQUM3QjtJQUNBLElBQUlDLFVBQVM7UUFDWCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNGLE9BQU8sRUFBRUMsSUFBSTtJQUM3QjtJQUNBLElBQUlFLGNBQWE7UUFDZixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNILE9BQU8sRUFBRUMsSUFBSTtJQUM3QjtJQUNBLElBQUlHLFlBQVc7UUFDYixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNKLE9BQU8sRUFBRUMsSUFBSTtJQUM3QjtBQUNGLEVBQUM7QUFFRCxPQUFPLFNBQVNJLGNBQWNOLEdBQWdCLEVBQUVPLE9BQW9CO0lBQ2xFLE1BQU1DLE9BQWFDLE9BQU9DLE1BQU0sQ0FBQ2Y7SUFDakMsTUFBTWdCLFFBQVFYLElBQUlZLFlBQVksQ0FBQ0MsaUJBQWlCLENBQUNMLElBQUk7SUFFckQsSUFBSUcsTUFBTVYsT0FBTyxFQUFFTyxLQUFLUCxPQUFPLEdBQUcsSUFBSVAsWUFBWWE7SUFDbEQsSUFBSUksTUFBTUcsS0FBSyxFQUFFTixLQUFLTSxLQUFLLEdBQUcsSUFBSXJCLGVBQWVjLFFBQVFPLEtBQUs7SUFDOUQsSUFBSUgsTUFBTUksV0FBVyxFQUFFUCxLQUFLTyxXQUFXLEdBQUcsSUFBSXRCLGVBQWVjLFFBQVFTLFlBQVk7SUFDakYsSUFBSUwsTUFBTU0sRUFBRSxJQUFJVixRQUFRVSxFQUFFLEVBQUVULEtBQUtTLEVBQUUsR0FBR2pCLElBQUlZLFlBQVksQ0FBQ00sU0FBUyxDQUFDWCxRQUFRVSxFQUFFO0lBQzNFLElBQUlOLE1BQU1iLFFBQVEsSUFBSVMsUUFBUVQsUUFBUSxFQUFFVSxLQUFLVixRQUFRLEdBQUdTLFFBQVFULFFBQVE7SUFDeEUsSUFBSWEsTUFBTVEsVUFBVSxJQUFJWixRQUFRYSxXQUFXLEVBQUVaLEtBQUtXLFVBQVUsR0FBR1osUUFBUWEsV0FBVztJQUNsRixJQUFJVCxNQUFNWixhQUFhLElBQUlRLFFBQVFSLGFBQWEsRUFBRVMsS0FBS1QsYUFBYSxHQUFHUSxRQUFRUixhQUFhO0lBQzVGLElBQUlZLE1BQU1VLE1BQU0sSUFBSWQsUUFBUWMsTUFBTSxFQUFFYixLQUFLYSxNQUFNLEdBQUdkLFFBQVFjLE1BQU07SUFDaEUsSUFBSVYsTUFBTVcsS0FBSyxJQUFJZixRQUFRZSxLQUFLLEVBQUVkLEtBQUtjLEtBQUssR0FBR2YsUUFBUWUsS0FBSztJQUM1RCxJQUFJWCxNQUFNWSxXQUFXLElBQUloQixRQUFRaUIsWUFBWSxFQUFFaEIsS0FBS2UsV0FBVyxHQUFHaEIsUUFBUWlCLFlBQVk7SUFDdEYsSUFBSWIsTUFBTWMsTUFBTSxJQUFJbEIsUUFBUWtCLE1BQU0sRUFBRWpCLEtBQUtpQixNQUFNLEdBQUdqQyxpQkFBaUJlLFFBQVFrQixNQUFNO0lBQ2pGLElBQUlkLE1BQU1lLE1BQU0sSUFBSW5CLFFBQVFtQixNQUFNLEVBQUVsQixLQUFLa0IsTUFBTSxHQUFHbEMsaUJBQWlCZSxRQUFRbUIsTUFBTTtJQUNqRixJQUFJZixNQUFNZ0IsV0FBVyxJQUFJcEIsUUFBUXFCLFlBQVksRUFBRXBCLEtBQUttQixXQUFXLEdBQUdwQixRQUFRcUIsWUFBWTtJQUN0RixJQUFJakIsTUFBTWtCLG9CQUFvQixJQUFJdEIsUUFBUXVCLHNCQUFzQixFQUM5RHRCLEtBQUtxQixvQkFBb0IsR0FBRzdCLElBQUlZLFlBQVksQ0FBQ2lCLG9CQUFvQixDQUFDN0IsS0FBS08sUUFBUXVCLHNCQUFzQjtJQUV2RyxPQUFPOUIsSUFBSVksWUFBWSxDQUFDbUIsV0FBVyxDQUFDdkIsSUFBSSxDQUFDUixLQUFLTyxTQUFTQztBQUN6RCJ9