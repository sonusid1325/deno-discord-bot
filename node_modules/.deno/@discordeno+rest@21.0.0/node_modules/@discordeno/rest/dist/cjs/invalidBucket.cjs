"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createInvalidRequestBucket", {
    enumerable: true,
    get: function() {
        return createInvalidRequestBucket;
    }
});
const _utils = require("@discordeno/utils");
function createInvalidRequestBucket(options) {
    const bucket = {
        invalidRequests: options.current ?? 0,
        max: options.max ?? 10000,
        interval: options.interval ?? 600_000,
        resetAt: options.resetAt,
        safety: options.safety ?? 1,
        errorStatuses: options.errorStatuses ?? [
            401,
            403,
            429
        ],
        activeRequests: options.requested ?? 0,
        processing: false,
        logger: options.logger ?? _utils.logger,
        waiting: [],
        requestsAllowed: function() {
            if (bucket.resetAt !== undefined && Date.now() >= bucket.resetAt) {
                bucket.invalidRequests = 0;
                bucket.resetAt = Date.now() + bucket.interval;
            }
            return bucket.max - bucket.invalidRequests - bucket.activeRequests - bucket.safety;
        },
        isRequestAllowed: function() {
            return bucket.requestsAllowed() > 0;
        },
        waitUntilRequestAvailable: async function() {
            return await new Promise(async (resolve)=>{
                // If whatever amount of requests is left is more than the safety margin, allow the request
                if (bucket.isRequestAllowed()) {
                    bucket.activeRequests += 1;
                    resolve();
                } else {
                    bucket.waiting.push(resolve);
                    await bucket.processWaiting();
                }
            });
        },
        processWaiting: async function() {
            // If already processing, that loop will handle all waiting requests.
            if (bucket.processing) return;
            // Mark as processing so other loops don't start
            bucket.processing = true;
            while(bucket.waiting.length > 0){
                bucket.logger.info(`[InvalidBucket] processing waiting queue while loop ran with ${bucket.waiting.length} pending requests to be made. ${JSON.stringify(bucket)}`);
                if (!bucket.isRequestAllowed() && bucket.resetAt !== undefined) {
                    bucket.logger.warn(`[InvalidBucket] processing waiting queue is now paused until more requests are available. ${bucket.waiting.length} pending requests. ${JSON.stringify(bucket)}`);
                    await (0, _utils.delay)(bucket.resetAt - Date.now());
                }
                bucket.activeRequests += 1;
                // Resolve the next item in the queue
                bucket.waiting.shift()?.();
            }
            // Mark as false so next pending request can be triggered by new loop.
            bucket.processing = false;
        },
        handleCompletedRequest: function(code, sharedScope) {
            // Since request is complete, we can remove one from requested.
            bucket.activeRequests -= 1;
            // Since it is as a valid request, we don't need to do anything
            if (!bucket.errorStatuses.includes(code)) return;
            // Shared scope is not considered invalid
            if (code === 429 && sharedScope) return;
            // INVALID REQUEST WAS MADE
            if (bucket.resetAt === undefined) {
                bucket.resetAt = Date.now() + bucket.interval;
            }
            bucket.invalidRequests += 1;
            bucket.logger.warn(`[InvalidBucket] an invalid request was made. Increasing invalidRequests count to ${bucket.invalidRequests}`);
        }
    };
    return bucket;
}

//# sourceMappingURL=data:application/json;base64,